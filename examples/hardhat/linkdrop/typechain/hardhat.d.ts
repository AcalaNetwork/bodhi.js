/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManager__factory>;
    getContractFactory(
      name: "LinkdropFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropFactory__factory>;
    getContractFactory(
      name: "LinkdropFactoryCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropFactoryCommon__factory>;
    getContractFactory(
      name: "LinkdropFactoryERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropFactoryERC20__factory>;
    getContractFactory(
      name: "LinkdropFactoryERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropFactoryERC721__factory>;
    getContractFactory(
      name: "RelayerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerManager__factory>;
    getContractFactory(
      name: "ILinkdropCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinkdropCommon__factory>;
    getContractFactory(
      name: "ILinkdropERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinkdropERC20__factory>;
    getContractFactory(
      name: "ILinkdropERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinkdropERC721__factory>;
    getContractFactory(
      name: "ILinkdropFactoryERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinkdropFactoryERC20__factory>;
    getContractFactory(
      name: "ILinkdropFactoryERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinkdropFactoryERC721__factory>;
    getContractFactory(
      name: "LinkdropCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropCommon__factory>;
    getContractFactory(
      name: "LinkdropERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropERC20__factory>;
    getContractFactory(
      name: "LinkdropERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropERC721__factory>;
    getContractFactory(
      name: "LinkdropMastercopy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropMastercopy__factory>;
    getContractFactory(
      name: "NFTMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTMock__factory>;
    getContractFactory(
      name: "TokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMock__factory>;
    getContractFactory(
      name: "LinkdropFactoryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropFactoryStorage__factory>;
    getContractFactory(
      name: "LinkdropStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkdropStorage__factory>;
    getContractFactory(
      name: "Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Context__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Detailed__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;

    getContractAt(
      name: "FeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManager>;
    getContractAt(
      name: "LinkdropFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropFactory>;
    getContractAt(
      name: "LinkdropFactoryCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropFactoryCommon>;
    getContractAt(
      name: "LinkdropFactoryERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropFactoryERC20>;
    getContractAt(
      name: "LinkdropFactoryERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropFactoryERC721>;
    getContractAt(
      name: "RelayerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerManager>;
    getContractAt(
      name: "ILinkdropCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinkdropCommon>;
    getContractAt(
      name: "ILinkdropERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinkdropERC20>;
    getContractAt(
      name: "ILinkdropERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinkdropERC721>;
    getContractAt(
      name: "ILinkdropFactoryERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinkdropFactoryERC20>;
    getContractAt(
      name: "ILinkdropFactoryERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinkdropFactoryERC721>;
    getContractAt(
      name: "LinkdropCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropCommon>;
    getContractAt(
      name: "LinkdropERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropERC20>;
    getContractAt(
      name: "LinkdropERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropERC721>;
    getContractAt(
      name: "LinkdropMastercopy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropMastercopy>;
    getContractAt(
      name: "NFTMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTMock>;
    getContractAt(
      name: "TokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMock>;
    getContractAt(
      name: "LinkdropFactoryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropFactoryStorage>;
    getContractAt(
      name: "LinkdropStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkdropStorage>;
    getContractAt(
      name: "Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Context>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Detailed>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
