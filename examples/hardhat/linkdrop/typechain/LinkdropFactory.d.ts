/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LinkdropFactoryInterface extends ethers.utils.Interface {
  functions: {
    "masterCopyVersion()": FunctionFragment;
    "deployProxy(uint256)": FunctionFragment;
    "getInitcode()": FunctionFragment;
    "getBytecode()": FunctionFragment;
    "isRelayer(address)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "deployed(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "deployProxyWithSigner(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "destroyProxy(uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "getProxyMasterCopyVersion(address,uint256)": FunctionFragment;
    "claimERC721(uint256,address,uint256,uint256,address,address,uint256,bytes,address,bytes)": FunctionFragment;
    "chainId()": FunctionFragment;
    "setStandardFee(uint256)": FunctionFragment;
    "salt(address,uint256)": FunctionFragment;
    "checkClaimParamsERC721(uint256,address,uint256,uint256,address,address,uint256,bytes,address,bytes)": FunctionFragment;
    "isClaimedLink(address,uint256,address)": FunctionFragment;
    "checkClaimParams(uint256,address,uint256,uint256,address,address,uint256,bytes,address,bytes)": FunctionFragment;
    "setMasterCopy(address)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "claim(uint256,address,uint256,uint256,address,address,uint256,bytes,address,bytes)": FunctionFragment;
    "setFee(address,uint256)": FunctionFragment;
    "isDeployed(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "standardFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "masterCopyVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitcode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployed", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxyWithSigner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "destroyProxy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProxyMasterCopyVersion",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimERC721",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStandardFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "salt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimParamsERC721",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimedLink",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimParams",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterCopy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeployed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "standardFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "masterCopyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitcode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProxyWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "destroyProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyMasterCopyVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStandardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimParamsERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimedLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDeployed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "standardFee",
    data: BytesLike
  ): Result;

  events: {
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "FeeChanged(address,uint256)": EventFragment;
    "Deployed(address,uint256,address,bytes32)": EventFragment;
    "Destroyed(address,address)": EventFragment;
    "SetMasterCopy(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Destroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMasterCopy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type RelayerAddedEvent = TypedEvent<[string] & { relayer: string }>;

export type RelayerRemovedEvent = TypedEvent<[string] & { relayer: string }>;

export type FeeChangedEvent = TypedEvent<
  [string, BigNumber] & { proxy: string; fee: BigNumber }
>;

export type DeployedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    owner: string;
    campaignId: BigNumber;
    proxy: string;
    salt: string;
  }
>;

export type DestroyedEvent = TypedEvent<
  [string, string] & { owner: string; proxy: string }
>;

export type SetMasterCopyEvent = TypedEvent<
  [string, BigNumber] & { masterCopy: string; version: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class LinkdropFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LinkdropFactoryInterface;

  functions: {
    masterCopyVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployProxy(
      _campaignId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitcode(overrides?: CallOverrides): Promise<[string]>;

    getBytecode(overrides?: CallOverrides): Promise<[string]>;

    isRelayer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployed(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployProxyWithSigner(
      _campaignId: BigNumberish,
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    destroyProxy(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    getProxyMasterCopyVersion(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStandardFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salt(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkClaimParamsERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isClaimedLink(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkClaimParams(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _proxy: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDeployed(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    standardFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  masterCopyVersion(overrides?: CallOverrides): Promise<BigNumber>;

  deployProxy(
    _campaignId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitcode(overrides?: CallOverrides): Promise<string>;

  getBytecode(overrides?: CallOverrides): Promise<string>;

  isRelayer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployProxyWithSigner(
    _campaignId: BigNumberish,
    _signer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  destroyProxy(
    _campaignId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  getProxyMasterCopyVersion(
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimERC721(
    _weiAmount: BigNumberish,
    _nftAddress: string,
    _tokenId: BigNumberish,
    _expiration: BigNumberish,
    _linkId: string,
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    _linkdropSignerSignature: BytesLike,
    _receiver: string,
    _receiverSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  setStandardFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salt(
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  checkClaimParamsERC721(
    _weiAmount: BigNumberish,
    _nftAddress: string,
    _tokenId: BigNumberish,
    _expiration: BigNumberish,
    _linkId: string,
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    _linkdropSignerSignature: BytesLike,
    _receiver: string,
    _receiverSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isClaimedLink(
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    _linkId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkClaimParams(
    _weiAmount: BigNumberish,
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    _expiration: BigNumberish,
    _linkId: string,
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    _linkdropSignerSignature: BytesLike,
    _receiver: string,
    _receiverSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _weiAmount: BigNumberish,
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    _expiration: BigNumberish,
    _linkId: string,
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    _linkdropSignerSignature: BytesLike,
    _receiver: string,
    _receiverSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _proxy: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDeployed(
    _linkdropMaster: string,
    _campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  standardFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    masterCopyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    deployProxy(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getInitcode(overrides?: CallOverrides): Promise<string>;

    getBytecode(overrides?: CallOverrides): Promise<string>;

    isRelayer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removeRelayer(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployed(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    deployProxyWithSigner(
      _campaignId: BigNumberish,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    destroyProxy(
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    getProxyMasterCopyVersion(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    setStandardFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    salt(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    checkClaimParamsERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isClaimedLink(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkClaimParams(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addRelayer(_relayer: string, overrides?: CallOverrides): Promise<boolean>;

    claim(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFee(
      _proxy: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDeployed(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    standardFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RelayerAdded(address)"(
      relayer?: string | null
    ): TypedEventFilter<[string], { relayer: string }>;

    RelayerAdded(
      relayer?: string | null
    ): TypedEventFilter<[string], { relayer: string }>;

    "RelayerRemoved(address)"(
      relayer?: string | null
    ): TypedEventFilter<[string], { relayer: string }>;

    RelayerRemoved(
      relayer?: string | null
    ): TypedEventFilter<[string], { relayer: string }>;

    "FeeChanged(address,uint256)"(
      proxy?: null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { proxy: string; fee: BigNumber }>;

    FeeChanged(
      proxy?: null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { proxy: string; fee: BigNumber }>;

    "Deployed(address,uint256,address,bytes32)"(
      owner?: string | null,
      campaignId?: null,
      proxy?: null,
      salt?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { owner: string; campaignId: BigNumber; proxy: string; salt: string }
    >;

    Deployed(
      owner?: string | null,
      campaignId?: null,
      proxy?: null,
      salt?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { owner: string; campaignId: BigNumber; proxy: string; salt: string }
    >;

    "Destroyed(address,address)"(
      owner?: null,
      proxy?: null
    ): TypedEventFilter<[string, string], { owner: string; proxy: string }>;

    Destroyed(
      owner?: null,
      proxy?: null
    ): TypedEventFilter<[string, string], { owner: string; proxy: string }>;

    "SetMasterCopy(address,uint256)"(
      masterCopy?: null,
      version?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { masterCopy: string; version: BigNumber }
    >;

    SetMasterCopy(
      masterCopy?: null,
      version?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { masterCopy: string; version: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    masterCopyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    deployProxy(
      _campaignId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitcode(overrides?: CallOverrides): Promise<BigNumber>;

    getBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    isRelayer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployed(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployProxyWithSigner(
      _campaignId: BigNumberish,
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    destroyProxy(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyMasterCopyVersion(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    setStandardFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salt(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkClaimParamsERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimedLink(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkClaimParams(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _proxy: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDeployed(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    standardFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    masterCopyVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployProxy(
      _campaignId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitcode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRelayer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployProxyWithSigner(
      _campaignId: BigNumberish,
      _signer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroyProxy(
      _campaignId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyMasterCopyVersion(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStandardFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salt(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkClaimParamsERC721(
      _weiAmount: BigNumberish,
      _nftAddress: string,
      _tokenId: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimedLink(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkClaimParams(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _weiAmount: BigNumberish,
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      _expiration: BigNumberish,
      _linkId: string,
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      _linkdropSignerSignature: BytesLike,
      _receiver: string,
      _receiverSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _proxy: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDeployed(
      _linkdropMaster: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    standardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
