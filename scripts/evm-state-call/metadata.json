{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": ["sp_core", "crypto", "AccountId32"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 1,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 2,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": 3,
            "type": {
              "path": ["frame_system", "AccountInfo"],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 4,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": 5,
            "type": {
              "path": ["pallet_balances", "AccountData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 6,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": 7,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 8,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": 9,
            "type": {
              "path": ["primitive_types", "H256"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; /*«*/ 32 /*»*/]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 10,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 11,
            "type": {
              "path": ["sp_runtime", "generic", "digest", "Digest"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 12,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": []
            }
          },
          {
            "id": 13,
            "type": {
              "path": ["sp_runtime", "generic", "digest", "DigestItem"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 14,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 15,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 16
                }
              },
              "docs": []
            }
          },
          {
            "id": 16,
            "type": {
              "path": ["frame_system", "EventRecord"],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 199,
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 178,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 17,
            "type": {
              "path": ["mandala_runtime", "Event"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "TransactionPause",
                      "fields": [
                        {
                          "name": null,
                          "type": 33,
                          "typeName": "module_transaction_pause::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 36,
                          "typeName": "pallet_preimage::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 37,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "orml_tokens::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "module_currencies::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 46,
                          "typeName": "orml_vesting::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": 49,
                          "typeName": "module_transaction_payment::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 51,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 52,
                          "typeName": "pallet_bounties::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 53,
                          "typeName": "pallet_tips::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 54,
                          "typeName": "pallet_utility::Event",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "pallet_multisig::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 57,
                          "typeName": "pallet_recovery::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "IdleScheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 60,
                          "typeName": "module_idle_scheduler::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "pallet_indices::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "GeneralCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "GeneralCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "FinancialCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "FinancialCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "HomaCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance3>",
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "HomaCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance3>",
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance4>",
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommitteeMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance4>",
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Authority",
                      "fields": [
                        {
                          "name": null,
                          "type": 74,
                          "typeName": "orml_authority::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 96,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 99,
                          "typeName": "pallet_democracy::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "AcalaOracle",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": "orml_oracle::Event<Runtime, orml_oracle::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "OperatorMembershipAcala",
                      "fields": [
                        {
                          "name": null,
                          "type": 107,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance5>",
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Auction",
                      "fields": [
                        {
                          "name": null,
                          "type": 108,
                          "typeName": "orml_auction::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Prices",
                      "fields": [
                        {
                          "name": null,
                          "type": 109,
                          "typeName": "module_prices::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": 110,
                          "typeName": "module_dex::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "AuctionManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 114,
                          "typeName": "module_auction_manager::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Loans",
                      "fields": [
                        {
                          "name": null,
                          "type": 115,
                          "typeName": "module_loans::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Honzon",
                      "fields": [
                        {
                          "name": null,
                          "type": 117,
                          "typeName": "module_honzon::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "CdpTreasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 118,
                          "typeName": "module_cdp_treasury::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "CdpEngine",
                      "fields": [
                        {
                          "name": null,
                          "type": 119,
                          "typeName": "module_cdp_engine::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "EmergencyShutdown",
                      "fields": [
                        {
                          "name": null,
                          "type": 121,
                          "typeName": "module_emergency_shutdown::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "NomineesElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 124,
                          "typeName": "module_nominees_election::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Homa",
                      "fields": [
                        {
                          "name": null,
                          "type": 125,
                          "typeName": "module_homa::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "XcmInterface",
                      "fields": [
                        {
                          "name": null,
                          "type": 128,
                          "typeName": "module_xcm_interface::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Incentives",
                      "fields": [
                        {
                          "name": null,
                          "type": 130,
                          "typeName": "module_incentives::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "NFT",
                      "fields": [
                        {
                          "name": null,
                          "type": 132,
                          "typeName": "module_nft::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "name": null,
                          "type": 133,
                          "typeName": "module_asset_registry::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "RenVmBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "ecosystem_renvm_bridge::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Starport",
                      "fields": [
                        {
                          "name": null,
                          "type": 137,
                          "typeName": "ecosystem_starport::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "CompoundCash",
                      "fields": [
                        {
                          "name": null,
                          "type": 138,
                          "typeName": "ecosystem_compound_cash::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 142,
                          "typeName": "pallet_xcm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 170,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 171,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 172,
                          "typeName": "orml_xtokens::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "UnknownTokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 173,
                          "typeName": "orml_unknown_tokens::Event",
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 174,
                          "typeName": "orml_xcm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 175,
                          "typeName": "module_evm::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "EvmAccounts",
                      "fields": [
                        {
                          "name": null,
                          "type": 187,
                          "typeName": "module_evm_accounts::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "name": null,
                          "type": 188,
                          "typeName": "module_collator_selection::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 189,
                          "typeName": "pallet_session::Event",
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "SessionManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 190,
                          "typeName": "module_session_manager::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "StableAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 191,
                          "typeName": "nutsfinance_stable_asset::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Payments",
                      "fields": [
                        {
                          "name": null,
                          "type": 192,
                          "typeName": "orml_payments::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Earning",
                      "fields": [
                        {
                          "name": null,
                          "type": 196,
                          "typeName": "module_earning::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 197,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 198,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 18,
            "type": {
              "path": ["frame_system", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["An extrinsic completed successfully."]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["An extrinsic failed."]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": 2,
                      "docs": ["`:code` was updated."]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A new account was created."]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["An account was reaped."]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["On on-chain remark happened."]
                    }
                  ]
                }
              },
              "docs": ["Event for the System pallet."]
            }
          },
          {
            "id": 19,
            "type": {
              "path": ["frame_support", "weights", "DispatchInfo"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 20,
            "type": {
              "path": ["frame_support", "weights", "DispatchClass"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 21,
            "type": {
              "path": ["frame_support", "weights", "Pays"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 22,
            "type": {
              "path": ["sp_runtime", "DispatchError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "TransactionalError",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 23,
            "type": {
              "path": ["sp_runtime", "ModuleError"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 14,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 24,
            "type": {
              "path": ["sp_runtime", "TokenError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 25,
            "type": {
              "path": ["sp_runtime", "ArithmeticError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 26,
            "type": {
              "path": ["sp_runtime", "TransactionalError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NoLayer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 27,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Scheduled some task."]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Canceled some task."]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 28,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 29,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Dispatched some task."]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 28,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 29,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 32,
                          "typeName": "LookupError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["The call for the provided hash was not found so the task has been aborted."]
                    }
                  ]
                }
              },
              "docs": ["Events type."]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 4]
              },
              "docs": []
            }
          },
          {
            "id": 29,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 30,
            "type": {
              "path": ["Result"],
              "params": [
                {
                  "name": "T",
                  "type": 31
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 31,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 31,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": []
              },
              "docs": []
            }
          },
          {
            "id": 32,
            "type": {
              "path": ["frame_support", "traits", "schedule", "LookupError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BadFormat",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 33,
            "type": {
              "path": ["module_transaction_pause", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionPaused",
                      "fields": [
                        {
                          "name": "pallet_name_bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "function_name_bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Paused transaction"]
                    },
                    {
                      "name": "TransactionUnpaused",
                      "fields": [
                        {
                          "name": "pallet_name_bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "function_name_bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Unpaused transaction"]
                    },
                    {
                      "name": "EvmPrecompilePaused",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Paused EVM precompile"]
                    },
                    {
                      "name": "EvmPrecompileUnpaused",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Unpaused EVM precompile"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": ["primitive_types", "H160"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 35,
                      "typeName": "[u8; /*«*/ 20 /*»*/]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 35,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 36,
            "type": {
              "path": ["pallet_preimage", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A preimage has been noted."]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A preimage has been requested."]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A preimage has ben cleared."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": ["pallet_balances", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["An account was created with some free balance."]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Transfer succeeded."]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A balance was set by root."]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Some balance was reserved (moved from free to reserved)."]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Some balance was unreserved (moved from reserved to free)."]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": 38,
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["Some amount was deposited (e.g. for transaction fees)."]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["Some amount was removed from the account (e.g. for misbehavior)."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": ["frame_support", "traits", "tokens", "misc", "BalanceStatus"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 39,
            "type": {
              "path": ["orml_tokens", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["An account was created with some free balance."]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Transfer succeeded."]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Some balance was reserved (moved from free to reserved)."]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Some balance was unreserved (moved from reserved to free)."]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "status",
                          "type": 38,
                          "typeName": "BalanceStatus",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Some reserved balance was repatriated (moved from reserved to", "another account)."]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A balance was set by root."]
                    },
                    {
                      "name": "TotalIssuanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["The total issuance of an currency has been set"]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["Some balances were withdrawn (e.g. pay for transaction fee)"]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["Some balances were slashed (e.g. due to mis-behavior)"]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": ["Deposited some balance into an account"]
                    },
                    {
                      "name": "LockSet",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 44,
                          "typeName": "LockIdentifier",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": ["Some funds are locked"]
                    },
                    {
                      "name": "LockRemoved",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 44,
                          "typeName": "LockIdentifier",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": ["Some locked funds were unlocked"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": ["acala_primitives", "currency", "CurrencyId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "TokenSymbol",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DexShare",
                      "fields": [
                        {
                          "name": null,
                          "type": 42,
                          "typeName": "DexShare",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 42,
                          "typeName": "DexShare",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Erc20",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "StableAssetPoolToken",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "LiquidCrowdloan",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "Lease",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "ForeignAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 41,
            "type": {
              "path": ["acala_primitives", "currency", "TokenSymbol"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ACA",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AUSD",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DOT",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "LDOT",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TAP",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "RENBTC",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "CASH",
                      "fields": [],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "KAR",
                      "fields": [],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "KUSD",
                      "fields": [],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "KSM",
                      "fields": [],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "LKSM",
                      "fields": [],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "TAI",
                      "fields": [],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "BNC",
                      "fields": [],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "VSKSM",
                      "fields": [],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "PHA",
                      "fields": [],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "KINT",
                      "fields": [],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "KBTC",
                      "fields": [],
                      "index": 172,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 42,
            "type": {
              "path": ["acala_primitives", "currency", "DexShare"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "TokenSymbol",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Erc20",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "LiquidCrowdloan",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "Lease",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ForeignAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "StableAssetPoolToken",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 43,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": 44,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 45,
            "type": {
              "path": ["module_currencies", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Currency transfer success."]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Withdrawn some balances from an account"]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Deposited some balance into an account"]
                    },
                    {
                      "name": "DustSwept",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Dust swept."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": ["orml_vesting", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingScheduleAdded",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "vesting_schedule",
                          "type": 47,
                          "typeName": "VestingScheduleOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Added new vesting schedule."]
                    },
                    {
                      "name": "Claimed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Claimed vesting."]
                    },
                    {
                      "name": "VestingSchedulesUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Updated vesting schedules."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": ["orml_vesting", "VestingSchedule"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "per_period",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 48,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 49,
            "type": {
              "path": ["module_transaction_payment", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ChargeFeePoolEnabled",
                      "fields": [
                        {
                          "name": "sub_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "exchange_rate",
                          "type": 50,
                          "typeName": "Ratio",
                          "docs": []
                        },
                        {
                          "name": "pool_size",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "swap_threshold",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["The charge fee pool is enabled"]
                    },
                    {
                      "name": "ChargeFeePoolSwapped",
                      "fields": [
                        {
                          "name": "sub_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "supply_currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "old_exchange_rate",
                          "type": 50,
                          "typeName": "Ratio",
                          "docs": []
                        },
                        {
                          "name": "swap_exchange_rate",
                          "type": 50,
                          "typeName": "Ratio",
                          "docs": []
                        },
                        {
                          "name": "new_exchange_rate",
                          "type": 50,
                          "typeName": "Ratio",
                          "docs": []
                        },
                        {
                          "name": "new_pool_size",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The charge fee pool is swapped"]
                    },
                    {
                      "name": "ChargeFeePoolDisabled",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "foreign_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "native_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["The charge fee pool is disabled"]
                    },
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "actual_tip",
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "actual_surplus",
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A transaction `actual_fee`, of which `actual_tip` was added to the minimum inclusion",
                        "fee, has been paid by `who`. `actual_surplus` indicate extra amount when paid by none",
                        "native token."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": ["sp_arithmetic", "fixed_point", "FixedU128"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 51,
            "type": {
              "path": ["pallet_treasury", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["New proposal."]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["We have ended a spend period and will now allocate funds."]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Some funds have been allocated."]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A proposal was rejected; funds were slashed."]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Some of our funds have been burnt."]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Spending has finished; this is the amount that rolls over until next spend."]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["Some funds have been deposited."]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["A new spend proposal has been approved."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": ["pallet_bounties", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BountyProposed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["New bounty proposal."]
                    },
                    {
                      "name": "BountyRejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A bounty proposal was rejected; funds were slashed."]
                    },
                    {
                      "name": "BountyBecameActive",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A bounty proposal is funded and became active."]
                    },
                    {
                      "name": "BountyAwarded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A bounty is awarded to a beneficiary."]
                    },
                    {
                      "name": "BountyClaimed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A bounty is claimed by beneficiary."]
                    },
                    {
                      "name": "BountyCanceled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A bounty is cancelled."]
                    },
                    {
                      "name": "BountyExtended",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A bounty expiry is extended."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": ["pallet_tips", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A new tip suggestion has been opened."]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A tip suggestion has reached threshold and is closing."]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A tip suggestion has been closed."]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A tip suggestion has been retracted."]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A tip suggestion has been slashed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": ["pallet_utility", "pallet", "Event"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [],
                      "index": 1,
                      "docs": ["Batch of dispatches completed fully with no error."]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "fields": [],
                      "index": 2,
                      "docs": ["Batch of dispatches completed but has errors."]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [],
                      "index": 3,
                      "docs": ["A single item within a Batch of dispatches has completed with no error."]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A single item within a Batch of dispatches has completed with error."]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A call was dispatched."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": ["pallet_multisig", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A new multisig operation has begun."]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 56,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A multisig operation has been approved by someone."]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 56,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A multisig operation has been executed."]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 56,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A multisig operation has been cancelled."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": ["pallet_multisig", "Timepoint"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 57,
            "type": {
              "path": ["pallet_recovery", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A recovery process has been set up for an account."]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A recovery process has been initiated for lost account by rescuer account."]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A recovery process for lost account by rescuer account has been vouched for by sender."]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A recovery process for lost account by rescuer account has been closed."]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Lost account has been successfully recovered by rescuer account."]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A recovery process has been removed for an account."]
                    }
                  ]
                }
              },
              "docs": ["Events type."]
            }
          },
          {
            "id": 58,
            "type": {
              "path": ["pallet_proxy", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A proxy was executed correctly, with the given."]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["An announcement was placed to make a call in the future."]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A proxy was added."]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A proxy was removed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": ["runtime_common", "ProxyType"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CancelProxy",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Governance",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Auction",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Swap",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Loan",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "DexLiquidity",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "StableAssetSwap",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "StableAssetLiquidity",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Homa",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 60,
            "type": {
              "path": ["module_idle_scheduler", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TaskDispatched",
                      "fields": [
                        {
                          "name": "task_id",
                          "type": 4,
                          "typeName": "Nonce",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A task has been dispatched on_idle."]
                    },
                    {
                      "name": "TaskAdded",
                      "fields": [
                        {
                          "name": "task_id",
                          "type": 4,
                          "typeName": "Nonce",
                          "docs": []
                        },
                        {
                          "name": "task",
                          "type": 61,
                          "typeName": "T::Task",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A task is added."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": ["mandala_runtime", "ScheduledTasks"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EvmTask",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "EvmTask<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 62,
            "type": {
              "path": ["module_evm", "EvmTask"],
              "params": [
                {
                  "name": "T",
                  "type": 63
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Schedule",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Remove",
                      "fields": [
                        {
                          "name": "caller",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "maintainer",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 63,
            "type": {
              "path": ["mandala_runtime", "Runtime"],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 64,
            "type": {
              "path": ["pallet_indices", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A account index was assigned."]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A account index has been freed up (unassigned)."]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A account index has been frozen to its current account ID."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A motion was approved by the required threshold."]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A motion was not approved by the required threshold."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A motion was executed; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A single member did some action; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A proposal was closed because its threshold was reached or after its duration was up."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": 67,
            "type": {
              "path": ["pallet_membership", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": ["The given member was added; see the transaction for who."]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": ["The given member was removed; see the transaction for who."]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": ["Two members were swapped; see the transaction for who."]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": ["The membership was reset; see the transaction for who the new set is."]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": ["One of the members' keys changed."]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": ["Phantom member, never used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A motion was approved by the required threshold."]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A motion was not approved by the required threshold."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A motion was executed; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A single member did some action; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A proposal was closed because its threshold was reached or after its duration was up."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": ["pallet_membership", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": ["The given member was added; see the transaction for who."]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": ["The given member was removed; see the transaction for who."]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": ["Two members were swapped; see the transaction for who."]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": ["The membership was reset; see the transaction for who the new set is."]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": ["One of the members' keys changed."]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": ["Phantom member, never used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A motion was approved by the required threshold."]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A motion was not approved by the required threshold."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A motion was executed; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A single member did some action; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A proposal was closed because its threshold was reached or after its duration was up."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": ["pallet_membership", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": ["The given member was added; see the transaction for who."]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": ["The given member was removed; see the transaction for who."]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": ["Two members were swapped; see the transaction for who."]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": ["The membership was reset; see the transaction for who the new set is."]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": ["One of the members' keys changed."]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": ["Phantom member, never used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": ["pallet_collective", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A motion was approved by the required threshold."]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A motion was not approved by the required threshold."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A motion was executed; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A single member did some action; result will be `Ok` if it returned without error."]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A proposal was closed because its threshold was reached or after its duration was up."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": ["pallet_membership", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": ["The given member was added; see the transaction for who."]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": ["The given member was removed; see the transaction for who."]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": ["Two members were swapped; see the transaction for who."]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": ["The membership was reset; see the transaction for who the new set is."]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": ["One of the members' keys changed."]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": ["Phantom member, never used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 74,
            "type": {
              "path": ["orml_authority", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A call is dispatched."]
                    },
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 75,
                          "typeName": "T::PalletsOrigin",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A call is scheduled."]
                    },
                    {
                      "name": "FastTracked",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 75,
                          "typeName": "T::PalletsOrigin",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A scheduled call is fast tracked."]
                    },
                    {
                      "name": "Delayed",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 75,
                          "typeName": "T::PalletsOrigin",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A scheduled call is delayed."]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 75,
                          "typeName": "T::PalletsOrigin",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A scheduled call is cancelled."]
                    },
                    {
                      "name": "AuthorizedCall",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "caller",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A call is authorized."]
                    },
                    {
                      "name": "RemovedAuthorizedCall",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["An authorized call was removed."]
                    },
                    {
                      "name": "TriggeredCallBy",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "caller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["An authorized call was triggered."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": ["mandala_runtime", "OriginCaller"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 76,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "GeneralCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 77,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "FinancialCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 78,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "HomaCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 79,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance3>",
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 80,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance4>",
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Authority",
                      "fields": [
                        {
                          "name": null,
                          "type": 81,
                          "typeName": "orml_authority::Origin<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "pallet_xcm::Origin",
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": "cumulus_pallet_xcm::Origin",
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 76,
            "type": {
              "path": ["frame_support", "dispatch", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "None",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 77,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 78,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 79,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 80,
            "type": {
              "path": ["pallet_collective", "RawOrigin"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "_Phantom",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 81,
            "type": {
              "path": ["orml_authority", "DelayedOrigin"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 75
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 75,
                      "typeName": "Box<PalletsOrigin>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 82,
            "type": {
              "path": ["pallet_xcm", "pallet", "Origin"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 83,
            "type": {
              "path": ["xcm", "v1", "multilocation", "MultiLocation"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "interior",
                      "type": 84,
                      "typeName": "Junctions",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 84,
            "type": {
              "path": ["xcm", "v1", "multilocation", "Junctions"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 85,
            "type": {
              "path": ["xcm", "v1", "junction", "Junction"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 35,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 90,
                          "typeName": "BodyId",
                          "docs": []
                        },
                        {
                          "name": "part",
                          "type": 91,
                          "typeName": "BodyPart",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 86,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 87,
            "type": {
              "path": ["xcm", "v0", "junction", "NetworkId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Polkadot",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Kusama",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 88,
            "type": {
              "path": ["sp_runtime", "bounded", "weak_bounded_vec", "WeakBoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 89,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 8
                }
              },
              "docs": []
            }
          },
          {
            "id": 90,
            "type": {
              "path": ["xcm", "v0", "junction", "BodyId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Executive",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Technical",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Legislative",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Judicial",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 91,
            "type": {
              "path": ["xcm", "v0", "junction", "BodyPart"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "denom",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 92,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Origin"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "ParaId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 93,
            "type": {
              "path": ["polkadot_parachain", "primitives", "Id"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 94,
            "type": {
              "path": ["sp_core", "Void"],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 95,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 96,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 97,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "fields": [],
                      "index": 2,
                      "docs": ["Internal error happened while trying to perform election."]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Someone has renounced their candidacy."]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A seat holder was slashed by amount by being forcefully removed from the set."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 97,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 98
                }
              },
              "docs": []
            }
          },
          {
            "id": 98,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 6]
              },
              "docs": []
            }
          },
          {
            "id": 99,
            "type": {
              "path": ["pallet_democracy", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A motion has been proposed by a public account."]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "depositors",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A public proposal has been tabled for referendum vote."]
                    },
                    {
                      "name": "ExternalTabled",
                      "fields": [],
                      "index": 2,
                      "docs": ["An external proposal has been tabled."]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 101,
                          "typeName": "VoteThreshold",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A referendum has begun."]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A proposal has been approved by referendum."]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["A proposal has been rejected by referendum."]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["A referendum has been cancelled."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["A proposal has been enacted."]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["An account has delegated their vote to another account."]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["An account has cancelled a previous delegation operation."]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": ["An external proposal has been vetoed."]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": ["A proposal's preimage was noted, and the deposit taken."]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": ["A proposal preimage was removed and used (the deposit was returned)."]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": ["A proposal could not be executed because its preimage was invalid."]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": ["A proposal could not be executed because its preimage was missing."]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": ["A registered preimage was removed and the deposit collected by the reaper."]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": ["A proposal_hash has been blacklisted permanently."]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 102,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": ["An account has voted in a referendum"]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": ["An account has secconded a proposal"]
                    },
                    {
                      "name": "ProposalCanceled",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": ["A proposal got canceled."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 100,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": []
            }
          },
          {
            "id": 101,
            "type": {
              "path": ["pallet_democracy", "vote_threshold", "VoteThreshold"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "SimpleMajority",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 102,
            "type": {
              "path": ["pallet_democracy", "vote", "AccountVote"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 103,
                          "typeName": "Vote",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 103,
            "type": {
              "path": ["pallet_democracy", "vote", "Vote"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 104,
            "type": {
              "path": ["orml_oracle", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewFeedData",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "values",
                          "type": 105,
                          "typeName": "Vec<(T::OracleKey, T::OracleValue)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["New feed data is submitted."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 106
                }
              },
              "docs": []
            }
          },
          {
            "id": 106,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [40, 50]
              },
              "docs": []
            }
          },
          {
            "id": 107,
            "type": {
              "path": ["pallet_membership", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": ["The given member was added; see the transaction for who."]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": ["The given member was removed; see the transaction for who."]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": ["Two members were swapped; see the transaction for who."]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": ["The membership was reset; see the transaction for who the new set is."]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": ["One of the members' keys changed."]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": ["Phantom member, never used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 108,
            "type": {
              "path": ["orml_auction", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bid",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "T::AuctionId",
                          "docs": []
                        },
                        {
                          "name": "bidder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A bid is placed"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": ["module_prices", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LockPrice",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "locked_price",
                          "type": 50,
                          "typeName": "Price",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Lock price."]
                    },
                    {
                      "name": "UnlockPrice",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Unlock price."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": ["module_dex", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddProvision",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_0",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "contribution_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "currency_1",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "contribution_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["add provision success"]
                    },
                    {
                      "name": "AddLiquidity",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_0",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "pool_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "currency_1",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "pool_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "share_increment",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Add liquidity success."]
                    },
                    {
                      "name": "RemoveLiquidity",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_0",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "pool_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "currency_1",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "pool_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "share_decrement",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Remove liquidity from the trading pool success."]
                    },
                    {
                      "name": "Swap",
                      "fields": [
                        {
                          "name": "trader",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "path",
                          "type": 111,
                          "typeName": "Vec<CurrencyId>",
                          "docs": []
                        },
                        {
                          "name": "liquidity_changes",
                          "type": 112,
                          "typeName": "Vec<Balance>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Use supply currency to swap target currency."]
                    },
                    {
                      "name": "EnableTradingPair",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 113,
                          "typeName": "TradingPair",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Enable trading pair."]
                    },
                    {
                      "name": "ListProvisioning",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 113,
                          "typeName": "TradingPair",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["List provisioning trading pair."]
                    },
                    {
                      "name": "DisableTradingPair",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 113,
                          "typeName": "TradingPair",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["Disable trading pair."]
                    },
                    {
                      "name": "ProvisioningToEnabled",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 113,
                          "typeName": "TradingPair",
                          "docs": []
                        },
                        {
                          "name": "pool_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "pool_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "share_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["Provisioning trading pair convert to Enabled."]
                    },
                    {
                      "name": "RefundProvision",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_0",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "contribution_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "currency_1",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "contribution_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["refund provision success"]
                    },
                    {
                      "name": "ProvisioningAborted",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 113,
                          "typeName": "TradingPair",
                          "docs": []
                        },
                        {
                          "name": "accumulated_provision_0",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "accumulated_provision_1",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["Provisioning trading pair aborted."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 40
                }
              },
              "docs": []
            }
          },
          {
            "id": 112,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 113,
            "type": {
              "path": ["acala_primitives", "TradingPair"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 40,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 40,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 114,
            "type": {
              "path": ["module_auction_manager", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewCollateralAuction",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_bid_price",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Collateral auction created."]
                    },
                    {
                      "name": "CancelAuction",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Active auction cancelled."]
                    },
                    {
                      "name": "CollateralAuctionDealt",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "winner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "payment_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Collateral auction dealt."]
                    },
                    {
                      "name": "DEXTakeCollateralAuction",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "supply_collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_stable_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Dex take collateral auction."]
                    },
                    {
                      "name": "CollateralAuctionAborted",
                      "fields": [
                        {
                          "name": "auction_id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_stable_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "refund_recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Collateral auction aborted."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": ["module_loans", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PositionUpdated",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        },
                        {
                          "name": "debit_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Position updated."]
                    },
                    {
                      "name": "ConfiscateCollateralAndDebit",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "confiscated_collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "deduct_debit_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Confiscate CDP's collateral assets and eliminate its debit."]
                    },
                    {
                      "name": "TransferLoan",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Transfer loan."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "I128"
              },
              "docs": []
            }
          },
          {
            "id": 117,
            "type": {
              "path": ["module_honzon", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Authorization",
                      "fields": [
                        {
                          "name": "authorizer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "authorizee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Authorize someone to operate the loan of specific collateral."]
                    },
                    {
                      "name": "UnAuthorization",
                      "fields": [
                        {
                          "name": "authorizer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "authorizee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Cancel the authorization of specific collateral for someone."]
                    },
                    {
                      "name": "UnAuthorizationAll",
                      "fields": [
                        {
                          "name": "authorizer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Cancel all authorization."]
                    },
                    {
                      "name": "TransferDebit",
                      "fields": [
                        {
                          "name": "from_currency",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "to_currency",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Transfers debit between two CDPs"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": ["module_cdp_treasury", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExpectedCollateralAuctionSizeUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_size",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The expected amount size for per lot collateral auction of specific collateral type",
                        "updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 119,
            "type": {
              "path": ["module_cdp_engine", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LiquidateUnsafeCDP",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "bad_debt_value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Liquidate the unsafe CDP."]
                    },
                    {
                      "name": "SettleCDPInDebit",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Settle the CDP has debit."]
                    },
                    {
                      "name": "CloseCDPInDebitByDEX",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "sold_collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "refund_collateral_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "debit_value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Directly close CDP has debit by handle debit with DEX."]
                    },
                    {
                      "name": "InterestRatePerSecUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_interest_rate_per_sec",
                          "type": 120,
                          "typeName": "Option<Rate>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["The interest rate per sec for specific collateral type updated."]
                    },
                    {
                      "name": "LiquidationRatioUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_liquidation_ratio",
                          "type": 120,
                          "typeName": "Option<Ratio>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["The liquidation fee for specific collateral type updated."]
                    },
                    {
                      "name": "LiquidationPenaltyUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_liquidation_penalty",
                          "type": 120,
                          "typeName": "Option<Rate>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["The liquidation penalty rate for specific collateral type updated."]
                    },
                    {
                      "name": "RequiredCollateralRatioUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_required_collateral_ratio",
                          "type": 120,
                          "typeName": "Option<Ratio>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["The required collateral penalty rate for specific collateral type updated."]
                    },
                    {
                      "name": "MaximumTotalDebitValueUpdated",
                      "fields": [
                        {
                          "name": "collateral_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_total_debit_value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["The hard cap of total debit value for specific collateral type updated."]
                    },
                    {
                      "name": "LiquidationContractRegistered",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["A new liquidation contract is registered."]
                    },
                    {
                      "name": "LiquidationContractDeregistered",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["A new liquidation contract is deregistered."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 50
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 121,
            "type": {
              "path": ["module_emergency_shutdown", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Shutdown",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Emergency shutdown occurs."]
                    },
                    {
                      "name": "OpenRefund",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The final redemption opened."]
                    },
                    {
                      "name": "Refund",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "stable_coin_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "refund_list",
                          "type": 122,
                          "typeName": "Vec<(CurrencyId, Balance)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Refund info."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 123
                }
              },
              "docs": []
            }
          },
          {
            "id": 123,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [40, 6]
              },
              "docs": []
            }
          },
          {
            "id": 124,
            "type": {
              "path": ["module_nominees_election", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Rebond",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": ["module_homa", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "minter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "staking_currency_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "liquid_amount_received",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "liquid_amount_added_to_void",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["The minter use staking currency to mint liquid currency."]
                    },
                    {
                      "name": "RequestedRedeem",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "liquid_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "allow_fast_match",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Request redeem."]
                    },
                    {
                      "name": "RedeemRequestCancelled",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "cancelled_liquid_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Redeem request has been cancelled."]
                    },
                    {
                      "name": "RedeemedByFastMatch",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "matched_liquid_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "fee_in_liquid",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "redeemed_staking_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Redeem request is redeemed partially or fully by fast match."]
                    },
                    {
                      "name": "RedeemedByUnbond",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "era_index_when_unbond",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": []
                        },
                        {
                          "name": "liquid_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "unbonding_staking_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Redeem request is redeemed by unbond on relaychain."]
                    },
                    {
                      "name": "WithdrawRedemption",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "redemption_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["The redeemer withdraw expired redemption."]
                    },
                    {
                      "name": "CurrentEraBumped",
                      "fields": [
                        {
                          "name": "new_era_index",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["The current era has been bumped."]
                    },
                    {
                      "name": "CurrentEraReset",
                      "fields": [
                        {
                          "name": "new_era_index",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["The current era has been reset."]
                    },
                    {
                      "name": "LedgerBondedReset",
                      "fields": [
                        {
                          "name": "sub_account_index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "new_bonded_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["The bonded amount of subaccount's ledger has been reset."]
                    },
                    {
                      "name": "LedgerUnlockingReset",
                      "fields": [
                        {
                          "name": "sub_account_index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "new_unlocking",
                          "type": 126,
                          "typeName": "Vec<UnlockChunk>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["The unlocking of subaccount's ledger has been reset."]
                    },
                    {
                      "name": "SoftBondedCapPerSubAccountUpdated",
                      "fields": [
                        {
                          "name": "cap_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": ["The soft bonded cap of per sub account has been updated."]
                    },
                    {
                      "name": "EstimatedRewardRatePerEraUpdated",
                      "fields": [
                        {
                          "name": "reward_rate",
                          "type": 50,
                          "typeName": "Rate",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": ["The estimated reward rate per era of relaychain staking has been updated."]
                    },
                    {
                      "name": "CommissionRateUpdated",
                      "fields": [
                        {
                          "name": "commission_rate",
                          "type": 50,
                          "typeName": "Rate",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": ["The commission rate has been updated."]
                    },
                    {
                      "name": "FastMatchFeeRateUpdated",
                      "fields": [
                        {
                          "name": "fast_match_fee_rate",
                          "type": 50,
                          "typeName": "Rate",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": ["The fast match fee rate has been updated."]
                    },
                    {
                      "name": "LastEraBumpedBlockUpdated",
                      "fields": [
                        {
                          "name": "last_era_bumped_block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": ["The relaychain block number of last era bumped updated."]
                    },
                    {
                      "name": "BumpEraFrequencyUpdated",
                      "fields": [
                        {
                          "name": "frequency",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": ["The frequency to bump era has been updated."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 127
                }
              },
              "docs": []
            }
          },
          {
            "id": 127,
            "type": {
              "path": ["module_homa", "module", "UnlockChunk"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "type": 86,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 128,
            "type": {
              "path": ["module_xcm_interface", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XcmDestWeightUpdated",
                      "fields": [
                        {
                          "name": "xcm_operation",
                          "type": 129,
                          "typeName": "XcmInterfaceOperation",
                          "docs": []
                        },
                        {
                          "name": "new_xcm_dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Xcm dest weight has been updated."]
                    },
                    {
                      "name": "XcmFeeUpdated",
                      "fields": [
                        {
                          "name": "xcm_operation",
                          "type": 129,
                          "typeName": "XcmInterfaceOperation",
                          "docs": []
                        },
                        {
                          "name": "new_xcm_dest_weight",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Xcm dest weight has been updated."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": ["module_xcm_interface", "module", "XcmInterfaceOperation"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XtokensTransfer",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "HomaWithdrawUnbonded",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "HomaBondExtra",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "HomaUnbond",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ParachainFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "Box<MultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 130,
            "type": {
              "path": ["module_incentives", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositDexShare",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dex_share_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Deposit DEX share."]
                    },
                    {
                      "name": "WithdrawDexShare",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dex_share_type",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "withdraw",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Withdraw DEX share."]
                    },
                    {
                      "name": "ClaimRewards",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool",
                          "type": 131,
                          "typeName": "PoolId",
                          "docs": []
                        },
                        {
                          "name": "reward_currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "actual_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "deduction_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Claim rewards."]
                    },
                    {
                      "name": "IncentiveRewardAmountUpdated",
                      "fields": [
                        {
                          "name": "pool",
                          "type": 131,
                          "typeName": "PoolId",
                          "docs": []
                        },
                        {
                          "name": "reward_currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "reward_amount_per_period",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Incentive reward amount updated."]
                    },
                    {
                      "name": "ClaimRewardDeductionRateUpdated",
                      "fields": [
                        {
                          "name": "pool",
                          "type": 131,
                          "typeName": "PoolId",
                          "docs": []
                        },
                        {
                          "name": "deduction_rate",
                          "type": 50,
                          "typeName": "Rate",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Payout deduction rate updated."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": ["module_support", "incentives", "PoolId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Loans",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 132,
            "type": {
              "path": ["module_nft", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CreatedClass",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Created NFT class."]
                    },
                    {
                      "name": "MintedToken",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "quantity",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Minted NFT token."]
                    },
                    {
                      "name": "TransferredToken",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": 8,
                          "typeName": "TokenIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Transferred NFT token."]
                    },
                    {
                      "name": "BurnedToken",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": 8,
                          "typeName": "TokenIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Burned NFT token."]
                    },
                    {
                      "name": "BurnedTokenWithRemark",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "token_id",
                          "type": 8,
                          "typeName": "TokenIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "remark_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Burned NFT token with remark."]
                    },
                    {
                      "name": "DestroyedClass",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Destroyed NFT class."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": ["module_asset_registry", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ForeignAssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_address",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "AssetMetadata<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["The foreign asset registered."]
                    },
                    {
                      "name": "ForeignAssetUpdated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        },
                        {
                          "name": "asset_address",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "AssetMetadata<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The foreign asset updated."]
                    },
                    {
                      "name": "AssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 135,
                          "typeName": "AssetIds",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "AssetMetadata<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["The asset registered."]
                    },
                    {
                      "name": "AssetUpdated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 135,
                          "typeName": "AssetIds",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "AssetMetadata<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["The asset updated."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": ["acala_primitives", "currency", "AssetMetadata"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "minimal_balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 135,
            "type": {
              "path": ["acala_primitives", "currency", "AssetIds"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Erc20",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "StableAssetId",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ForeignAssetId",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "NativeAssetId",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 136,
            "type": {
              "path": ["ecosystem_renvm_bridge", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Asset minted."]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 10,
                          "typeName": "DestAddress",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Asset burnt in this chain."]
                    },
                    {
                      "name": "RotatedKey",
                      "fields": [
                        {
                          "name": "key",
                          "type": 35,
                          "typeName": "PublicKey",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Rotated key"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": ["ecosystem_starport", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetLockedTo",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["User has locked some asset and uploaded them into Compound."]
                    },
                    {
                      "name": "AssetUnlocked",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The user has unlocked some asset and downloaded them back into Acala."]
                    },
                    {
                      "name": "GatewayAuthoritiesChanged",
                      "fields": [],
                      "index": 2,
                      "docs": ["The list of authorities has been updated."]
                    },
                    {
                      "name": "SupplyCapSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_cap",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["The supply cap for an asset has been updated."]
                    },
                    {
                      "name": "FutureYieldSet",
                      "fields": [
                        {
                          "name": "yield_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 6,
                          "typeName": "CashYieldIndex",
                          "docs": []
                        },
                        {
                          "name": "timestamp",
                          "type": 8,
                          "typeName": "Moment",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["The future yield for CASH is set."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": ["ecosystem_compound_cash", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FutureYieldSet",
                      "fields": [
                        {
                          "name": "yield_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 6,
                          "typeName": "CashYieldIndex",
                          "docs": []
                        },
                        {
                          "name": "timestamp",
                          "type": 8,
                          "typeName": "Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Set the future yield for the Cash asset."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Some XCM was executed ok."]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        },
                        {
                          "name": "error",
                          "type": 141,
                          "typeName": "XcmError",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Some XCM failed."]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Bad XCM version used."]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Bad XCM format used."]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["An upward message was sent to the relay chain."]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 140,
                          "typeName": "Option<T::Hash>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["An HRMP message was sent to a sibling parachain."]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 93,
                          "typeName": "ParaId",
                          "docs": []
                        },
                        {
                          "name": "sent_at",
                          "type": 4,
                          "typeName": "RelayBlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "required",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["An XCM exceeded the individual message weight budget."]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["An XCM from the overweight queue was executed with the given actual weight used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 141,
            "type": {
              "path": ["xcm", "v2", "traits", "Error"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Unimplemented",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "MultiLocationFull",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "InvalidLocation",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AssetNotFound",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "NotWithdrawable",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "LocationCannotHold",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DestinationUnsupported",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Transport",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Unroutable",
                      "fields": [],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "UnknownClaim",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "FailedToDecode",
                      "fields": [],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "fields": [],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "NotHoldingFees",
                      "fields": [],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "TooExpensive",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "fields": [],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Barrier",
                      "fields": [],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "WeightNotComputable",
                      "fields": [],
                      "index": 25,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 142,
            "type": {
              "path": ["pallet_xcm", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": null,
                          "type": 143,
                          "typeName": "xcm::latest::Outcome",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Execution of an XCM message was attempted.", "", "\\[ outcome \\]"]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A XCM message was sent.", "", "\\[ origin, destination, message \\]"]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 154,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 163,
                          "typeName": "Option<MultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": ["Received query response has been read and removed.", "", "\\[ id \\]"]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 164,
                          "typeName": "VersionedMultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": ["Some assets have been placed in an asset trap.", "", "\\[ hash, origin, assets \\]"]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "XcmError",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "name": null,
                          "type": 169,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "QueryId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": ["xcm", "v2", "traits", "Outcome"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "Error",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "Error",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 144,
            "type": {
              "path": ["xcm", "v2", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 145,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 145,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 146
                }
              },
              "docs": []
            }
          },
          {
            "id": 146,
            "type": {
              "path": ["xcm", "v2", "Instruction"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 154,
                          "typeName": "Response",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 158,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 162,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "ClearError",
                      "fields": [],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "ticket",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 27,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 147,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAssets"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 148,
                      "typeName": "Vec<MultiAsset>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 148,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 149
                }
              },
              "docs": []
            }
          },
          {
            "id": 149,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAsset"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 150,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 151,
                      "typeName": "Fungibility",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 150,
            "type": {
              "path": ["xcm", "v1", "multiasset", "AssetId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 151,
            "type": {
              "path": ["xcm", "v1", "multiasset", "Fungibility"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "name": null,
                          "type": 152,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 152,
            "type": {
              "path": ["xcm", "v1", "multiasset", "AssetInstance"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "[u8; 4]",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "name": null,
                          "type": 153,
                          "typeName": "[u8; 16]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 153,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 154,
            "type": {
              "path": ["xcm", "v2", "Response"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "name": null,
                          "type": 155,
                          "typeName": "Option<(u32, Error)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 155,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 156
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 156,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 156,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 141]
              },
              "docs": []
            }
          },
          {
            "id": 157,
            "type": {
              "path": ["xcm", "v0", "OriginKind"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SovereignAccount",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Superuser",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Xcm",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 158,
            "type": {
              "path": ["xcm", "double_encoded", "DoubleEncoded"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 159,
            "type": {
              "path": ["xcm", "v1", "multiasset", "MultiAssetFilter"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "name": null,
                          "type": 160,
                          "typeName": "WildMultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 160,
            "type": {
              "path": ["xcm", "v1", "multiasset", "WildMultiAsset"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 150,
                          "typeName": "AssetId",
                          "docs": []
                        },
                        {
                          "name": "fun",
                          "type": 161,
                          "typeName": "WildFungibility",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 161,
            "type": {
              "path": ["xcm", "v1", "multiasset", "WildFungibility"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NonFungible",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 162,
            "type": {
              "path": ["xcm", "v2", "WeightLimit"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 163,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 83
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 164,
            "type": {
              "path": ["xcm", "VersionedMultiAssets"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "Vec<v0::MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "v1::MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 165,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 166
                }
              },
              "docs": []
            }
          },
          {
            "id": 166,
            "type": {
              "path": ["xcm", "v0", "multi_asset", "MultiAsset"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AllFungible",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AllNonFungible",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "instance",
                          "type": 152,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "instance",
                          "type": 152,
                          "typeName": "AssetInstance",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 167,
            "type": {
              "path": ["xcm", "v0", "multi_location", "MultiLocation"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 168,
                          "typeName": "Junction",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 168,
            "type": {
              "path": ["xcm", "v0", "junction", "Junction"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 87,
                          "typeName": "NetworkId",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 35,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "name": null,
                          "type": 48,
                          "typeName": "u128",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "OnlyChild",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 90,
                          "typeName": "BodyId",
                          "docs": []
                        },
                        {
                          "name": "part",
                          "type": 91,
                          "typeName": "BodyPart",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 169,
            "type": {
              "path": ["xcm", "VersionedMultiLocation"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 167,
                          "typeName": "v0::MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "v1::MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 170,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Downward message is invalid XCM.", "\\[ id \\]"]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "[u8; 8]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Downward message is unsupported version of XCM.", "\\[ id \\]"]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "[u8; 8]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 143,
                          "typeName": "Outcome",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Downward message executed with the given outcome.", "\\[ id, outcome \\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Downward message is invalid XCM."]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Downward message is unsupported version of XCM."]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": "outcome",
                          "type": 143,
                          "typeName": "Outcome",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Downward message executed with the given outcome."]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": "remaining_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["The weight limit for handling downward messages was reached."]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId",
                          "docs": []
                        },
                        {
                          "name": "overweight_index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Downward message is overweight and was placed in the overweight queue."]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "overweight_index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Downward message from the overweight queue was executed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": ["orml_xtokens", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Transferred `MultiAsset` with fee."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": ["orml_unknown_tokens", "module", "Event"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Deposit success."]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Withdraw success."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": ["orml_xcm", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": "to",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["XCM message sent. \\[to, message\\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 175,
            "type": {
              "path": ["module_evm", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "logs",
                          "type": 176,
                          "typeName": "Vec<Log>",
                          "docs": []
                        },
                        {
                          "name": "used_gas",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "used_storage",
                          "type": 179,
                          "typeName": "i32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A contract has been created at given"]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "exit_reason",
                          "type": 180,
                          "typeName": "ExitReason",
                          "docs": []
                        },
                        {
                          "name": "logs",
                          "type": 176,
                          "typeName": "Vec<Log>",
                          "docs": []
                        },
                        {
                          "name": "used_gas",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "used_storage",
                          "type": 179,
                          "typeName": "i32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["A contract was attempted to be created, but the execution failed."]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "logs",
                          "type": 176,
                          "typeName": "Vec<Log>",
                          "docs": []
                        },
                        {
                          "name": "used_gas",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "used_storage",
                          "type": 179,
                          "typeName": "i32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A contract has been executed successfully with states applied."]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "exit_reason",
                          "type": 180,
                          "typeName": "ExitReason",
                          "docs": []
                        },
                        {
                          "name": "output",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "logs",
                          "type": 176,
                          "typeName": "Vec<Log>",
                          "docs": []
                        },
                        {
                          "name": "used_gas",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "used_storage",
                          "type": 179,
                          "typeName": "i32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with",
                        "only gas fees applied."
                      ]
                    },
                    {
                      "name": "TransferredMaintainer",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "new_maintainer",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Transferred maintainer."]
                    },
                    {
                      "name": "ContractDevelopmentEnabled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Enabled contract development."]
                    },
                    {
                      "name": "ContractDevelopmentDisabled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["Disabled contract development."]
                    },
                    {
                      "name": "ContractPublished",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["Published contract."]
                    },
                    {
                      "name": "ContractSetCode",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["Set contract code."]
                    },
                    {
                      "name": "ContractSelfdestructed",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": ["Selfdestructed contract code."]
                    }
                  ]
                }
              },
              "docs": ["EVM events"]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 177
                }
              },
              "docs": []
            }
          },
          {
            "id": 177,
            "type": {
              "path": ["ethereum", "log", "Log"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 34,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 178,
                      "typeName": "Vec<H256>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 178,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": []
            }
          },
          {
            "id": 179,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "I32"
              },
              "docs": []
            }
          },
          {
            "id": 180,
            "type": {
              "path": ["evm_core", "error", "ExitReason"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 181,
                          "typeName": "ExitSucceed",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 182,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 185,
                          "typeName": "ExitRevert",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 186,
                          "typeName": "ExitFatal",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 181,
            "type": {
              "path": ["evm_core", "error", "ExitSucceed"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Returned",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Suicided",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 182,
            "type": {
              "path": ["evm_core", "error", "ExitError"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 183,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 183,
            "type": {
              "path": ["Cow"],
              "params": [
                {
                  "name": "T",
                  "type": 184
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 184,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 184,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": 185,
            "type": {
              "path": ["evm_core", "error", "ExitRevert"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 186,
            "type": {
              "path": ["evm_core", "error", "ExitFatal"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 182,
                          "typeName": "ExitError",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 183,
                          "typeName": "Cow<'static, str>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 187,
            "type": {
              "path": ["module_evm_accounts", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ClaimAccount",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "evm_address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Mapping between Substrate accounts and EVM accounts", "claim account."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": ["module_collator_selection", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewInvulnerables",
                      "fields": [
                        {
                          "name": "new_invulnerables",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Invulnurable was updated."]
                    },
                    {
                      "name": "NewDesiredCandidates",
                      "fields": [
                        {
                          "name": "new_desired_candidates",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Desired candidates was updated."]
                    },
                    {
                      "name": "NewCandidacyBond",
                      "fields": [
                        {
                          "name": "new_candidacy_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Candidacy bond was updated."]
                    },
                    {
                      "name": "CandidateAdded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A candidate was added."]
                    },
                    {
                      "name": "CandidateRemoved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["A candidate was removed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 189,
            "type": {
              "path": ["pallet_session", "pallet", "Event"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 190,
            "type": {
              "path": ["module_session_manager", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ScheduledSessionDuration",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": []
                        },
                        {
                          "name": "session_duration",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Scheduled session duration."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": ["nutsfinance_stable_asset", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CreatePool",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "swap_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pallet_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "minter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "input_amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "min_output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "TokenSwapped",
                      "fields": [
                        {
                          "name": "swapper",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "input_asset",
                          "type": 40,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "output_asset",
                          "type": 40,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "input_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "min_output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "RedeemedProportion",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "input_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "min_output_amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "output_amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "RedeemedSingle",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "input_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "output_asset",
                          "type": 40,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "min_output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "output_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "RedeemedMulti",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "output_amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "max_input_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "input_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "BalanceUpdated",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "old_balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "new_balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "YieldCollected",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "old_total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "FeeCollected",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "old_balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "new_balances",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "old_total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "AModified",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "time",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "FeeModified",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "mint_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "swap_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "redeem_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "RecipientModified",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "fee_recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "yield_recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": ["orml_payments", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PaymentCreated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset",
                          "type": 40,
                          "typeName": "AssetIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "remark",
                          "type": 193,
                          "typeName": "Option<BoundedDataOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A new payment has been created"]
                    },
                    {
                      "name": "PaymentReleased",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Payment amount released to the recipient"]
                    },
                    {
                      "name": "PaymentCancelled",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Payment has been cancelled by the creator"]
                    },
                    {
                      "name": "PaymentResolved",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "recipient_share",
                          "type": 195,
                          "typeName": "Percent",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["A payment that NeedsReview has been resolved by Judge"]
                    },
                    {
                      "name": "PaymentCreatorRequestedRefund",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "expiry",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["the payment creator has created a refund request"]
                    },
                    {
                      "name": "PaymentRefundDisputed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["the refund request from creator was disputed by recipient"]
                    },
                    {
                      "name": "PaymentRequestCreated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["Payment request was created by recipient"]
                    },
                    {
                      "name": "PaymentRequestCompleted",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": ["Payment request was completed by sender"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 194
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 194,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 194,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 195,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Percent"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 196,
            "type": {
              "path": ["module_earning", "module", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Unbonded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "InstantUnbonded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Rebonded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "fields": [],
                      "index": 0,
                      "docs": ["The validation function has been scheduled to apply."]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The validation function was applied as of the contained relay chain block number."]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "fields": [],
                      "index": 2,
                      "docs": ["The relay-chain aborted the upgrade process."]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["An upgrade has been authorized."]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Some downward messages have been received and will be processed."]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "dmq_head",
                          "type": 9,
                          "typeName": "relay_chain::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Downward messages were processed using the given weight."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": ["pallet_sudo", "pallet", "Event"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A sudo just took place. \\[result\\]"]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 30,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["A sudo just took place. \\[result\\]"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": ["frame_system", "Phase"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 200,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 28
                }
              },
              "docs": []
            }
          },
          {
            "id": 201,
            "type": {
              "path": ["frame_system", "LastRuntimeUpgradeInfo"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 86,
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": 184,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 202,
            "type": {
              "path": ["frame_system", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 203,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["A dispatch that will fill the block weight up to the given ratio."]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Make some on-chain remark.", "", "# <weight>", "- `O(1)`", "# </weight>"]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Set the number of pages in the WebAssembly environment's heap."]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 204,
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Set some items of storage."]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 206,
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["Kill some items from storage."]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["Make some on-chain remark and emit event."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 203,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Perbill"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 204,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 205
                }
              },
              "docs": []
            }
          },
          {
            "id": 205,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [10, 10]
              },
              "docs": []
            }
          },
          {
            "id": 206,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": []
            }
          },
          {
            "id": 207,
            "type": {
              "path": ["frame_system", "limits", "BlockWeights"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": 208,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 208,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 209
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 209,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 209,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 209,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 209,
            "type": {
              "path": ["frame_system", "limits", "WeightsPerClass"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 210,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": 210,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 210,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 210,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 211,
            "type": {
              "path": ["frame_system", "limits", "BlockLength"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 212,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 212,
            "type": {
              "path": ["frame_support", "weights", "PerDispatchClass"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 213,
            "type": {
              "path": ["frame_support", "weights", "RuntimeDbWeight"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 214,
            "type": {
              "path": ["sp_version", "RuntimeVersion"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 184,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": 184,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": 215,
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 215,
            "type": {
              "path": ["Cow"],
              "params": [
                {
                  "name": "T",
                  "type": 216
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 216,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 216,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 217
                }
              },
              "docs": []
            }
          },
          {
            "id": 217,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [44, 4]
              },
              "docs": []
            }
          },
          {
            "id": 218,
            "type": {
              "path": ["frame_system", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": 3,
                      "docs": ["Suicide called when the account has non-default composite data."]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": ["There is a non-zero reference count preventing the account from being purged."]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": 5,
                      "docs": ["The origin filter prevent the call to be dispatched."]
                    }
                  ]
                }
              },
              "docs": ["Error for the System pallet"]
            }
          },
          {
            "id": 219,
            "type": {
              "path": ["pallet_timestamp", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 89,
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 221
                }
              },
              "docs": []
            }
          },
          {
            "id": 221,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 222
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 222,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 222,
            "type": {
              "path": ["pallet_scheduler", "ScheduledV3"],
              "params": [
                {
                  "name": "Call",
                  "type": 223
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 75
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 29,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 223,
                      "typeName": "Call",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 226,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 75,
                      "typeName": "PalletsOrigin",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 223,
            "type": {
              "path": ["frame_support", "traits", "schedule", "MaybeHashed"],
              "params": [
                {
                  "name": "T",
                  "type": 224
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "name": null,
                          "type": 224,
                          "typeName": "T",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 224,
            "type": {
              "path": ["mandala_runtime", "Call"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 202,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 219,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 225,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "TransactionPause",
                      "fields": [
                        {
                          "name": null,
                          "type": 227,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPause, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "name": null,
                          "type": 228,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 229,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "name": null,
                          "type": 231,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 232,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": 234,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionPayment, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 244,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 245,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 246,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 247,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 249,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 252,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "IdleScheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 255,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<IdleScheduler, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 256,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "GeneralCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 257,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GeneralCouncil, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "GeneralCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 258,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GeneralCouncilMembership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "FinancialCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 259,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FinancialCouncil, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "FinancialCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 260,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FinancialCouncilMembership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "HomaCouncil",
                      "fields": [
                        {
                          "name": null,
                          "type": 261,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<HomaCouncil, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "HomaCouncilMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 262,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<HomaCouncilMembership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 263,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "TechnicalCommitteeMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 264,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommitteeMembership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Authority",
                      "fields": [
                        {
                          "name": null,
                          "type": 265,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authority, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 268,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "AcalaOracle",
                      "fields": [
                        {
                          "name": null,
                          "type": 273,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AcalaOracle, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "OperatorMembershipAcala",
                      "fields": [
                        {
                          "name": null,
                          "type": 274,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OperatorMembershipAcala, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Auction",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auction, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Rewards",
                      "fields": [
                        {
                          "name": null,
                          "type": 276,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Rewards, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Prices",
                      "fields": [
                        {
                          "name": null,
                          "type": 277,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Prices, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": 278,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dex, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "DexOracle",
                      "fields": [
                        {
                          "name": null,
                          "type": 279,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DexOracle, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "AggregatedDex",
                      "fields": [
                        {
                          "name": null,
                          "type": 280,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AggregatedDex, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "AuctionManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 285,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuctionManager, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Loans",
                      "fields": [
                        {
                          "name": null,
                          "type": 286,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Loans, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Honzon",
                      "fields": [
                        {
                          "name": null,
                          "type": 287,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Honzon, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "CdpTreasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 288,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CdpTreasury, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "CdpEngine",
                      "fields": [
                        {
                          "name": null,
                          "type": 290,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CdpEngine, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "EmergencyShutdown",
                      "fields": [
                        {
                          "name": null,
                          "type": 293,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EmergencyShutdown, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "NomineesElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 294,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NomineesElection, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Homa",
                      "fields": [
                        {
                          "name": null,
                          "type": 295,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Homa, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "XcmInterface",
                      "fields": [
                        {
                          "name": null,
                          "type": 300,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmInterface, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Incentives",
                      "fields": [
                        {
                          "name": null,
                          "type": 303,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Incentives, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "NFT",
                      "fields": [
                        {
                          "name": null,
                          "type": 308,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NFT, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "name": null,
                          "type": 313,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "RenVmBridge",
                      "fields": [
                        {
                          "name": null,
                          "type": 314,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RenVmBridge, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Starport",
                      "fields": [
                        {
                          "name": null,
                          "type": 315,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Starport, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 318,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 319,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "name": null,
                          "type": 344,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "name": null,
                          "type": 345,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 348,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "EvmAccounts",
                      "fields": [
                        {
                          "name": null,
                          "type": 352,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EvmAccounts, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "name": null,
                          "type": 353,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "name": null,
                          "type": 357,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 358,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "SessionManager",
                      "fields": [
                        {
                          "name": null,
                          "type": 362,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SessionManager, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "StableAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 363,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StableAsset, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Payments",
                      "fields": [
                        {
                          "name": null,
                          "type": 364,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Payments, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Earning",
                      "fields": [
                        {
                          "name": null,
                          "type": 365,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Earning, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "name": null,
                          "type": 366,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 379,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 225,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 226,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 223,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Anonymously schedule a task."]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Cancel an anonymously scheduled task."]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 226,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 223,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Schedule a named task."]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Cancel a named scheduled task."]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 226,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 223,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 226,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 223,
                          "typeName": "Box<CallOrHashOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 226,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 28
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 227,
            "type": {
              "path": ["module_transaction_pause", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "pause_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "unpause_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "pause_evm_precompile",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "unpause_evm_precompile",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 228,
            "type": {
              "path": ["pallet_preimage", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Clear an unrequested preimage from the runtime storage."]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 229,
            "type": {
              "path": ["pallet_balances", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_reserved",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Unreserve some balance from a user by force.", "", "Can only be called by ROOT."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 230,
            "type": {
              "path": ["sp_runtime", "multiaddress", "MultiAddress"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 231,
            "type": {
              "path": ["module_currencies", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 116,
                          "typeName": "AmountOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    },
                    {
                      "name": "sweep_dust",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "accounts",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "force_set_lock",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "lock_id",
                          "type": 44,
                          "typeName": "LockIdentifier",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Set lock by lock_id", "", "The dispatch origin of this call must be _Root_."]
                    },
                    {
                      "name": "force_remove_lock",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "lock_id",
                          "type": 44,
                          "typeName": "LockIdentifier",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Remove lock by lock_id", "", "The dispatch origin of this call must be _Root_."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 232,
            "type": {
              "path": ["orml_vesting", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "schedule",
                          "type": 47,
                          "typeName": "VestingScheduleOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "update_vesting_schedules",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "vesting_schedules",
                          "type": 233,
                          "typeName": "Vec<VestingScheduleOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "claim_for",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 47
                }
              },
              "docs": []
            }
          },
          {
            "id": 234,
            "type": {
              "path": ["module_transaction_payment", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_alternative_fee_swap_path",
                      "fields": [
                        {
                          "name": "fee_swap_path",
                          "type": 235,
                          "typeName": "Option<Vec<CurrencyId>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Set fee swap path"]
                    },
                    {
                      "name": "enable_charge_fee_pool",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "pool_size",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "swap_threshold",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Enable and initialize charge fee pool."]
                    },
                    {
                      "name": "disable_charge_fee_pool",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Disable charge fee pool."]
                    },
                    {
                      "name": "with_fee_path",
                      "fields": [
                        {
                          "name": "fee_swap_path",
                          "type": 111,
                          "typeName": "Vec<CurrencyId>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dapp wrap call, and user pay tx fee as provided dex swap path. this dispatch call should",
                        "make sure the trading path is valid."
                      ]
                    },
                    {
                      "name": "with_fee_currency",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Dapp wrap call, and user pay tx fee as provided currency, this dispatch call should make",
                        "sure the currency is exist in tx fee pool."
                      ]
                    },
                    {
                      "name": "with_fee_paid_by",
                      "fields": [
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        },
                        {
                          "name": "payer_addr",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "payer_sig",
                          "type": 236,
                          "typeName": "MultiSignature",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": ["Wrap call with fee paid by other account"]
                    },
                    {
                      "name": "with_fee_aggregated_path",
                      "fields": [
                        {
                          "name": "fee_aggregated_path",
                          "type": 242,
                          "typeName": "Vec<AggregatedSwapPath<CurrencyId>>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Dapp wrap call, and user pay tx fee as provided aggregated swap path. this dispatch call",
                        "should make sure the trading path is valid."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 235,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 111
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 111,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 236,
            "type": {
              "path": ["sp_runtime", "MultiSignature"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 237,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 239,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 240,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 237,
            "type": {
              "path": ["sp_core", "ed25519", "Signature"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 238,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 238,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 239,
            "type": {
              "path": ["sp_core", "sr25519", "Signature"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 238,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 240,
            "type": {
              "path": ["sp_core", "ecdsa", "Signature"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 241,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 241,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 242,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 243
                }
              },
              "docs": []
            }
          },
          {
            "id": 243,
            "type": {
              "path": ["module_support", "dex", "AggregatedSwapPath"],
              "params": [
                {
                  "name": "CurrencyId",
                  "type": 40
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Dex",
                      "fields": [
                        {
                          "name": null,
                          "type": 111,
                          "typeName": "Vec<CurrencyId>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Taiga",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "PoolTokenIndex",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "PoolTokenIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 244,
            "type": {
              "path": ["pallet_treasury", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "# <weight>",
                        "- Complexity: O(A) where `A` is the number of approvals",
                        "- Db reads and writes: `Approvals`",
                        "# </weight>",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 245,
            "type": {
              "path": ["pallet_bounties", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_bounty",
                      "fields": [
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a new bounty.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                        "or slashed when rejected.",
                        "",
                        "- `curator`: The curator account whom will manage this bounty.",
                        "- `fee`: The curator fee.",
                        "- `value`: The total payment amount of this bounty, curator fee included.",
                        "- `description`: The description of this bounty."
                      ]
                    },
                    {
                      "name": "approve_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "curator",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Assign a curator to a funded bounty.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unassign_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unassign curator from a bounty.",
                        "",
                        "This function can only be called by the `RejectOrigin` a signed origin.",
                        "",
                        "If this function is called by the `RejectOrigin`, we assume that the curator is",
                        "malicious or inactive. As a result, we will slash the curator when possible.",
                        "",
                        "If the origin is the curator, we take this as a sign they are unable to do their job and",
                        "they willingly give up. We could slash them, but for now we allow them to recover their",
                        "deposit and exit without issue. (We may want to change this if it is abused.)",
                        "",
                        "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                        "anyone in the community to call out that a curator is not doing their due diligence, and",
                        "we should pick a new curator. In this case the curator should also be slashed.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "accept_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept the curator role for a bounty.",
                        "A deposit will be reserved from curator and refund upon successful payout.",
                        "",
                        "May only be called from the curator.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "award_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                        "after a delay.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to award.",
                        "- `beneficiary`: The beneficiary account whom will receive the payout.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim the payout from an awarded bounty after payout delay.",
                        "",
                        "The dispatch origin for this call must be the beneficiary of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to claim.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                        "the curator deposit will be unreserved if possible.",
                        "",
                        "Only `T::RejectOrigin` is able to cancel a bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to cancel.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "extend_bounty_expiry",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 86,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Extend the expiry time of an active bounty.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to extend.",
                        "- `remark`: additional information.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 246,
            "type": {
              "path": ["pallet_tips", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "tip_value",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "tip_value",
                          "type": 48,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 247,
            "type": {
              "path": ["pallet_utility", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 248,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 248,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 75,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 248,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 224
                }
              },
              "docs": []
            }
          },
          {
            "id": 249,
            "type": {
              "path": ["pallet_multisig", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "# <weight>",
                        "O(Z + C) where Z is the length of the call and C its execution weight.",
                        "-------------------------------",
                        "- DB Weight: None",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 250,
                          "typeName": "Option<Timepoint<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 251,
                          "typeName": "OpaqueCall<T>",
                          "docs": []
                        },
                        {
                          "name": "store_call",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "# <weight>",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "-------------------------------",
                        "- DB Weight:",
                        "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 250,
                          "typeName": "Option<Timepoint<T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account]",
                        "    - Write: Multisig Storage, [Caller Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "other_signatories",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "timepoint",
                          "type": 56,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 250,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 56
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 56,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 251,
            "type": {
              "path": ["frame_support", "traits", "misc", "WrapperKeepOpaque"],
              "params": [
                {
                  "name": "T",
                  "type": 224
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 86,
                      "typeName": null,
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 224,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 252,
            "type": {
              "path": ["pallet_recovery", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account."
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set an a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account."
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "delay_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered."
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration)."
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process."
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you."
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account."
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration)."
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 253,
            "type": {
              "path": ["pallet_proxy", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 254,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proxy_type",
                          "type": 59,
                          "typeName": "T::ProxyType",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 43,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "height",
                          "type": 86,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "ext_index",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 254,
                          "typeName": "Option<T::ProxyType>",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 254,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 59
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 59,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 255,
            "type": {
              "path": ["module_idle_scheduler", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule_task",
                      "fields": [
                        {
                          "name": "task",
                          "type": 61,
                          "typeName": "T::Task",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 256,
            "type": {
              "path": ["pallet_indices", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "freeze",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 257,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 86,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 89,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 258,
            "type": {
              "path": ["pallet_membership", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 259,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 86,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 89,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 260,
            "type": {
              "path": ["pallet_membership", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 261,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 86,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 89,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 262,
            "type": {
              "path": ["pallet_membership", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 263,
            "type": {
              "path": ["pallet_collective", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 86,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 224,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 86,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 89,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 264,
            "type": {
              "path": ["pallet_membership", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 265,
            "type": {
              "path": ["orml_authority", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 266,
                          "typeName": "T::AsOriginId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Dispatch a dispatchable on behalf of other origin"]
                    },
                    {
                      "name": "schedule_dispatch",
                      "fields": [
                        {
                          "name": "when",
                          "type": 267,
                          "typeName": "DispatchTime<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "Priority",
                          "docs": []
                        },
                        {
                          "name": "with_delayed_origin",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Schedule a dispatchable to be dispatched at later block.",
                        "This is the only way to dispatch a call with `DelayedOrigin`."
                      ]
                    },
                    {
                      "name": "fast_track_scheduled_dispatch",
                      "fields": [
                        {
                          "name": "initial_origin",
                          "type": 75,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "task_id",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        },
                        {
                          "name": "when",
                          "type": 267,
                          "typeName": "DispatchTime<T::BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": ["Fast track a scheduled dispatchable."]
                    },
                    {
                      "name": "delay_scheduled_dispatch",
                      "fields": [
                        {
                          "name": "initial_origin",
                          "type": 75,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "task_id",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        },
                        {
                          "name": "additional_delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Delay a scheduled dispatchable."]
                    },
                    {
                      "name": "cancel_scheduled_dispatch",
                      "fields": [
                        {
                          "name": "initial_origin",
                          "type": 75,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": []
                        },
                        {
                          "name": "task_id",
                          "type": 4,
                          "typeName": "ScheduleTaskIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Cancel a scheduled dispatchable."]
                    },
                    {
                      "name": "authorize_call",
                      "fields": [
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<CallOf<T>>",
                          "docs": []
                        },
                        {
                          "name": "caller",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "remove_authorized_call",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "trigger_call",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "call_weight_bound",
                          "type": 89,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 266,
            "type": {
              "path": ["acala_primitives", "AuthoritysOriginId"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "HonzonTreasury",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "HomaTreasury",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TreasuryReserve",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 267,
            "type": {
              "path": ["frame_support", "traits", "schedule", "DispatchTime"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "At",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "After",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 268,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 269,
                          "typeName": "Renouncing",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "slash_bond",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "rerun_election",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
                        "started, else, nothing happens.",
                        "",
                        "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
                        "it is returned.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 269,
            "type": {
              "path": ["pallet_elections_phragmen", "Renouncing"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RunnerUp",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 270,
            "type": {
              "path": ["pallet_democracy", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 86,
                          "typeName": "PropIndex",
                          "docs": []
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 86,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 102,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal.",
                        "\tMust be always greater than zero.",
                        "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 86,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 271,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": ["Same as `note_preimage` but origin is `OperationalPreimageOrigin`."]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": ["Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": ["Enact a proposal from a referendum. For now we just make the weight be the maximum."]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 272,
                          "typeName": "Option<ReferendumIndex>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 86,
                          "typeName": "PropIndex",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 271,
            "type": {
              "path": ["pallet_democracy", "conviction", "Conviction"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Locked1x",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Locked2x",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Locked3x",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Locked4x",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Locked5x",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Locked6x",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 272,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 273,
            "type": {
              "path": ["orml_oracle", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "feed_values",
                      "fields": [
                        {
                          "name": "values",
                          "type": 105,
                          "typeName": "Vec<(T::OracleKey, T::OracleValue)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Feed the external value.", "", "Require authorized operator."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 274,
            "type": {
              "path": ["pallet_membership", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Add a member `who` to the set.", "", "May only be called from `T::AddOrigin`."]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Remove a member `who` from the set.", "", "May only be called from `T::RemoveOrigin`."]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remove the prime member if it exists.", "", "May only be called from `T::PrimeOrigin`."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 275,
            "type": {
              "path": ["orml_auction", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "T::AuctionId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Bid an auction.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 276,
            "type": {
              "path": ["orml_rewards", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 277,
            "type": {
              "path": ["module_prices", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "lock_price",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Lock the price and feed it to system.",
                        "",
                        "The dispatch origin of this call must be `LockOrigin`.",
                        "",
                        "- `currency_id`: currency type."
                      ]
                    },
                    {
                      "name": "unlock_price",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock the price and get the price from `PriceProvider` again",
                        "",
                        "The dispatch origin of this call must be `LockOrigin`.",
                        "",
                        "- `currency_id`: currency type."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 278,
            "type": {
              "path": ["module_dex", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "swap_with_exact_supply",
                      "fields": [
                        {
                          "name": "path",
                          "type": 111,
                          "typeName": "Vec<CurrencyId>",
                          "docs": []
                        },
                        {
                          "name": "supply_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_target_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Trading with DEX, swap with exact supply amount",
                        "",
                        "- `path`: trading path.",
                        "- `supply_amount`: exact supply amount.",
                        "- `min_target_amount`: acceptable minimum target amount."
                      ]
                    },
                    {
                      "name": "swap_with_exact_target",
                      "fields": [
                        {
                          "name": "path",
                          "type": 111,
                          "typeName": "Vec<CurrencyId>",
                          "docs": []
                        },
                        {
                          "name": "target_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "max_supply_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Trading with DEX, swap with exact target amount",
                        "",
                        "- `path`: trading path.",
                        "- `target_amount`: exact target amount.",
                        "- `max_supply_amount`: acceptable maximum supply amount."
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "max_amount_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "max_amount_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_share_increment",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "stake_increment_share",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add liquidity to Enabled trading pair.",
                        "- Add provision success will record the provision, issue shares to caller in the initial",
                        "  exchange rate when trading pair convert to Enabled.",
                        "",
                        "- `currency_id_a`: currency id A.",
                        "- `currency_id_b`: currency id B.",
                        "- `max_amount_a`: maximum amount of currency_id_a is allowed to inject to liquidity",
                        "  pool.",
                        "- `max_amount_b`: maximum amount of currency_id_b is allowed to inject to liquidity",
                        "  pool.",
                        "- `min_share_increment`: minimum acceptable share amount.",
                        "- `stake_increment_share`: indicates whether to stake increased dex share to earn",
                        "  incentives"
                      ]
                    },
                    {
                      "name": "add_provision",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "amount_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add provision to Provisioning trading pair.",
                        "If succeed, will record the provision, but shares issuing will happen after the",
                        "trading pair convert to Enabled status.",
                        "",
                        "- `currency_id_a`: currency id A.",
                        "- `currency_id_b`: currency id B.",
                        "- `amount_a`: provision amount for currency_id_a.",
                        "- `amount_b`: provision amount for currency_id_b."
                      ]
                    },
                    {
                      "name": "claim_dex_share",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Claim dex share for founders who have participated in trading pair provision.",
                        "",
                        "- `owner`: founder account.",
                        "- `currency_id_a`: currency id A.",
                        "- `currency_id_b`: currency id B."
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "remove_share",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_withdrawn_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_withdrawn_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "by_unstake",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove liquidity from specific liquidity pool in the form of burning",
                        "shares, and withdrawing currencies in trading pairs from liquidity",
                        "pool in proportion, and withdraw liquidity incentive interest.",
                        "",
                        "- `currency_id_a`: currency id A.",
                        "- `currency_id_b`: currency id B.",
                        "- `remove_share`: liquidity amount to remove.",
                        "- `min_withdrawn_a`: minimum acceptable withrawn for currency_id_a.",
                        "- `min_withdrawn_b`: minimum acceptable withrawn for currency_id_b.",
                        "- `by_unstake`: this flag indicates whether to withdraw share which is on incentives."
                      ]
                    },
                    {
                      "name": "list_provisioning",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "min_contribution_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_contribution_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_provision_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_provision_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "not_before",
                          "type": 86,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": ["List a new provisioning trading pair."]
                    },
                    {
                      "name": "update_provisioning_parameters",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "min_contribution_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_contribution_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_provision_a",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target_provision_b",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "not_before",
                          "type": 86,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "List a new trading pair, trading pair will become Enabled status",
                        "after provision process."
                      ]
                    },
                    {
                      "name": "end_provisioning",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": ["Enable a Provisioning trading pair if meet the condition."]
                    },
                    {
                      "name": "enable_trading_pair",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Enable a trading pair",
                        "if the status of trading pair is `Disabled`, or `Provisioning` without any accumulated",
                        "provision, enable it directly."
                      ]
                    },
                    {
                      "name": "disable_trading_pair",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": ["Disable a `Enabled` trading pair."]
                    },
                    {
                      "name": "refund_provision",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Refund provision if the provision has already aborted.",
                        "",
                        "- `owner`: founder account.",
                        "- `currency_id_a`: currency id A.",
                        "- `currency_id_b`: currency id B."
                      ]
                    },
                    {
                      "name": "abort_provisioning",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": ["Abort provision when it's don't meet the target and expired."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 279,
            "type": {
              "path": ["module_dex_oracle", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enable_average_price",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "interval",
                          "type": 8,
                          "typeName": "MomentOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Enabled average price for trading pair.",
                        "",
                        "Requires `UpdateOrigin`",
                        "",
                        "- `currency_id_a`: one currency_id that forms a trading pair",
                        "- `currency_id_b`: another currency_id that forms a trading pair",
                        "- `interval`: the timestamp interval to update average price."
                      ]
                    },
                    {
                      "name": "disable_average_price",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Disable average price for trading pair.",
                        "",
                        "Requires `UpdateOrigin`",
                        "",
                        "- `currency_id_a`: one currency_id that forms a trading pair",
                        "- `currency_id_b`: another currency_id that forms a trading pair"
                      ]
                    },
                    {
                      "name": "update_average_price_interval",
                      "fields": [
                        {
                          "name": "currency_id_a",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "currency_id_b",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "new_interval",
                          "type": 8,
                          "typeName": "MomentOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update the interval of the trading pair that enabled average price.",
                        "",
                        "Requires `UpdateOrigin`",
                        "",
                        "- `currency_id_a`: one currency_id that forms a trading pair",
                        "- `currency_id_b`: another currency_id that forms a trading pair",
                        "- `new_interval`: the new interval."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 280,
            "type": {
              "path": ["module_aggregated_dex", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "swap_with_exact_supply",
                      "fields": [
                        {
                          "name": "paths",
                          "type": 242,
                          "typeName": "Vec<SwapPath>",
                          "docs": []
                        },
                        {
                          "name": "supply_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_target_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Swap with aggregated DEX at exact supply amount.",
                        "",
                        "- `paths`: aggregated swap path.",
                        "- `supply_amount`: exact supply amount.",
                        "- `min_target_amount`: acceptable minimum target amount."
                      ]
                    },
                    {
                      "name": "swap_with_exact_target",
                      "fields": [
                        {
                          "name": "paths",
                          "type": 242,
                          "typeName": "Vec<SwapPath>",
                          "docs": []
                        },
                        {
                          "name": "target_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "max_supply_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "update_aggregated_swap_paths",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 281,
                          "typeName": "Vec<((CurrencyId, CurrencyId), Option<Vec<SwapPath>>)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update the aggregated swap paths for AggregatedSwap to swap TokenA to TokenB.",
                        "",
                        "Requires `GovernanceOrigin`",
                        "",
                        "Parameters:",
                        "- `updates`:  Vec<((TokenA, TokenB), Option<Vec<SwapPath>>)>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 281,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 282
                }
              },
              "docs": []
            }
          },
          {
            "id": 282,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [283, 284]
              },
              "docs": []
            }
          },
          {
            "id": 283,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [40, 40]
              },
              "docs": []
            }
          },
          {
            "id": 284,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 242
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 242,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 285,
            "type": {
              "path": ["module_auction_manager", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "AuctionId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Cancel active auction after system shutdown",
                        "",
                        "The dispatch origin of this call must be _None_."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 286,
            "type": {
              "path": ["module_loans", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 287,
            "type": {
              "path": ["module_honzon", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "adjust_loan",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        },
                        {
                          "name": "debit_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Adjust the loans of `currency_id` by specific",
                        "`collateral_adjustment` and `debit_adjustment`",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `collateral_adjustment`: signed amount, positive means to deposit collateral currency",
                        "  into CDP, negative means withdraw collateral currency from CDP.",
                        "- `debit_adjustment`: signed amount, positive means to issue some amount of stablecoin",
                        "  to caller according to the debit adjustment, negative means caller will payback some",
                        "  amount of stablecoin to CDP according to to the debit adjustment."
                      ]
                    },
                    {
                      "name": "close_loan_has_debit_by_dex",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "max_collateral_amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Close caller's CDP which has debit but still in safe by use collateral to swap",
                        "stable token on DEX for clearing debit.",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `max_collateral_amount`: the max collateral amount which is used to swap enough",
                        "\tstable token to clear debit."
                      ]
                    },
                    {
                      "name": "transfer_loan_from",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer the whole CDP of `from` under `currency_id` to caller's CDP",
                        "under the same `currency_id`, caller must have the authorization of",
                        "`from` for the specific collateral type",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `from`: authorizer account"
                      ]
                    },
                    {
                      "name": "authorize",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authorize `to` to manipulate the loan under `currency_id`",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `to`: authorizee account"
                      ]
                    },
                    {
                      "name": "unauthorize",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel the authorization for `to` under `currency_id`",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `to`: authorizee account"
                      ]
                    },
                    {
                      "name": "unauthorize_all",
                      "fields": [],
                      "index": 5,
                      "docs": ["Cancel all authorization of caller"]
                    },
                    {
                      "name": "expand_position_collateral",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "increase_debit_value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_increase_collateral",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Generate new debit in advance, buy collateral and deposit it into CDP.",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `increase_debit_value`: the specific increased debit value for CDP",
                        "- `min_increase_collateral`: the minimal increased collateral amount for CDP"
                      ]
                    },
                    {
                      "name": "shrink_position_debit",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "decrease_collateral",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "min_decrease_debit_value",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Sell the collateral locked in CDP to get stable coin to repay the debit.",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `decrease_collateral`: the specific decreased collateral amount for CDP",
                        "- `min_decrease_debit_value`: the minimal decreased debit value for CDP"
                      ]
                    },
                    {
                      "name": "adjust_loan_by_debit_value",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "collateral_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        },
                        {
                          "name": "debit_value_adjustment",
                          "type": 116,
                          "typeName": "Amount",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Adjust the loans of `currency_id` by specific",
                        "`collateral_adjustment` and `debit_value_adjustment`",
                        "",
                        "- `currency_id`: collateral currency id.",
                        "- `collateral_adjustment`: signed amount, positive means to deposit collateral currency",
                        "  into CDP, negative means withdraw collateral currency from CDP.",
                        "- `debit_value_adjustment`: signed amount, positive means to issue some amount of",
                        "  stablecoin, negative means caller will payback some amount of stablecoin to CDP."
                      ]
                    },
                    {
                      "name": "transfer_debit",
                      "fields": [
                        {
                          "name": "from_currency",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "to_currency",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "debit_transfer",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Transfers debit between two CDPs",
                        "",
                        "- `from_currency`: Currency id that debit is transfered from",
                        "- `to_currency`: Currency id that debit is transfered to",
                        "- `debit_transfer`: Debit transfered across two CDPs"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 288,
            "type": {
              "path": ["module_cdp_treasury", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "extract_surplus_to_treasury",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "auction_collateral",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "splited",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Auction the collateral not occupied by the auction.",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `currency_id`: collateral type",
                        "- `amount`: collateral amount",
                        "- `target`: target amount",
                        "- `splited`: split collateral to multiple auction according to the config size"
                      ]
                    },
                    {
                      "name": "exchange_collateral_to_stable",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "swap_limit",
                          "type": 289,
                          "typeName": "SwapLimit<Balance>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap the collateral not occupied by the auction to stable.",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `currency_id`: collateral type",
                        "- `swap_limit`: target amount"
                      ]
                    },
                    {
                      "name": "set_expected_collateral_auction_size",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "size",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Update parameters related to collateral auction under specific",
                        "collateral type",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `currency_id`: collateral type",
                        "- `amount`: expected size of per lot collateral auction"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 289,
            "type": {
              "path": ["module_support", "dex", "SwapLimit"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExactSupply",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ExactTarget",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 290,
            "type": {
              "path": ["module_cdp_engine", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "liquidate",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Liquidate unsafe CDP",
                        "",
                        "The dispatch origin of this call must be _None_.",
                        "",
                        "- `currency_id`: CDP's collateral type.",
                        "- `who`: CDP's owner."
                      ]
                    },
                    {
                      "name": "settle",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Settle CDP has debit after system shutdown",
                        "",
                        "The dispatch origin of this call must be _None_.",
                        "",
                        "- `currency_id`: CDP's collateral type.",
                        "- `who`: CDP's owner."
                      ]
                    },
                    {
                      "name": "set_collateral_params",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "interest_rate_per_sec",
                          "type": 291,
                          "typeName": "ChangeOptionRate",
                          "docs": []
                        },
                        {
                          "name": "liquidation_ratio",
                          "type": 291,
                          "typeName": "ChangeOptionRatio",
                          "docs": []
                        },
                        {
                          "name": "liquidation_penalty",
                          "type": 291,
                          "typeName": "ChangeOptionRate",
                          "docs": []
                        },
                        {
                          "name": "required_collateral_ratio",
                          "type": 291,
                          "typeName": "ChangeOptionRatio",
                          "docs": []
                        },
                        {
                          "name": "maximum_total_debit_value",
                          "type": 292,
                          "typeName": "ChangeBalance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update parameters related to risk management of CDP under specific",
                        "collateral type",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `currency_id`: collateral type.",
                        "- `interest_rate_per_sec`: Interest rate per sec, `None` means do not update,",
                        "- `liquidation_ratio`: liquidation ratio, `None` means do not update, `Some(None)` means",
                        "  update it to `None`.",
                        "- `liquidation_penalty`: liquidation penalty, `None` means do not update, `Some(None)`",
                        "  means update it to `None`.",
                        "- `required_collateral_ratio`: required collateral ratio, `None` means do not update,",
                        "  `Some(None)` means update it to `None`.",
                        "- `maximum_total_debit_value`: maximum total debit value."
                      ]
                    },
                    {
                      "name": "register_liquidation_contract",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "deregister_liquidation_contract",
                      "fields": [
                        {
                          "name": "address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 291,
            "type": {
              "path": ["orml_traits", "Change"],
              "params": [
                {
                  "name": "Value",
                  "type": 120
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoChange",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NewValue",
                      "fields": [
                        {
                          "name": null,
                          "type": 120,
                          "typeName": "Value",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 292,
            "type": {
              "path": ["orml_traits", "Change"],
              "params": [
                {
                  "name": "Value",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoChange",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NewValue",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Value",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 293,
            "type": {
              "path": ["module_emergency_shutdown", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "emergency_shutdown",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Start emergency shutdown",
                        "",
                        "The dispatch origin of this call must be `ShutdownOrigin`."
                      ]
                    },
                    {
                      "name": "open_collateral_refund",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Open final redemption if settlement is completed.",
                        "",
                        "The dispatch origin of this call must be `ShutdownOrigin`."
                      ]
                    },
                    {
                      "name": "refund_collaterals",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Refund a basket of remaining collateral assets to caller",
                        "",
                        "- `amount`: stable currency amount used to refund."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 294,
            "type": {
              "path": ["module_nominees_election", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": 100,
                          "typeName": "Vec<T::NomineeId>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "chill",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 295,
            "type": {
              "path": ["module_homa", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Mint liquid currency by put locking up amount of staking currency.",
                        "",
                        "Parameters:",
                        "- `amount`: The amount of staking currency used to mint liquid currency."
                      ]
                    },
                    {
                      "name": "request_redeem",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "allow_fast_match",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Build/Cancel/Overwrite a redeem request, use liquid currency to redeem staking currency.",
                        "The redeem request will be executed in two ways:",
                        "1. Redeem by fast match: Homa use staking currency in ToBondPool to match redeem request",
                        "in the current era, setting a higher fee_rate can increase the possibility of being fast",
                        "matched. 2. Redeem by unbond on relaychain: if redeem request has not been fast matched",
                        "in current era, Homa will unbond staking currency on relaychain when the next era",
                        "bumped. So redeemer at least wait for the unbonding period + extra 1 era to get the",
                        "redemption.",
                        "",
                        "Parameters:",
                        "- `amount`: The amount of liquid currency to be requested  redeemed into Staking",
                        "  currency.",
                        "- `allow_fast_match`: allow the request to be fast matched, fast match will take a fixed",
                        "  rate as fee."
                      ]
                    },
                    {
                      "name": "fast_match_redeems",
                      "fields": [
                        {
                          "name": "redeemer_list",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Execute fast match for specific redeem requests.",
                        "",
                        "Parameters:",
                        "- `redeemer_list`: The list of redeem requests to execute fast redeem."
                      ]
                    },
                    {
                      "name": "claim_redemption",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Withdraw the expired redemption of specific redeemer by unbond.",
                        "",
                        "Parameters:",
                        "- `redeemer`: redeemer."
                      ]
                    },
                    {
                      "name": "update_homa_params",
                      "fields": [
                        {
                          "name": "soft_bonded_cap_per_sub_account",
                          "type": 296,
                          "typeName": "Option<Balance>",
                          "docs": []
                        },
                        {
                          "name": "estimated_reward_rate_per_era",
                          "type": 120,
                          "typeName": "Option<Rate>",
                          "docs": []
                        },
                        {
                          "name": "commission_rate",
                          "type": 120,
                          "typeName": "Option<Rate>",
                          "docs": []
                        },
                        {
                          "name": "fast_match_fee_rate",
                          "type": 120,
                          "typeName": "Option<Rate>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Sets the params of Homa.",
                        "Requires `GovernanceOrigin`",
                        "",
                        "Parameters:",
                        "- `soft_bonded_cap_per_sub_account`:  soft cap of staking amount for a single nominator",
                        "  on relaychain to obtain the best staking rewards.",
                        "- `estimated_reward_rate_per_era`: the estimated staking yield of each era on the",
                        "  current relay chain.",
                        "- `commission_rate`: the rate to draw from estimated staking rewards as commission to",
                        "  HomaTreasury",
                        "- `fast_match_fee_rate`: the fixed fee rate when redeem request is been fast matched."
                      ]
                    },
                    {
                      "name": "update_bump_era_params",
                      "fields": [
                        {
                          "name": "last_era_bumped_block",
                          "type": 272,
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        },
                        {
                          "name": "frequency",
                          "type": 272,
                          "typeName": "Option<T::BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Sets the params that control when to bump local current era.",
                        "Requires `GovernanceOrigin`",
                        "",
                        "Parameters:",
                        "- `fix_last_era_bumped_block`: fix the relaychain block number of last era bumped.",
                        "- `frequency`: the frequency of block number on parachain."
                      ]
                    },
                    {
                      "name": "reset_ledgers",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 297,
                          "typeName": "Vec<(u16, Option<Balance>, Option<Vec<UnlockChunk>>)>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Reset the bonded and unbonding to local subaccounts ledger according to the ledger on",
                        "relaychain. Requires `GovernanceOrigin`",
                        "",
                        "Parameters:",
                        "- `updates`: update list of subaccount."
                      ]
                    },
                    {
                      "name": "reset_current_era",
                      "fields": [
                        {
                          "name": "era_index",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Reset the RelayChainCurrentEra.",
                        "If there is a deviation of more than 1 EraIndex between current era of relaychain and",
                        "current era on local, should reset era to current era of relaychain as soon as possible.",
                        "At the same time, check whether the unlocking of ledgers should be updated.",
                        "Requires `GovernanceOrigin`",
                        "",
                        "Parameters:",
                        "- `era_index`: the latest era index of relaychain."
                      ]
                    },
                    {
                      "name": "force_bump_current_era",
                      "fields": [
                        {
                          "name": "bump_amount",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "fast_match_redeems_completely",
                      "fields": [
                        {
                          "name": "redeemer_list",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Execute fast match for specific redeem requests, require completely matched.",
                        "",
                        "Parameters:",
                        "- `redeemer_list`: The list of redeem requests to execute fast redeem."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 296,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 297,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 298
                }
              },
              "docs": []
            }
          },
          {
            "id": 298,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [43, 296, 299]
              },
              "docs": []
            }
          },
          {
            "id": 299,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 126
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 126,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 300,
            "type": {
              "path": ["module_xcm_interface", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "update_xcm_dest_weight_and_fee",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 301,
                          "typeName": "Vec<(XcmInterfaceOperation, Option<Weight>, Option<Balance>)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the xcm_dest_weight and fee for XCM operation of XcmInterface.",
                        "",
                        "Parameters:",
                        "- `updates`: vec of tuple: (XcmInterfaceOperation, WeightChange, FeeChange)."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 302
                }
              },
              "docs": []
            }
          },
          {
            "id": 302,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [129, 210, 296]
              },
              "docs": []
            }
          },
          {
            "id": 303,
            "type": {
              "path": ["module_incentives", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "deposit_dex_share",
                      "fields": [
                        {
                          "name": "lp_currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Stake LP token to add shares of Pool::Dex",
                        "",
                        "The dispatch origin of this call must be `Signed` by the transactor.",
                        "",
                        "- `lp_currency_id`: LP token type",
                        "- `amount`: amount to stake"
                      ]
                    },
                    {
                      "name": "withdraw_dex_share",
                      "fields": [
                        {
                          "name": "lp_currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unstake LP token to remove shares of Pool::Dex",
                        "",
                        "The dispatch origin of this call must be `Signed` by the transactor.",
                        "",
                        "- `lp_currency_id`: LP token type",
                        "- `amount`: amount to unstake"
                      ]
                    },
                    {
                      "name": "claim_rewards",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 131,
                          "typeName": "PoolId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Claim all avalible multi currencies rewards for specific PoolId.",
                        "",
                        "The dispatch origin of this call must be `Signed` by the transactor.",
                        "",
                        "- `pool_id`: pool type"
                      ]
                    },
                    {
                      "name": "update_incentive_rewards",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 304,
                          "typeName": "Vec<(PoolId, Vec<(CurrencyId, Balance)>)>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Update incentive reward amount for specific PoolId",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `updates`: Vec<(PoolId, Vec<(RewardCurrencyId, FixedAmountPerPeriod)>)>"
                      ]
                    },
                    {
                      "name": "update_claim_reward_deduction_rates",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 306,
                          "typeName": "Vec<(PoolId, Rate)>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update claim rewards deduction rates for all rewards currencies of specific PoolId",
                        "",
                        "The dispatch origin of this call must be `UpdateOrigin`.",
                        "",
                        "- `updates`: Vec<(PoolId, DecutionRate>)>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 305
                }
              },
              "docs": []
            }
          },
          {
            "id": 305,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [131, 122]
              },
              "docs": []
            }
          },
          {
            "id": 306,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 307
                }
              },
              "docs": []
            }
          },
          {
            "id": 307,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [131, 50]
              },
              "docs": []
            }
          },
          {
            "id": 308,
            "type": {
              "path": ["module_nft", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_class",
                      "fields": [
                        {
                          "name": "metadata",
                          "type": 10,
                          "typeName": "CID",
                          "docs": []
                        },
                        {
                          "name": "properties",
                          "type": 309,
                          "typeName": "Properties",
                          "docs": []
                        },
                        {
                          "name": "attributes",
                          "type": 311,
                          "typeName": "Attributes",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create NFT class, tokens belong to the class.",
                        "",
                        "- `metadata`: external metadata",
                        "- `properties`: class property, include `Transferable` `Burnable`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "to",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 10,
                          "typeName": "CID",
                          "docs": []
                        },
                        {
                          "name": "attributes",
                          "type": 311,
                          "typeName": "Attributes",
                          "docs": []
                        },
                        {
                          "name": "quantity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Mint NFT token",
                        "",
                        "- `to`: the token owner's account",
                        "- `class_id`: token belong to the class id",
                        "- `metadata`: external metadata",
                        "- `quantity`: token quantity"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "to",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "token",
                          "type": 312,
                          "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer NFT token to another account",
                        "",
                        "- `to`: the token owner's account",
                        "- `token`: (class_id, token_id)"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "token",
                          "type": 312,
                          "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": ["Burn NFT token", "", "- `token`: (class_id, token_id)"]
                    },
                    {
                      "name": "burn_with_remark",
                      "fields": [
                        {
                          "name": "token",
                          "type": 312,
                          "typeName": "(ClassIdOf<T>, TokenIdOf<T>)",
                          "docs": []
                        },
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": ["Burn NFT token", "", "- `token`: (class_id, token_id)", "- `remark`: Vec<u8>"]
                    },
                    {
                      "name": "destroy_class",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Destroy NFT class, remove dest from proxy, and send all the free",
                        "balance to dest",
                        "",
                        "- `class_id`: The class ID to destroy",
                        "- `dest`: The proxy account that will receive free balance"
                      ]
                    },
                    {
                      "name": "update_class_properties",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "ClassIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "properties",
                          "type": 309,
                          "typeName": "Properties",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Update NFT class properties. The current class properties must contains",
                        "ClassPropertiesMutable.",
                        "",
                        "- `class_id`: The class ID to update",
                        "- `properties`: The new properties"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 309,
            "type": {
              "path": ["acala_primitives", "nft", "BitFlags"],
              "params": [
                {
                  "name": "T",
                  "type": 310
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "ClassProperty",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 310,
            "type": {
              "path": ["acala_primitives", "nft", "ClassProperty"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferable",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Burnable",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mintable",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "ClassPropertiesMutable",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 311,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 10
                },
                {
                  "name": "V",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 204,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 312,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 8]
              },
              "docs": []
            }
          },
          {
            "id": 313,
            "type": {
              "path": ["module_asset_registry", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_foreign_asset",
                      "fields": [
                        {
                          "name": "location",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "update_foreign_asset",
                      "fields": [
                        {
                          "name": "foreign_asset_id",
                          "type": 43,
                          "typeName": "ForeignAssetId",
                          "docs": []
                        },
                        {
                          "name": "location",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "register_stable_asset",
                      "fields": [
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "update_stable_asset",
                      "fields": [
                        {
                          "name": "stable_asset_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "register_erc20_asset",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "minimal_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "update_erc20_asset",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "register_native_asset",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "update_native_asset",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 134,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 314,
            "type": {
              "path": ["ecosystem_renvm_bridge", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "p_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "n_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "sig",
                          "type": 240,
                          "typeName": "EcdsaSignature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Allow a user to mint if they have a valid signature from RenVM.",
                        "",
                        "The dispatch origin of this call must be _None_.",
                        "",
                        "Verify input by `validate_unsigned`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "to",
                          "type": 10,
                          "typeName": "DestAddress",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": ["Allow a user to burn assets."]
                    },
                    {
                      "name": "rotate_key",
                      "fields": [
                        {
                          "name": "new_key",
                          "type": 35,
                          "typeName": "PublicKey",
                          "docs": []
                        },
                        {
                          "name": "sig",
                          "type": 240,
                          "typeName": "EcdsaSignature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Allow RenVm rotate the public key.",
                        "",
                        "The dispatch origin of this call must be _None_.",
                        "",
                        "Verify input by `validate_unsigned`"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 315,
            "type": {
              "path": ["ecosystem_starport", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "lock",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "locked_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Lock some asset from a user's account on Acala.",
                        "Request the same asset be transferred to the Compound chain via its Gateway.",
                        "These assets are generally used as collaterals on the Compound Finance network.",
                        "This is also known as \"Uploading assets\"",
                        "",
                        "Parameters:",
                        "- `currency_id`: collateral currency id.",
                        "- `locked_amount`: The amount of user asset to be \"uploaded\" onto the Compound chain."
                      ]
                    },
                    {
                      "name": "lock_to",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "locked_amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Lock some asset from a user's account on Acala to another account (on another network).",
                        "Request the same asset be transferred to the Compound chain via its Gateway.",
                        "These assets are generally used as collaterals on the Compound Finance network.",
                        "This is also known as \"Uploading assets\"",
                        "",
                        "Parameters:",
                        "- `to`: The account ID the asset is uploaded to on the Compound chain.",
                        "- `currency_id`: collateral currency id.",
                        "- `locked_amount`: The amount of user asset to be \"uploaded\" onto the Compound chain."
                      ]
                    },
                    {
                      "name": "invoke",
                      "fields": [
                        {
                          "name": "notice",
                          "type": 316,
                          "typeName": "GatewayNotice<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "signatures",
                          "type": 100,
                          "typeName": "Vec<CompoundAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Invoke a Notice issued from Compound chain via its Gateways.",
                        "",
                        "Parameters:",
                        "- `notice`: The Notice issued by Compound Gateway. Contains data to be invoked.",
                        "- `signatures`: Represents approvals by given authorities. Used to verify the",
                        "authenticity of the notice."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 316,
            "type": {
              "path": ["ecosystem_starport", "module", "GatewayNotice"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "payload",
                      "type": 317,
                      "typeName": "GatewayNoticePayload<AccountId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 317,
            "type": {
              "path": ["ecosystem_starport", "module", "GatewayNoticePayload"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SetSupplyCap",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ChangeAuthorities",
                      "fields": [
                        {
                          "name": null,
                          "type": 100,
                          "typeName": "Vec<CompoundAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Unlock",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "SetFutureYield",
                      "fields": [
                        {
                          "name": "next_cash_yield",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "next_cash_yield_index",
                          "type": 6,
                          "typeName": "CashYieldIndex",
                          "docs": []
                        },
                        {
                          "name": "next_cash_yield_start",
                          "type": 8,
                          "typeName": "Moment",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 318,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Services a single overweight XCM.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight XCM to service",
                        "- `weight_limit`: The amount of weight that XCM execution may take.",
                        "",
                        "Errors:",
                        "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                        "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                        "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    },
                    {
                      "name": "suspend_xcm_execution",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                        "suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                        "messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                        "message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    },
                    {
                      "name": "update_threshold_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Overwrites the amount of remaining weight under which we stop processing messages.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.threshold_weight`"
                      ]
                    },
                    {
                      "name": "update_weight_restrict_decay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Overwrites the speed to which the available weight approaches the maximum weight.",
                        "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
                      ]
                    },
                    {
                      "name": "update_xcmp_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Overwrite the maximum amount of weight any individual message may consume.",
                        "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 319,
            "type": {
              "path": ["pallet_xcm", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 320,
                          "typeName": "Box<VersionedXcm<()>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 164,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 164,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 331,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 83,
                          "typeName": "Box<MultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 272,
                          "typeName": "Option<XcmVersion>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 164,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 162,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 164,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 162,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 320,
            "type": {
              "path": ["xcm", "VersionedXcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 321,
                          "typeName": "v0::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 326,
                          "typeName": "v1::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "v2::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 321,
            "type": {
              "path": ["xcm", "v0", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 325,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 158,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 321,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 322,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 323
                }
              },
              "docs": []
            }
          },
          {
            "id": 323,
            "type": {
              "path": ["xcm", "v0", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 166,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 324,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 324,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 321
                }
              },
              "docs": []
            }
          },
          {
            "id": 325,
            "type": {
              "path": ["xcm", "v0", "Response"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 326,
            "type": {
              "path": ["xcm", "v1", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 330,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 158,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 84,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 326,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 327,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 328
                }
              },
              "docs": []
            }
          },
          {
            "id": 328,
            "type": {
              "path": ["xcm", "v1", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "instructions",
                          "type": 329,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 329,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 326
                }
              },
              "docs": []
            }
          },
          {
            "id": 330,
            "type": {
              "path": ["xcm", "v1", "Response"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "super::Version",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 331,
            "type": {
              "path": ["xcm", "VersionedXcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 332,
                          "typeName": "v0::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 337,
                          "typeName": "v1::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "v2::Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 332,
            "type": {
              "path": ["xcm", "v0", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 333,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 325,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 332,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 333,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 334
                }
              },
              "docs": []
            }
          },
          {
            "id": 334,
            "type": {
              "path": ["xcm", "v0", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 322,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 167,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 165,
                          "typeName": "Vec<MultiAsset>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 166,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 335,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 335,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 332
                }
              },
              "docs": []
            }
          },
          {
            "id": 336,
            "type": {
              "path": ["xcm", "double_encoded", "DoubleEncoded"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 337,
            "type": {
              "path": ["xcm", "v1", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 338,
                          "typeName": "Vec<Order<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 330,
                          "typeName": "Response",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 84,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 337,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 338,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 339
                }
              },
              "docs": []
            }
          },
          {
            "id": 339,
            "type": {
              "path": ["xcm", "v1", "order", "Order"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "effects",
                          "type": 327,
                          "typeName": "Vec<Order<()>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "halt_on_error",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "instructions",
                          "type": 340,
                          "typeName": "Vec<Xcm<Call>>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 340,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 337
                }
              },
              "docs": []
            }
          },
          {
            "id": 341,
            "type": {
              "path": ["xcm", "v2", "Xcm"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 342,
                      "typeName": "Vec<Instruction<Call>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 342,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 343
                }
              },
              "docs": []
            }
          },
          {
            "id": 343,
            "type": {
              "path": ["xcm", "v2", "Instruction"],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "response",
                          "type": 154,
                          "typeName": "Response",
                          "docs": []
                        },
                        {
                          "name": "max_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 157,
                          "typeName": "OriginKind",
                          "docs": []
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "DoubleEncoded<Call>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_message_size",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "max_capacity",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ClearOrigin",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "InteriorMultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_assets",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "receive",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "reserve",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "xcm",
                          "type": 144,
                          "typeName": "Xcm<()>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 159,
                          "typeName": "MultiAssetFilter",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 149,
                          "typeName": "MultiAsset",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 162,
                          "typeName": "WeightLimit",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "RefundSurplus",
                      "fields": [],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "name": null,
                          "type": 341,
                          "typeName": "Xcm<Call>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "ClearError",
                      "fields": [],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 147,
                          "typeName": "MultiAssets",
                          "docs": []
                        },
                        {
                          "name": "ticket",
                          "type": 83,
                          "typeName": "MultiLocation",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 89,
                          "typeName": "QueryId",
                          "docs": []
                        },
                        {
                          "name": "max_response_weight",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "fields": [],
                      "index": 27,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 344,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex",
                          "docs": []
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `Unknown`: Message of `index` is unknown.",
                        "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 345,
            "type": {
              "path": ["orml_xtokens", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 346,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 40,
                          "typeName": "T::CurrencyId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 346,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 346,
                          "typeName": "Box<VersionedMultiAsset>",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 122,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>",
                          "docs": []
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 164,
                          "typeName": "Box<VersionedMultiAssets>",
                          "docs": []
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 346,
            "type": {
              "path": ["xcm", "VersionedMultiAsset"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 166,
                          "typeName": "v0::MultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 149,
                          "typeName": "v1::MultiAsset",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 347,
            "type": {
              "path": ["orml_xcm", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send_as_sovereign",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 169,
                          "typeName": "Box<VersionedMultiLocation>",
                          "docs": []
                        },
                        {
                          "name": "message",
                          "type": 320,
                          "typeName": "Box<VersionedXcm<()>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Send an XCM message as parachain sovereign."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 348,
            "type": {
              "path": ["module_evm", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "eth_call",
                      "fields": [
                        {
                          "name": "action",
                          "type": 349,
                          "typeName": "TransactionAction",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        },
                        {
                          "name": "valid_until",
                          "type": 86,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "target",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call",
                        "transaction in Ethereum.",
                        "",
                        "- `target`: the contract address to call",
                        "- `input`: the data supplied for the call",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "scheduled_call",
                      "fields": [
                        {
                          "name": "from",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM call operation on a scheduled contract call, and",
                        "refund the unused gas reserved when the call was scheduled.",
                        "",
                        "- `from`: the address the scheduled call originates from",
                        "- `target`: the contract address to call",
                        "- `input`: the data supplied for the call",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract",
                        "creation transaction in Ethereum.",
                        "",
                        "- `input`: the data supplied for the contract's constructor",
                        "- `value`: the amount sent to the contract upon creation",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "salt",
                          "type": 9,
                          "typeName": "H256",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Issue an EVM create2 operation.",
                        "",
                        "- `target`: the contract address to call",
                        "- `input`: the data supplied for the contract's constructor",
                        "- `salt`: used for generating the new contract's address",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "create_nft_contract",
                      "fields": [
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Create mirrored NFT contract. The next available system contract",
                        "address will be used as created contract address.",
                        "",
                        "- `input`: the data supplied for the contract's constructor",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "create_predeploy_contract",
                      "fields": [
                        {
                          "name": "target",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Issue an EVM create operation. The address specified",
                        "will be used as created contract address.",
                        "",
                        "- `target`: the address specified by the contract",
                        "- `input`: the data supplied for the contract's constructor",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    },
                    {
                      "name": "transfer_maintainer",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "new_maintainer",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Transfers Contract maintainership to a new EVM Address.",
                        "",
                        "- `contract`: the contract whose maintainership is being transferred, the caller must be",
                        "  the contract's maintainer",
                        "- `new_maintainer`: the address of the new maintainer"
                      ]
                    },
                    {
                      "name": "publish_contract",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Mark a given contract as published.",
                        "",
                        "- `contract`: The contract to mark as published, the caller must the contract's",
                        "  maintainer"
                      ]
                    },
                    {
                      "name": "publish_free",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Mark a given contract as published without paying the publication fee",
                        "",
                        "- `contract`: The contract to mark as published, the caller must be the contract's",
                        "  maintainer."
                      ]
                    },
                    {
                      "name": "enable_contract_development",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Mark the caller's address to allow contract development.",
                        "This allows the address to interact with non-published contracts."
                      ]
                    },
                    {
                      "name": "disable_contract_development",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Mark the caller's address to disable contract development.",
                        "This disallows the address to interact with non-published contracts."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Set the code of a contract at a given address.",
                        "",
                        "- `contract`: The contract whose code is being set, must not be marked as published",
                        "- `code`: The new ABI bundle for the contract"
                      ]
                    },
                    {
                      "name": "selfdestruct",
                      "fields": [
                        {
                          "name": "contract",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove a contract at a given address.",
                        "",
                        "- `contract`: The contract to remove, must not be marked as published"
                      ]
                    },
                    {
                      "name": "strict_call",
                      "fields": [
                        {
                          "name": "target",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "gas_limit",
                          "type": 89,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "storage_limit",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "access_list",
                          "type": 350,
                          "typeName": "Vec<AccessListItem>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Issue an EVM call operation in `Utility::batch_all`. This is same as the evm.call but",
                        "returns error when it failed. The current evm.call always success and emit event to",
                        "indicate it failed.",
                        "",
                        "- `target`: the contract address to call",
                        "- `input`: the data supplied for the call",
                        "- `value`: the amount sent for payable calls",
                        "- `gas_limit`: the maximum gas the call can use",
                        "- `storage_limit`: the total bytes the contract's storage can increase by"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 349,
            "type": {
              "path": ["ethereum", "transaction", "TransactionAction"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "H160",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Create",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 350,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 351
                }
              },
              "docs": []
            }
          },
          {
            "id": 351,
            "type": {
              "path": ["ethereum", "transaction", "AccessListItem"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 34,
                      "typeName": "Address",
                      "docs": []
                    },
                    {
                      "name": "storage_keys",
                      "type": 178,
                      "typeName": "Vec<H256>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 352,
            "type": {
              "path": ["module_evm_accounts", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim_account",
                      "fields": [
                        {
                          "name": "eth_address",
                          "type": 34,
                          "typeName": "EvmAddress",
                          "docs": []
                        },
                        {
                          "name": "eth_signature",
                          "type": 241,
                          "typeName": "Eip712Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Claim account mapping between Substrate accounts and EVM accounts.",
                        "Ensure eth_address has not been mapped.",
                        "",
                        "- `eth_address`: The address to bind to the caller's account",
                        "- `eth_signature`: A signature generated by the address to prove ownership"
                      ]
                    },
                    {
                      "name": "claim_default_account",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Claim account mapping between Substrate accounts and a generated EVM",
                        "address based off of those accounts.",
                        "Ensure eth_address has not been mapped"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 353,
            "type": {
              "path": ["pallet_authorship", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 354,
                          "typeName": "Vec<T::Header>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": ["Provide a set of uncles."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 354,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 355
                }
              },
              "docs": []
            }
          },
          {
            "id": 355,
            "type": {
              "path": ["sp_runtime", "generic", "header", "Header"],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 356
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "number",
                      "type": 86,
                      "typeName": "Number",
                      "docs": []
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": []
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 356,
            "type": {
              "path": ["sp_runtime", "traits", "BlakeTwo256"],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 357,
            "type": {
              "path": ["module_collator_selection", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "new",
                          "type": 100,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "set_desired_candidates",
                      "fields": [
                        {
                          "name": "max",
                          "type": 86,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "set_candidacy_bond",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "register_as_candidate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "register_candidate",
                      "fields": [
                        {
                          "name": "new_candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "leave_intent",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "withdraw_bond",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 358,
            "type": {
              "path": ["pallet_session", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 359,
                          "typeName": "T::Keys",
                          "docs": []
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 359,
            "type": {
              "path": ["mandala_runtime", "SessionKeys"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 360,
                      "typeName": "</*«*/ Aura /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 360,
            "type": {
              "path": ["sp_consensus_aura", "sr25519", "app_sr25519", "Public"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 361,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 361,
            "type": {
              "path": ["sp_core", "sr25519", "Public"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 362,
            "type": {
              "path": ["module_session_manager", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule_session_duration",
                      "fields": [
                        {
                          "name": "start_session",
                          "type": 86,
                          "typeName": "SessionIndex",
                          "docs": []
                        },
                        {
                          "name": "duration",
                          "type": 86,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Schedule a new session duration in the specified session index.",
                        "",
                        "- `start_session`: the session index that the new change become effective.",
                        "- `duration`:  new session duration."
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 363,
            "type": {
              "path": ["nutsfinance_stable_asset", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_pool",
                      "fields": [
                        {
                          "name": "pool_asset",
                          "type": 40,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "assets",
                          "type": 111,
                          "typeName": "Vec<T::AssetId>",
                          "docs": []
                        },
                        {
                          "name": "precisions",
                          "type": 112,
                          "typeName": "Vec<T::AtLeast64BitUnsigned>",
                          "docs": []
                        },
                        {
                          "name": "mint_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "swap_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "redeem_fee",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "initial_a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "fee_recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "yield_recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "precision",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "min_mint_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "swap",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "i",
                          "type": 4,
                          "typeName": "PoolTokenIndex",
                          "docs": []
                        },
                        {
                          "name": "j",
                          "type": 4,
                          "typeName": "PoolTokenIndex",
                          "docs": []
                        },
                        {
                          "name": "dx",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "min_dy",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_length",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "redeem_proportion",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "min_redeem_amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "redeem_single",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "i",
                          "type": 4,
                          "typeName": "PoolTokenIndex",
                          "docs": []
                        },
                        {
                          "name": "min_redeem_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "asset_length",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "redeem_multi",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "amounts",
                          "type": 112,
                          "typeName": "Vec<T::Balance>",
                          "docs": []
                        },
                        {
                          "name": "max_redeem_amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "modify_a",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "a",
                          "type": 6,
                          "typeName": "T::AtLeast64BitUnsigned",
                          "docs": []
                        },
                        {
                          "name": "future_a_block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "modify_fees",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "mint_fee",
                          "type": 296,
                          "typeName": "Option<T::AtLeast64BitUnsigned>",
                          "docs": []
                        },
                        {
                          "name": "swap_fee",
                          "type": 296,
                          "typeName": "Option<T::AtLeast64BitUnsigned>",
                          "docs": []
                        },
                        {
                          "name": "redeem_fee",
                          "type": 296,
                          "typeName": "Option<T::AtLeast64BitUnsigned>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "modify_recipients",
                      "fields": [
                        {
                          "name": "pool_id",
                          "type": 4,
                          "typeName": "StableAssetPoolId",
                          "docs": []
                        },
                        {
                          "name": "fee_recipient",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "yield_recipient",
                          "type": 95,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 364,
            "type": {
              "path": ["orml_payments", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "pay",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset",
                          "type": 40,
                          "typeName": "AssetIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "remark",
                          "type": 193,
                          "typeName": "Option<BoundedDataOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "This allows any user to create a new payment, that releases only to",
                        "specified recipient The only action is to store the details of this",
                        "payment in storage and reserve the specified amount. User also has",
                        "the option to add a remark, this remark can then be used to run",
                        "custom logic and trigger alternate payment flows. the specified",
                        "amount."
                      ]
                    },
                    {
                      "name": "release",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Release any created payment, this will transfer the reserved amount",
                        "from the creator of the payment to the assigned recipient"
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Cancel a payment in created state, this will release the reserved",
                        "back to creator of the payment. This extrinsic can only be called by",
                        "the recipient of the payment"
                      ]
                    },
                    {
                      "name": "resolve_payment",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "recipient_share",
                          "type": 195,
                          "typeName": "Percent",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This extrinsic is used to resolve disputes between the creator and",
                        "recipient of the payment.",
                        "This extrinsic allows the assigned judge to",
                        "cancel/release/partial_release the payment."
                      ]
                    },
                    {
                      "name": "request_refund",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow the creator of a payment to initiate a refund that will return",
                        "the funds after a configured amount of time that the reveiver has to",
                        "react and opose the request"
                      ]
                    },
                    {
                      "name": "dispute_refund",
                      "fields": [
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow payment recipient to dispute the refund request from the",
                        "payment creator This does not cancel the request, instead sends the",
                        "payment to a NeedsReview state The assigned resolver account can",
                        "then change the state of the payment after review."
                      ]
                    },
                    {
                      "name": "request_payment",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "asset",
                          "type": 40,
                          "typeName": "AssetIdOf<T>",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "accept_and_pay",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 365,
            "type": {
              "path": ["module_earning", "module", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Bond tokens by locking them up to `amount`.",
                        "If user available balances is less than amount, then all the remaining balances will be",
                        "locked."
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Start unbonding tokens up to `amount`.",
                        "If bonded amount is less than `amount`, then all the remaining bonded tokens will start",
                        "unbonding. Token will finish unbonding after `UnbondingPeriod` blocks."
                      ]
                    },
                    {
                      "name": "unbond_instant",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unbond up to `amount` tokens instantly by paying a `InstantUnstakeFee` fee.",
                        "If bonded amount is less than `amount`, then all the remaining bonded tokens will be",
                        "unbonded. This will not unbond tokens during unbonding period."
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 48,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Rebond up to `amount` tokens from unbonding period.",
                        "If unbonded amount is less than `amount`, then all the remaining unbonded tokens will be",
                        "rebonded."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [],
                      "index": 4,
                      "docs": ["Withdraw all unbonded tokens."]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 366,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 367,
                          "typeName": "ParachainInherentData",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 10,
                          "typeName": "UpwardMessage",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 367,
            "type": {
              "path": ["cumulus_primitives_parachain_inherent", "ParachainInherentData"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 368,
                      "typeName": "PersistedValidationData",
                      "docs": []
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 370,
                      "typeName": "sp_trie::StorageProof",
                      "docs": []
                    },
                    {
                      "name": "downward_messages",
                      "type": 372,
                      "typeName": "Vec<InboundDownwardMessage>",
                      "docs": []
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 374,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 368,
            "type": {
              "path": ["polkadot_primitives", "v2", "PersistedValidationData"],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 369,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 9,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 369,
            "type": {
              "path": ["polkadot_parachain", "primitives", "HeadData"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 370,
            "type": {
              "path": ["sp_trie", "storage_proof", "StorageProof"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 371,
                      "typeName": "BTreeSet<Vec<u8>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 371,
            "type": {
              "path": ["BTreeSet"],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 206,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 372,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 373
                }
              },
              "docs": []
            }
          },
          {
            "id": 373,
            "type": {
              "path": ["polkadot_core_primitives", "InboundDownwardMessage"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "msg",
                      "type": 10,
                      "typeName": "DownwardMessage",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 374,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 93
                },
                {
                  "name": "V",
                  "type": 375
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 377,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 375,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 376
                }
              },
              "docs": []
            }
          },
          {
            "id": 376,
            "type": {
              "path": ["polkadot_core_primitives", "InboundHrmpMessage"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 377,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 378
                }
              },
              "docs": []
            }
          },
          {
            "id": 378,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 375]
              },
              "docs": []
            }
          },
          {
            "id": 379,
            "type": {
              "path": ["pallet_sudo", "pallet", "Call"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 230,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 224,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
            }
          },
          {
            "id": 380,
            "type": {
              "path": ["pallet_scheduler", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 0,
                      "docs": ["Failed to schedule a call"]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": ["Cannot find the scheduled call."]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [],
                      "index": 2,
                      "docs": ["Given target block number is in the past."]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [],
                      "index": 3,
                      "docs": ["Reschedule failed because it does not change scheduled time."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": ["module_transaction_pause", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotPause",
                      "fields": [],
                      "index": 0,
                      "docs": ["can not pause"]
                    },
                    {
                      "name": "InvalidCharacter",
                      "fields": [],
                      "index": 1,
                      "docs": ["invalid character encoding"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": ["pallet_preimage", "RequestStatus"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": null,
                          "type": 383,
                          "typeName": "Option<(AccountId, Balance)>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 383,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 98
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 384,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 385,
            "type": {
              "path": ["pallet_preimage", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLarge",
                      "fields": [],
                      "index": 0,
                      "docs": ["Preimage is too large to store on-chain."]
                    },
                    {
                      "name": "AlreadyNoted",
                      "fields": [],
                      "index": 1,
                      "docs": ["Preimage has already been noted on-chain."]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 2,
                      "docs": ["The user is not authorized to perform this action."]
                    },
                    {
                      "name": "NotNoted",
                      "fields": [],
                      "index": 3,
                      "docs": ["The preimage cannot be removed since it has not yet been noted."]
                    },
                    {
                      "name": "Requested",
                      "fields": [],
                      "index": 4,
                      "docs": ["A preimage may not be removed when there are outstanding requests."]
                    },
                    {
                      "name": "NotRequested",
                      "fields": [],
                      "index": 5,
                      "docs": ["The preimage request cannot be removed since no outstanding requests exist."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 386,
            "type": {
              "path": ["sp_runtime", "bounded", "weak_bounded_vec", "WeakBoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 387
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 389,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 387,
            "type": {
              "path": ["pallet_balances", "BalanceLock"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 44,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": 388,
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 388,
            "type": {
              "path": ["pallet_balances", "Reasons"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 389,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 387
                }
              },
              "docs": []
            }
          },
          {
            "id": 390,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 391
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 393,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 391,
            "type": {
              "path": ["pallet_balances", "ReserveData"],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 392
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 392,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 392,
            "type": {
              "path": ["acala_primitives", "ReserveIdentifier"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollatorSelection",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "EvmStorageDeposit",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "EvmDeveloperDeposit",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Honzon",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Nft",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TransactionPaymentDeposit",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Count",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 393,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 391
                }
              },
              "docs": []
            }
          },
          {
            "id": 394,
            "type": {
              "path": ["pallet_balances", "Releases"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 395,
            "type": {
              "path": ["pallet_balances", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": 0,
                      "docs": ["Vesting balance too high to send value"]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 1,
                      "docs": ["Account liquidity restrictions prevent withdrawal"]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 2,
                      "docs": ["Balance too low to send value"]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": ["Value too low to create account due to existential deposit"]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": 4,
                      "docs": ["Transfer/payment would kill account"]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": 5,
                      "docs": ["A vesting schedule already exists for this account"]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": ["Beneficiary account must pre-exist"]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": ["Number of named reserves exceed MaxReserves"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 396,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 40]
              },
              "docs": []
            }
          },
          {
            "id": 397,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 398
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 399,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 398,
            "type": {
              "path": ["orml_tokens", "BalanceLock"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 44,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 399,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 398
                }
              },
              "docs": []
            }
          },
          {
            "id": 400,
            "type": {
              "path": ["orml_tokens", "AccountData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 401,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 402
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 403,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 402,
            "type": {
              "path": ["orml_tokens", "ReserveData"],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 392
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 392,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 403,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 402
                }
              },
              "docs": []
            }
          },
          {
            "id": 404,
            "type": {
              "path": ["orml_tokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "fields": [],
                      "index": 0,
                      "docs": ["The balance is too low"]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "fields": [],
                      "index": 1,
                      "docs": ["Cannot convert Amount into Balance type"]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 2,
                      "docs": ["Failed because liquidity restrictions due to locking"]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "fields": [],
                      "index": 3,
                      "docs": ["Failed because the maximum locks was exceeded"]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": 4,
                      "docs": ["Transfer/payment would kill account"]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 5,
                      "docs": ["Value too low to create account due to existential deposit"]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": ["Beneficiary account must pre-exist"]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 405,
            "type": {
              "path": ["module_currencies", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "fields": [],
                      "index": 0,
                      "docs": ["Unable to convert the Amount type into Balance."]
                    },
                    {
                      "name": "BalanceTooLow",
                      "fields": [],
                      "index": 1,
                      "docs": ["Balance is too low."]
                    },
                    {
                      "name": "Erc20InvalidOperation",
                      "fields": [],
                      "index": 2,
                      "docs": ["Erc20 invalid operation"]
                    },
                    {
                      "name": "EvmAccountNotFound",
                      "fields": [],
                      "index": 3,
                      "docs": ["EVM account not found"]
                    },
                    {
                      "name": "RealOriginNotFound",
                      "fields": [],
                      "index": 4,
                      "docs": ["Real origin not found"]
                    },
                    {
                      "name": "DepositFailed",
                      "fields": [],
                      "index": 5,
                      "docs": ["Deposit result is not expected"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 47
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 233,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 407,
            "type": {
              "path": ["orml_vesting", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ZeroVestingPeriod",
                      "fields": [],
                      "index": 0,
                      "docs": ["Vesting period is zero"]
                    },
                    {
                      "name": "ZeroVestingPeriodCount",
                      "fields": [],
                      "index": 1,
                      "docs": ["Number of vests is zero"]
                    },
                    {
                      "name": "InsufficientBalanceToLock",
                      "fields": [],
                      "index": 2,
                      "docs": ["Insufficient amount of balance to lock"]
                    },
                    {
                      "name": "TooManyVestingSchedules",
                      "fields": [],
                      "index": 3,
                      "docs": ["This account have too many vesting schedules"]
                    },
                    {
                      "name": "AmountLow",
                      "fields": [],
                      "index": 4,
                      "docs": ["The vested transfer amount is too low"]
                    },
                    {
                      "name": "MaxVestingSchedulesExceeded",
                      "fields": [],
                      "index": 5,
                      "docs": ["Failed because the maximum vesting schedules was exceeded"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 40
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 111,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 409,
            "type": {
              "path": ["frame_support", "PalletId"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 44,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 410,
            "type": {
              "path": ["module_transaction_payment", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSwapPath",
                      "fields": [],
                      "index": 0,
                      "docs": ["The swap path is invalid"]
                    },
                    {
                      "name": "InvalidBalance",
                      "fields": [],
                      "index": 1,
                      "docs": ["The balance is invalid"]
                    },
                    {
                      "name": "InvalidRate",
                      "fields": [],
                      "index": 2,
                      "docs": ["Can't find rate by the supply token"]
                    },
                    {
                      "name": "InvalidToken",
                      "fields": [],
                      "index": 3,
                      "docs": ["Can't find the token info in the charge fee pool"]
                    },
                    {
                      "name": "DexNotAvailable",
                      "fields": [],
                      "index": 4,
                      "docs": ["Dex swap pool is not available now"]
                    },
                    {
                      "name": "ChargeFeePoolAlreadyExisted",
                      "fields": [],
                      "index": 5,
                      "docs": ["Charge fee pool is already exist"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": ["pallet_treasury", "Proposal"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 412,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 413,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 413,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 414,
            "type": {
              "path": ["sp_arithmetic", "per_things", "Permill"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 415,
            "type": {
              "path": ["pallet_treasury", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": ["Proposer's balance is too low."]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": ["No proposal or bounty at that index."]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many approvals in the queue."]
                    },
                    {
                      "name": "InsufficientPermission",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "fields": [],
                      "index": 4,
                      "docs": ["Proposal has not been approved."]
                    }
                  ]
                }
              },
              "docs": ["Error for the treasury pallet."]
            }
          },
          {
            "id": 416,
            "type": {
              "path": ["pallet_bounties", "Bounty"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "curator_deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 417,
                      "typeName": "BountyStatus<AccountId, BlockNumber>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 417,
            "type": {
              "path": ["pallet_bounties", "BountyStatus"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Approved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Funded",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CuratorProposed",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "update_due",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "unlock_at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 418,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 419,
            "type": {
              "path": ["pallet_bounties", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": ["Proposer's balance is too low."]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": ["No proposal or bounty at that index."]
                    },
                    {
                      "name": "ReasonTooBig",
                      "fields": [],
                      "index": 2,
                      "docs": ["The reason given is just too big."]
                    },
                    {
                      "name": "UnexpectedStatus",
                      "fields": [],
                      "index": 3,
                      "docs": ["The bounty status is unexpected."]
                    },
                    {
                      "name": "RequireCurator",
                      "fields": [],
                      "index": 4,
                      "docs": ["Require bounty curator."]
                    },
                    {
                      "name": "InvalidValue",
                      "fields": [],
                      "index": 5,
                      "docs": ["Invalid bounty value."]
                    },
                    {
                      "name": "InvalidFee",
                      "fields": [],
                      "index": 6,
                      "docs": ["Invalid bounty fee."]
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "A bounty payout is pending.",
                        "To cancel the bounty, you must unassign and slash the curator."
                      ]
                    },
                    {
                      "name": "Premature",
                      "fields": [],
                      "index": 8,
                      "docs": ["The bounties cannot be claimed/closed because it's still in the countdown period."]
                    },
                    {
                      "name": "HasActiveChildBounty",
                      "fields": [],
                      "index": 9,
                      "docs": ["The bounty cannot be closed because it has active child bounties."]
                    },
                    {
                      "name": "TooManyQueued",
                      "fields": [],
                      "index": 10,
                      "docs": ["Too many approvals are already queued."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 420,
            "type": {
              "path": ["pallet_tips", "OpenTip"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "closes",
                      "type": 272,
                      "typeName": "Option<BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "tips",
                      "type": 97,
                      "typeName": "Vec<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "finders_fee",
                      "type": 66,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 421,
            "type": {
              "path": ["pallet_tips", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "fields": [],
                      "index": 0,
                      "docs": ["The reason given is just too big."]
                    },
                    {
                      "name": "AlreadyKnown",
                      "fields": [],
                      "index": 1,
                      "docs": ["The tip was already found/started."]
                    },
                    {
                      "name": "UnknownTip",
                      "fields": [],
                      "index": 2,
                      "docs": ["The tip hash is unknown."]
                    },
                    {
                      "name": "NotFinder",
                      "fields": [],
                      "index": 3,
                      "docs": ["The account attempting to retract the tip is not the finder of the tip."]
                    },
                    {
                      "name": "StillOpen",
                      "fields": [],
                      "index": 4,
                      "docs": ["The tip cannot be claimed/closed because there are not enough tippers yet."]
                    },
                    {
                      "name": "Premature",
                      "fields": [],
                      "index": 5,
                      "docs": ["The tip cannot be claimed/closed because it's still in the countdown period."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": ["pallet_utility", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [],
                      "index": 0,
                      "docs": ["Too many calls batched."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 423,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 1]
              },
              "docs": []
            }
          },
          {
            "id": 424,
            "type": {
              "path": ["pallet_multisig", "Multisig"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 56,
                      "typeName": "Timepoint<BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 100,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 425,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [251, 0, 6]
              },
              "docs": []
            }
          },
          {
            "id": 426,
            "type": {
              "path": ["pallet_multisig", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "fields": [],
                      "index": 0,
                      "docs": ["Threshold must be 2 or greater."]
                    },
                    {
                      "name": "AlreadyApproved",
                      "fields": [],
                      "index": 1,
                      "docs": ["Call is already approved by this signatory."]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "fields": [],
                      "index": 2,
                      "docs": ["Call doesn't need any (more) approvals."]
                    },
                    {
                      "name": "TooFewSignatories",
                      "fields": [],
                      "index": 3,
                      "docs": ["There are too few signatories in the list."]
                    },
                    {
                      "name": "TooManySignatories",
                      "fields": [],
                      "index": 4,
                      "docs": ["There are too many signatories in the list."]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "fields": [],
                      "index": 5,
                      "docs": ["The signatories were provided out of order; they should be ordered."]
                    },
                    {
                      "name": "SenderInSignatories",
                      "fields": [],
                      "index": 6,
                      "docs": ["The sender was contained in the other signatories; it shouldn't be."]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 7,
                      "docs": ["Multisig operation not found when attempting to cancel."]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 8,
                      "docs": ["Only the account that originally created the multisig is able to cancel it."]
                    },
                    {
                      "name": "NoTimepoint",
                      "fields": [],
                      "index": 9,
                      "docs": ["No timepoint was given, yet the multisig operation is already underway."]
                    },
                    {
                      "name": "WrongTimepoint",
                      "fields": [],
                      "index": 10,
                      "docs": ["A different timepoint was given to the multisig operation that is underway."]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "fields": [],
                      "index": 11,
                      "docs": ["A timepoint was given, yet no multisig operation is underway."]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "fields": [],
                      "index": 12,
                      "docs": ["The maximum weight information provided was too low."]
                    },
                    {
                      "name": "AlreadyStored",
                      "fields": [],
                      "index": 13,
                      "docs": ["The data to be stored is already stored."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": ["pallet_recovery", "RecoveryConfig"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 428
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": 428,
                      "typeName": "Friends",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 43,
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 428,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 429,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 0]
              },
              "docs": []
            }
          },
          {
            "id": 430,
            "type": {
              "path": ["pallet_recovery", "ActiveRecovery"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 428
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": 428,
                      "typeName": "Friends",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 431,
            "type": {
              "path": ["pallet_recovery", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "fields": [],
                      "index": 0,
                      "docs": ["User is not allowed to make a call on behalf of this account"]
                    },
                    {
                      "name": "ZeroThreshold",
                      "fields": [],
                      "index": 1,
                      "docs": ["Threshold must be greater than zero"]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "fields": [],
                      "index": 2,
                      "docs": ["Friends list must be greater than zero and threshold"]
                    },
                    {
                      "name": "MaxFriends",
                      "fields": [],
                      "index": 3,
                      "docs": ["Friends list must be less than max friends"]
                    },
                    {
                      "name": "NotSorted",
                      "fields": [],
                      "index": 4,
                      "docs": ["Friends list must be sorted and free of duplicates"]
                    },
                    {
                      "name": "NotRecoverable",
                      "fields": [],
                      "index": 5,
                      "docs": ["This account is not set up for recovery"]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "fields": [],
                      "index": 6,
                      "docs": ["This account is already set up for recovery"]
                    },
                    {
                      "name": "AlreadyStarted",
                      "fields": [],
                      "index": 7,
                      "docs": ["A recovery process has already started for this account"]
                    },
                    {
                      "name": "NotStarted",
                      "fields": [],
                      "index": 8,
                      "docs": ["A recovery process has not started for this rescuer"]
                    },
                    {
                      "name": "NotFriend",
                      "fields": [],
                      "index": 9,
                      "docs": ["This account is not a friend who can vouch"]
                    },
                    {
                      "name": "DelayPeriod",
                      "fields": [],
                      "index": 10,
                      "docs": ["The friend must wait until the delay period to vouch for this recovery"]
                    },
                    {
                      "name": "AlreadyVouched",
                      "fields": [],
                      "index": 11,
                      "docs": ["This user has already vouched for this recovery"]
                    },
                    {
                      "name": "Threshold",
                      "fields": [],
                      "index": 12,
                      "docs": ["The threshold for recovering this account has not been met"]
                    },
                    {
                      "name": "StillActive",
                      "fields": [],
                      "index": 13,
                      "docs": ["There are still active recovery attempts that need to be closed"]
                    },
                    {
                      "name": "AlreadyProxy",
                      "fields": [],
                      "index": 14,
                      "docs": ["This account is already set up for recovery"]
                    },
                    {
                      "name": "BadState",
                      "fields": [],
                      "index": 15,
                      "docs": ["Some internal state is broken."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 432,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [433, 6]
              },
              "docs": []
            }
          },
          {
            "id": 433,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 434
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 435,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 434,
            "type": {
              "path": ["pallet_proxy", "ProxyDefinition"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 59
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 59,
                      "typeName": "ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 435,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 434
                }
              },
              "docs": []
            }
          },
          {
            "id": 436,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [437, 6]
              },
              "docs": []
            }
          },
          {
            "id": 437,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 438
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 439,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 438,
            "type": {
              "path": ["pallet_proxy", "Announcement"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 439,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 438
                }
              },
              "docs": []
            }
          },
          {
            "id": 440,
            "type": {
              "path": ["pallet_proxy", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [],
                      "index": 0,
                      "docs": ["There are too many proxies registered or too many announcements pending."]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": ["Proxy registration not found."]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [],
                      "index": 2,
                      "docs": ["Sender is not a proxy of the account to be proxied."]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [],
                      "index": 3,
                      "docs": ["A call which is incompatible with the proxy type's filter was attempted."]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [],
                      "index": 4,
                      "docs": ["Account is already a proxy."]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 5,
                      "docs": ["Call may not be made by proxy because it may escalate its privileges."]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [],
                      "index": 6,
                      "docs": ["Announcement, if made at all, was made too recently."]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [],
                      "index": 7,
                      "docs": ["Cannot add self as proxy."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 441,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 6, 66]
              },
              "docs": []
            }
          },
          {
            "id": 442,
            "type": {
              "path": ["pallet_indices", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "fields": [],
                      "index": 0,
                      "docs": ["The index was not already assigned."]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 1,
                      "docs": ["The index is assigned to another account."]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 2,
                      "docs": ["The index was not available."]
                    },
                    {
                      "name": "NotTransfer",
                      "fields": [],
                      "index": 3,
                      "docs": ["The source and destination accounts are identical."]
                    },
                    {
                      "name": "Permanent",
                      "fields": [],
                      "index": 4,
                      "docs": ["The index is permanent and may not be freed/changed."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 443,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 178,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 444,
            "type": {
              "path": ["pallet_collective", "Votes"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "ayes",
                      "type": 100,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 100,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 445,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": ["The close call was made too early, before the end of the voting."]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": ["There can only be a maximum of `MaxProposals` active proposals."]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": ["The given weight bound for the proposal was too low."]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": ["The given length bound for the proposal was too low."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 446,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 447,
            "type": {
              "path": ["pallet_membership", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already a member."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many members."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 448,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": ["The close call was made too early, before the end of the voting."]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": ["There can only be a maximum of `MaxProposals` active proposals."]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": ["The given weight bound for the proposal was too low."]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": ["The given length bound for the proposal was too low."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 449,
            "type": {
              "path": ["pallet_membership", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already a member."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many members."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 450,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": ["The close call was made too early, before the end of the voting."]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": ["There can only be a maximum of `MaxProposals` active proposals."]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": ["The given weight bound for the proposal was too low."]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": ["The given length bound for the proposal was too low."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 451,
            "type": {
              "path": ["pallet_membership", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already a member."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many members."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 452,
            "type": {
              "path": ["pallet_collective", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Account is not a member"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": ["Duplicate proposals not allowed"]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": ["Proposal must exist"]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": ["Mismatched index"]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": ["Duplicate vote ignored"]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": ["Members are already initialized!"]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": ["The close call was made too early, before the end of the voting."]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": ["There can only be a maximum of `MaxProposals` active proposals."]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": ["The given weight bound for the proposal was too low."]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": ["The given length bound for the proposal was too low."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 453,
            "type": {
              "path": ["pallet_membership", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already a member."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many members."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [224, 95]
              },
              "docs": []
            }
          },
          {
            "id": 455,
            "type": {
              "path": ["orml_authority", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [],
                      "index": 0,
                      "docs": ["Failed to schedule a task."]
                    },
                    {
                      "name": "FailedToCancel",
                      "fields": [],
                      "index": 1,
                      "docs": ["Failed to cancel a task."]
                    },
                    {
                      "name": "FailedToFastTrack",
                      "fields": [],
                      "index": 2,
                      "docs": ["Failed to fast track a task."]
                    },
                    {
                      "name": "FailedToDelay",
                      "fields": [],
                      "index": 3,
                      "docs": ["Failed to delay a task."]
                    },
                    {
                      "name": "CallNotAuthorized",
                      "fields": [],
                      "index": 4,
                      "docs": ["Call is not authorized."]
                    },
                    {
                      "name": "TriggerCallNotPermitted",
                      "fields": [],
                      "index": 5,
                      "docs": ["Triggering the call is not permitted."]
                    },
                    {
                      "name": "WrongCallWeightBound",
                      "fields": [],
                      "index": 6,
                      "docs": ["Call weight bound is wrong."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 456,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 457
                }
              },
              "docs": []
            }
          },
          {
            "id": 457,
            "type": {
              "path": ["pallet_elections_phragmen", "SeatHolder"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 458,
            "type": {
              "path": ["pallet_elections_phragmen", "Voter"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 100,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 459,
            "type": {
              "path": ["pallet_elections_phragmen", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "fields": [],
                      "index": 0,
                      "docs": ["Cannot vote when no candidates or members exist."]
                    },
                    {
                      "name": "NoVotes",
                      "fields": [],
                      "index": 1,
                      "docs": ["Must vote for at least one candidate."]
                    },
                    {
                      "name": "TooManyVotes",
                      "fields": [],
                      "index": 2,
                      "docs": ["Cannot vote more than candidates."]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "fields": [],
                      "index": 3,
                      "docs": ["Cannot vote more than maximum allowed."]
                    },
                    {
                      "name": "LowBalance",
                      "fields": [],
                      "index": 4,
                      "docs": ["Cannot vote with stake less than minimum balance."]
                    },
                    {
                      "name": "UnableToPayBond",
                      "fields": [],
                      "index": 5,
                      "docs": ["Voter can not pay voting bond."]
                    },
                    {
                      "name": "MustBeVoter",
                      "fields": [],
                      "index": 6,
                      "docs": ["Must be a voter."]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "fields": [],
                      "index": 7,
                      "docs": ["Duplicated candidate submission."]
                    },
                    {
                      "name": "TooManyCandidates",
                      "fields": [],
                      "index": 8,
                      "docs": ["Too many candidates have been created."]
                    },
                    {
                      "name": "MemberSubmit",
                      "fields": [],
                      "index": 9,
                      "docs": ["Member cannot re-submit candidacy."]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "fields": [],
                      "index": 10,
                      "docs": ["Runner cannot re-submit candidacy."]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "fields": [],
                      "index": 11,
                      "docs": ["Candidate does not have enough funds."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 12,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "fields": [],
                      "index": 13,
                      "docs": ["The provided count of number of candidates is incorrect."]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "fields": [],
                      "index": 14,
                      "docs": ["The provided count of number of votes is incorrect."]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "fields": [],
                      "index": 15,
                      "docs": ["The renouncing origin presented a wrong `Renouncing` parameter."]
                    },
                    {
                      "name": "InvalidReplacement",
                      "fields": [],
                      "index": 16,
                      "docs": ["Prediction regarding replacement after member removal is wrong."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 460,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 461
                }
              },
              "docs": []
            }
          },
          {
            "id": 461,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 9, 0]
              },
              "docs": []
            }
          },
          {
            "id": 462,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [100, 6]
              },
              "docs": []
            }
          },
          {
            "id": 463,
            "type": {
              "path": ["pallet_democracy", "PreimageStatus"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "expiry",
                          "type": 272,
                          "typeName": "Option<BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 464,
            "type": {
              "path": ["pallet_democracy", "types", "ReferendumInfo"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "name": null,
                          "type": 465,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 465,
            "type": {
              "path": ["pallet_democracy", "types", "ReferendumStatus"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 101,
                      "typeName": "VoteThreshold",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "tally",
                      "type": 466,
                      "typeName": "Tally<Balance>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 466,
            "type": {
              "path": ["pallet_democracy", "types", "Tally"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 467,
            "type": {
              "path": ["pallet_democracy", "vote", "Voting"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 468,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 470,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 471,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "conviction",
                          "type": 271,
                          "typeName": "Conviction",
                          "docs": []
                        },
                        {
                          "name": "delegations",
                          "type": 470,
                          "typeName": "Delegations<Balance>",
                          "docs": []
                        },
                        {
                          "name": "prior",
                          "type": 471,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 468,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 469
                }
              },
              "docs": []
            }
          },
          {
            "id": 469,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 102]
              },
              "docs": []
            }
          },
          {
            "id": 470,
            "type": {
              "path": ["pallet_democracy", "types", "Delegations"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 471,
            "type": {
              "path": ["pallet_democracy", "vote", "PriorLock"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 472,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [9, 101]
              },
              "docs": []
            }
          },
          {
            "id": 473,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 100]
              },
              "docs": []
            }
          },
          {
            "id": 474,
            "type": {
              "path": ["pallet_democracy", "Releases"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 475,
            "type": {
              "path": ["pallet_democracy", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "fields": [],
                      "index": 0,
                      "docs": ["Value too low"]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 1,
                      "docs": ["Proposal does not exist"]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "fields": [],
                      "index": 2,
                      "docs": ["Cannot cancel the same proposal twice"]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 3,
                      "docs": ["Proposal already made"]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "fields": [],
                      "index": 4,
                      "docs": ["Proposal still blacklisted"]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "fields": [],
                      "index": 5,
                      "docs": ["Next external proposal not simple majority"]
                    },
                    {
                      "name": "InvalidHash",
                      "fields": [],
                      "index": 6,
                      "docs": ["Invalid hash"]
                    },
                    {
                      "name": "NoProposal",
                      "fields": [],
                      "index": 7,
                      "docs": ["No external proposal"]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "fields": [],
                      "index": 8,
                      "docs": ["Identity may not veto a proposal twice"]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "fields": [],
                      "index": 9,
                      "docs": ["Preimage already noted"]
                    },
                    {
                      "name": "NotImminent",
                      "fields": [],
                      "index": 10,
                      "docs": ["Not imminent"]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 11,
                      "docs": ["Too early"]
                    },
                    {
                      "name": "Imminent",
                      "fields": [],
                      "index": 12,
                      "docs": ["Imminent"]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [],
                      "index": 13,
                      "docs": ["Preimage not found"]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "fields": [],
                      "index": 14,
                      "docs": ["Vote given for invalid referendum"]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [],
                      "index": 15,
                      "docs": ["Invalid preimage"]
                    },
                    {
                      "name": "NoneWaiting",
                      "fields": [],
                      "index": 16,
                      "docs": ["No proposals waiting"]
                    },
                    {
                      "name": "NotVoter",
                      "fields": [],
                      "index": 17,
                      "docs": ["The given account did not vote on the referendum."]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 18,
                      "docs": ["The actor has no permission to conduct the action."]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [],
                      "index": 19,
                      "docs": ["The account is already delegating."]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [],
                      "index": 20,
                      "docs": ["Too high a balance was provided that the account cannot afford."]
                    },
                    {
                      "name": "NotDelegating",
                      "fields": [],
                      "index": 21,
                      "docs": ["The account is not currently delegating."]
                    },
                    {
                      "name": "VotesExist",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "fields": [],
                      "index": 23,
                      "docs": ["The instant referendum origin is currently disallowed."]
                    },
                    {
                      "name": "Nonsense",
                      "fields": [],
                      "index": 24,
                      "docs": ["Delegation to oneself makes no sense."]
                    },
                    {
                      "name": "WrongUpperBound",
                      "fields": [],
                      "index": 25,
                      "docs": ["Invalid upper bound."]
                    },
                    {
                      "name": "MaxVotesReached",
                      "fields": [],
                      "index": 26,
                      "docs": ["Maximum number of votes reached."]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 27,
                      "docs": ["Maximum number of proposals reached."]
                    },
                    {
                      "name": "VotingPeriodLow",
                      "fields": [],
                      "index": 28,
                      "docs": ["Voting period too low"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 476,
            "type": {
              "path": ["orml_oracle", "module", "TimestampedValue"],
              "params": [
                {
                  "name": "Value",
                  "type": 50
                },
                {
                  "name": "Moment",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 50,
                      "typeName": "Value",
                      "docs": []
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 477,
            "type": {
              "path": ["orml_utilities", "ordered_set", "OrderedSet"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 478,
                      "typeName": "BoundedVec<T, S>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 478,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 479,
            "type": {
              "path": ["orml_oracle", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 0,
                      "docs": ["Sender does not have permission"]
                    },
                    {
                      "name": "AlreadyFeeded",
                      "fields": [],
                      "index": 1,
                      "docs": ["Feeder has already feeded at this block"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 480,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 481,
            "type": {
              "path": ["pallet_membership", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already a member."]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not a member."]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many members."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 482,
            "type": {
              "path": ["orml_traits", "auction", "AuctionInfo"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bid",
                      "type": 383,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 272,
                      "typeName": "Option<BlockNumber>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 483,
            "type": {
              "path": ["orml_auction", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionNotExist",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AuctionNotStarted",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BidNotAccepted",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "InvalidBidPrice",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "NoAvailableAuctionId",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 484,
            "type": {
              "path": ["orml_rewards", "PoolInfo"],
              "params": [
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 40
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_shares",
                      "type": 6,
                      "typeName": "Share",
                      "docs": []
                    },
                    {
                      "name": "rewards",
                      "type": 485,
                      "typeName": "BTreeMap<CurrencyId, (Balance, Balance)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 485,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 40
                },
                {
                  "name": "V",
                  "type": 486
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 487,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 486,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [6, 6]
              },
              "docs": []
            }
          },
          {
            "id": 487,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 488
                }
              },
              "docs": []
            }
          },
          {
            "id": 488,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [40, 486]
              },
              "docs": []
            }
          },
          {
            "id": 489,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [131, 0]
              },
              "docs": []
            }
          },
          {
            "id": 490,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [6, 491]
              },
              "docs": []
            }
          },
          {
            "id": 491,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 40
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 122,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 492,
            "type": {
              "path": ["orml_rewards", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolDoesNotExist",
                      "fields": [],
                      "index": 0,
                      "docs": ["Pool does not exist"]
                    },
                    {
                      "name": "ShareDoesNotExist",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "CanSplitOnlyLessThanShare",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 493,
            "type": {
              "path": ["orml_nft", "ClassInfo"],
              "params": [
                {
                  "name": "TokenId",
                  "type": 8
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Data",
                  "type": 494
                },
                {
                  "name": "ClassMetadataOf",
                  "type": 495
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "metadata",
                      "type": 495,
                      "typeName": "ClassMetadataOf",
                      "docs": []
                    },
                    {
                      "name": "total_issuance",
                      "type": 8,
                      "typeName": "TokenId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 494,
                      "typeName": "Data",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 494,
            "type": {
              "path": ["module_nft", "ClassData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "properties",
                      "type": 309,
                      "typeName": "Properties",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 311,
                      "typeName": "Attributes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 495,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 496,
            "type": {
              "path": ["orml_nft", "TokenInfo"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Data",
                  "type": 497
                },
                {
                  "name": "TokenMetadataOf",
                  "type": 495
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "metadata",
                      "type": 495,
                      "typeName": "TokenMetadataOf",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 497,
                      "typeName": "Data",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 497,
            "type": {
              "path": ["module_nft", "TokenData"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 311,
                      "typeName": "Attributes",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 498,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 4, 8]
              },
              "docs": []
            }
          },
          {
            "id": 499,
            "type": {
              "path": ["orml_nft", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoAvailableClassId",
                      "fields": [],
                      "index": 0,
                      "docs": ["No available class ID"]
                    },
                    {
                      "name": "NoAvailableTokenId",
                      "fields": [],
                      "index": 1,
                      "docs": ["No available token ID"]
                    },
                    {
                      "name": "TokenNotFound",
                      "fields": [],
                      "index": 2,
                      "docs": ["Token(ClassId, TokenId) not found"]
                    },
                    {
                      "name": "ClassNotFound",
                      "fields": [],
                      "index": 3,
                      "docs": ["Class not found"]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 4,
                      "docs": ["The operator is not the owner of the token and has no permission"]
                    },
                    {
                      "name": "CannotDestroyClass",
                      "fields": [],
                      "index": 5,
                      "docs": ["Can not destroy class", "Total issuance is not 0"]
                    },
                    {
                      "name": "MaxMetadataExceeded",
                      "fields": [],
                      "index": 6,
                      "docs": ["Failed because the Maximum amount of metadata was exceeded"]
                    }
                  ]
                }
              },
              "docs": ["Error for non-fungible-token module."]
            }
          },
          {
            "id": 500,
            "type": {
              "path": ["module_prices", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccessPriceFailed",
                      "fields": [],
                      "index": 0,
                      "docs": ["Failed to access price"]
                    },
                    {
                      "name": "NoLockedPrice",
                      "fields": [],
                      "index": 1,
                      "docs": ["There's no locked price"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 501,
            "type": {
              "path": ["module_dex", "TradingPairStatus"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Disabled",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Provisioning",
                      "fields": [
                        {
                          "name": null,
                          "type": 502,
                          "typeName": "ProvisioningParameters<Balance, BlockNumber>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Enabled",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 502,
            "type": {
              "path": ["module_dex", "ProvisioningParameters"],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "min_contribution",
                      "type": 486,
                      "typeName": "(Balance, Balance)",
                      "docs": []
                    },
                    {
                      "name": "target_provision",
                      "type": 486,
                      "typeName": "(Balance, Balance)",
                      "docs": []
                    },
                    {
                      "name": "accumulated_provision",
                      "type": 486,
                      "typeName": "(Balance, Balance)",
                      "docs": []
                    },
                    {
                      "name": "not_before",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 503,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [113, 0]
              },
              "docs": []
            }
          },
          {
            "id": 504,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [50, 50]
              },
              "docs": []
            }
          },
          {
            "id": 505,
            "type": {
              "path": ["module_dex", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyEnabled",
                      "fields": [],
                      "index": 0,
                      "docs": ["Trading pair is already Enabled"]
                    },
                    {
                      "name": "MustBeEnabled",
                      "fields": [],
                      "index": 1,
                      "docs": ["Trading pair must be in Enabled status"]
                    },
                    {
                      "name": "MustBeProvisioning",
                      "fields": [],
                      "index": 2,
                      "docs": ["Trading pair must be in Provisioning status"]
                    },
                    {
                      "name": "MustBeDisabled",
                      "fields": [],
                      "index": 3,
                      "docs": ["Trading pair must be in Disabled status"]
                    },
                    {
                      "name": "NotAllowedList",
                      "fields": [],
                      "index": 4,
                      "docs": ["This trading pair is not allowed to be listed"]
                    },
                    {
                      "name": "InvalidContributionIncrement",
                      "fields": [],
                      "index": 5,
                      "docs": ["The increment of provision is invalid"]
                    },
                    {
                      "name": "InvalidLiquidityIncrement",
                      "fields": [],
                      "index": 6,
                      "docs": ["The increment of liquidity is invalid"]
                    },
                    {
                      "name": "InvalidCurrencyId",
                      "fields": [],
                      "index": 7,
                      "docs": ["Invalid currency id"]
                    },
                    {
                      "name": "InvalidTradingPathLength",
                      "fields": [],
                      "index": 8,
                      "docs": ["Invalid trading path length"]
                    },
                    {
                      "name": "InsufficientTargetAmount",
                      "fields": [],
                      "index": 9,
                      "docs": ["Target amount is less to min_target_amount"]
                    },
                    {
                      "name": "ExcessiveSupplyAmount",
                      "fields": [],
                      "index": 10,
                      "docs": ["Supply amount is more than max_supply_amount"]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "fields": [],
                      "index": 11,
                      "docs": ["Liquidity is not enough"]
                    },
                    {
                      "name": "ZeroSupplyAmount",
                      "fields": [],
                      "index": 12,
                      "docs": ["The supply amount is zero"]
                    },
                    {
                      "name": "ZeroTargetAmount",
                      "fields": [],
                      "index": 13,
                      "docs": ["The target amount is zero"]
                    },
                    {
                      "name": "UnacceptableShareIncrement",
                      "fields": [],
                      "index": 14,
                      "docs": ["The share increment is unacceptable"]
                    },
                    {
                      "name": "UnacceptableLiquidityWithdrawn",
                      "fields": [],
                      "index": 15,
                      "docs": ["The liquidity withdrawn is unacceptable"]
                    },
                    {
                      "name": "InvariantCheckFailed",
                      "fields": [],
                      "index": 16,
                      "docs": ["The swap dosen't meet the invariant check"]
                    },
                    {
                      "name": "UnqualifiedProvision",
                      "fields": [],
                      "index": 17,
                      "docs": ["The Provision is unqualified to be converted to `Enabled`"]
                    },
                    {
                      "name": "StillProvisioning",
                      "fields": [],
                      "index": 18,
                      "docs": ["Trading pair is still provisioning"]
                    },
                    {
                      "name": "AssetUnregistered",
                      "fields": [],
                      "index": 19,
                      "docs": ["The Asset unregistered."]
                    },
                    {
                      "name": "InvalidTradingPath",
                      "fields": [],
                      "index": 20,
                      "docs": ["The trading path is invalid"]
                    },
                    {
                      "name": "NotAllowedRefund",
                      "fields": [],
                      "index": 21,
                      "docs": ["Not allowed to refund provision"]
                    },
                    {
                      "name": "CannotSwap",
                      "fields": [],
                      "index": 22,
                      "docs": ["Cannot swap"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 506,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [507, 507, 8]
              },
              "docs": []
            }
          },
          {
            "id": 507,
            "type": {
              "path": ["primitive_types", "U256"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 508,
                      "typeName": "[u64; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 508,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 8
                }
              },
              "docs": []
            }
          },
          {
            "id": 509,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [50, 50, 507, 507, 8, 8]
              },
              "docs": []
            }
          },
          {
            "id": 510,
            "type": {
              "path": ["module_dex_oracle", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AveragePriceAlreadyEnabled",
                      "fields": [],
                      "index": 0,
                      "docs": ["Already enabled average price for this trading pair."]
                    },
                    {
                      "name": "AveragePriceMustBeEnabled",
                      "fields": [],
                      "index": 1,
                      "docs": ["The trading pair must be enabled average price."]
                    },
                    {
                      "name": "InvalidPool",
                      "fields": [],
                      "index": 2,
                      "docs": ["The liquidity pool is invalid."]
                    },
                    {
                      "name": "InvalidCurrencyId",
                      "fields": [],
                      "index": 3,
                      "docs": ["The currency id is invalid."]
                    },
                    {
                      "name": "IntervalIsZero",
                      "fields": [],
                      "index": 4,
                      "docs": ["The interval is zero."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 511,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 243
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 242,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 512,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 111
                }
              },
              "docs": []
            }
          },
          {
            "id": 513,
            "type": {
              "path": ["module_aggregated_dex", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotSwap",
                      "fields": [],
                      "index": 0,
                      "docs": ["Cannot swap."]
                    },
                    {
                      "name": "InvalidPoolId",
                      "fields": [],
                      "index": 1,
                      "docs": ["The stable asset pool id of Taiga is invalid."]
                    },
                    {
                      "name": "InvalidTokenIndex",
                      "fields": [],
                      "index": 2,
                      "docs": ["The asset index of stable asset pool is invalid."]
                    },
                    {
                      "name": "InvalidSwapPath",
                      "fields": [],
                      "index": 3,
                      "docs": ["The SwapPath is invalid."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 514,
            "type": {
              "path": ["module_auction_manager", "CollateralAuctionItem"],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "refund_recipient",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "currency_id",
                      "type": 40,
                      "typeName": "CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "initial_amount",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "start_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 515,
            "type": {
              "path": ["module_auction_manager", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuctionNotExists",
                      "fields": [],
                      "index": 0,
                      "docs": ["The auction dose not exist"]
                    },
                    {
                      "name": "InReverseStage",
                      "fields": [],
                      "index": 1,
                      "docs": ["The collateral auction is in reverse stage now"]
                    },
                    {
                      "name": "InvalidFeedPrice",
                      "fields": [],
                      "index": 2,
                      "docs": ["Feed price is invalid"]
                    },
                    {
                      "name": "MustAfterShutdown",
                      "fields": [],
                      "index": 3,
                      "docs": ["Must after system shutdown"]
                    },
                    {
                      "name": "InvalidBidPrice",
                      "fields": [],
                      "index": 4,
                      "docs": ["Bid price is invalid"]
                    },
                    {
                      "name": "InvalidAmount",
                      "fields": [],
                      "index": 5,
                      "docs": ["Invalid input amount"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 516,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [40, 0]
              },
              "docs": []
            }
          },
          {
            "id": 517,
            "type": {
              "path": ["acala_primitives", "Position"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "debit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 518,
            "type": {
              "path": ["module_loans", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountConvertFailed",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 519,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 516]
              },
              "docs": []
            }
          },
          {
            "id": 520,
            "type": {
              "path": ["module_honzon", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "AlreadyShutdown",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "AuthorizationNotExists",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "AlreadyAuthorized",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 521,
            "type": {
              "path": ["module_cdp_treasury", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollateralNotEnough",
                      "fields": [],
                      "index": 0,
                      "docs": ["The collateral amount of CDP treasury is not enough"]
                    },
                    {
                      "name": "SurplusPoolNotEnough",
                      "fields": [],
                      "index": 1,
                      "docs": ["The surplus pool of CDP treasury is not enough"]
                    },
                    {
                      "name": "DebitPoolNotEnough",
                      "fields": [],
                      "index": 2,
                      "docs": ["The debit pool of CDP treasury is not enough"]
                    },
                    {
                      "name": "CannotSwap",
                      "fields": [],
                      "index": 3,
                      "docs": ["Cannot use collateral to swap stable"]
                    },
                    {
                      "name": "NotDexShare",
                      "fields": [],
                      "index": 4,
                      "docs": ["The currency id is not DexShare type"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 522,
            "type": {
              "path": ["module_cdp_engine", "RiskManagementParams"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maximum_total_debit_value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "interest_rate_per_sec",
                      "type": 120,
                      "typeName": "Option<Rate>",
                      "docs": []
                    },
                    {
                      "name": "liquidation_ratio",
                      "type": 120,
                      "typeName": "Option<Ratio>",
                      "docs": []
                    },
                    {
                      "name": "liquidation_penalty",
                      "type": 120,
                      "typeName": "Option<Rate>",
                      "docs": []
                    },
                    {
                      "name": "required_collateral_ratio",
                      "type": 120,
                      "typeName": "Option<Ratio>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 523,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 34
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 524,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 524,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 34
                }
              },
              "docs": []
            }
          },
          {
            "id": 525,
            "type": {
              "path": ["module_cdp_engine", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExceedDebitValueHardCap",
                      "fields": [],
                      "index": 0,
                      "docs": ["The total debit value of specific collateral type already exceed the", "hard cap"]
                    },
                    {
                      "name": "BelowRequiredCollateralRatio",
                      "fields": [],
                      "index": 1,
                      "docs": ["The collateral ratio below the required collateral ratio"]
                    },
                    {
                      "name": "BelowLiquidationRatio",
                      "fields": [],
                      "index": 2,
                      "docs": ["The collateral ratio below the liquidation ratio"]
                    },
                    {
                      "name": "MustBeUnsafe",
                      "fields": [],
                      "index": 3,
                      "docs": ["The CDP must be unsafe status"]
                    },
                    {
                      "name": "MustBeSafe",
                      "fields": [],
                      "index": 4,
                      "docs": ["The CDP must be safe status"]
                    },
                    {
                      "name": "InvalidCollateralType",
                      "fields": [],
                      "index": 5,
                      "docs": ["Invalid collateral type"]
                    },
                    {
                      "name": "RemainDebitValueTooSmall",
                      "fields": [],
                      "index": 6,
                      "docs": ["Remain debit value in CDP below the dust amount"]
                    },
                    {
                      "name": "CollateralAmountBelowMinimum",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Remain collateral value in CDP below the dust amount.",
                        "Withdraw all collateral or leave more than the minimum."
                      ]
                    },
                    {
                      "name": "InvalidFeedPrice",
                      "fields": [],
                      "index": 8,
                      "docs": ["Feed price is invalid"]
                    },
                    {
                      "name": "NoDebitValue",
                      "fields": [],
                      "index": 9,
                      "docs": ["No debit value in CDP so that it cannot be settled"]
                    },
                    {
                      "name": "AlreadyShutdown",
                      "fields": [],
                      "index": 10,
                      "docs": ["System has already been shutdown"]
                    },
                    {
                      "name": "MustAfterShutdown",
                      "fields": [],
                      "index": 11,
                      "docs": ["Must after system shutdown"]
                    },
                    {
                      "name": "CollateralNotEnough",
                      "fields": [],
                      "index": 12,
                      "docs": ["Collateral in CDP is not enough"]
                    },
                    {
                      "name": "NotEnoughDebitDecrement",
                      "fields": [],
                      "index": 13,
                      "docs": ["debit value decrement is not enough"]
                    },
                    {
                      "name": "ConvertDebitBalanceFailed",
                      "fields": [],
                      "index": 14,
                      "docs": ["convert debit value to debit balance failed"]
                    },
                    {
                      "name": "LiquidationFailed",
                      "fields": [],
                      "index": 15,
                      "docs": ["Collateral liquidation failed."]
                    },
                    {
                      "name": "TooManyLiquidationContracts",
                      "fields": [],
                      "index": 16,
                      "docs": ["Exceeds `T::MaxLiquidationContracts`."]
                    },
                    {
                      "name": "CollateralContractNotFound",
                      "fields": [],
                      "index": 17,
                      "docs": ["Collateral ERC20 contract not found."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 526,
            "type": {
              "path": ["module_emergency_shutdown", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyShutdown",
                      "fields": [],
                      "index": 0,
                      "docs": ["System has already been shutdown"]
                    },
                    {
                      "name": "MustAfterShutdown",
                      "fields": [],
                      "index": 1,
                      "docs": ["Must after system shutdown"]
                    },
                    {
                      "name": "CanNotRefund",
                      "fields": [],
                      "index": 2,
                      "docs": ["Final redemption is still not opened"]
                    },
                    {
                      "name": "ExistPotentialSurplus",
                      "fields": [],
                      "index": 3,
                      "docs": ["Exist potential surplus, means settlement has not been completed"]
                    },
                    {
                      "name": "ExistUnhandledDebit",
                      "fields": [],
                      "index": 4,
                      "docs": ["Exist unhandled debit, means settlement has not been completed"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 527,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 528,
            "type": {
              "path": ["acala_primitives", "bonding", "ledger", "BondingLedger"],
              "params": [
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "MaxUnlockingChunks",
                  "type": null
                },
                {
                  "name": "MinBond",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "active",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "unlocking",
                      "type": 529,
                      "typeName": "BoundedVec<UnlockChunk<Moment>, MaxUnlockingChunks>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 529,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 530
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 531,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 530,
            "type": {
              "path": ["acala_primitives", "bonding", "ledger", "UnlockChunk"],
              "params": [
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 531,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 530
                }
              },
              "docs": []
            }
          },
          {
            "id": 532,
            "type": {
              "path": ["module_nominees_election", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BelowMinBondThreshold",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "InvalidTargetsLength",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "MaxUnlockChunksExceeded",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "InvalidNominee",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "NominateesCountExceeded",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NotBonded",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 533,
            "type": {
              "path": ["module_homa", "module", "StakingLedger"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bonded",
                      "type": 48,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "unlocking",
                      "type": 126,
                      "typeName": "Vec<UnlockChunk>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 534,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [6, 66]
              },
              "docs": []
            }
          },
          {
            "id": 535,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 4]
              },
              "docs": []
            }
          },
          {
            "id": 536,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 43
                }
              },
              "docs": []
            }
          },
          {
            "id": 537,
            "type": {
              "path": ["module_homa", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BelowMintThreshold",
                      "fields": [],
                      "index": 0,
                      "docs": ["\tThe mint amount is below the threshold."]
                    },
                    {
                      "name": "BelowRedeemThreshold",
                      "fields": [],
                      "index": 1,
                      "docs": ["\tThe redeem amount to request is below the threshold."]
                    },
                    {
                      "name": "ExceededStakingCurrencySoftCap",
                      "fields": [],
                      "index": 2,
                      "docs": ["The mint will cause staking currency of Homa exceed the soft cap."]
                    },
                    {
                      "name": "InsufficientUnclaimedRedemption",
                      "fields": [],
                      "index": 3,
                      "docs": ["UnclaimedRedemption is not enough, this error is not expected."]
                    },
                    {
                      "name": "OutdatedEraIndex",
                      "fields": [],
                      "index": 4,
                      "docs": ["The era index to bump is outdated, must be greater than RelayChainCurrentEra"]
                    },
                    {
                      "name": "FastMatchIsNotAllowed",
                      "fields": [],
                      "index": 5,
                      "docs": ["Redeem request is not allowed to be fast matched."]
                    },
                    {
                      "name": "CannotCompletelyFastMatch",
                      "fields": [],
                      "index": 6,
                      "docs": ["The fast match cannot be matched completely."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 538,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [8, 6]
              },
              "docs": []
            }
          },
          {
            "id": 539,
            "type": {
              "path": ["module_xcm_interface", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XcmFailed",
                      "fields": [],
                      "index": 0,
                      "docs": ["The xcm operation have failed"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 540,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [131, 40]
              },
              "docs": []
            }
          },
          {
            "id": 541,
            "type": {
              "path": ["module_incentives", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnough",
                      "fields": [],
                      "index": 0,
                      "docs": ["Share amount is not enough"]
                    },
                    {
                      "name": "InvalidCurrencyId",
                      "fields": [],
                      "index": 1,
                      "docs": ["Invalid currency id"]
                    },
                    {
                      "name": "InvalidPoolId",
                      "fields": [],
                      "index": 2,
                      "docs": ["Invalid pool id"]
                    },
                    {
                      "name": "InvalidRate",
                      "fields": [],
                      "index": 3,
                      "docs": ["Invalid rate"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 542,
            "type": {
              "path": ["module_nft", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ClassIdNotFound",
                      "fields": [],
                      "index": 0,
                      "docs": ["ClassId not found"]
                    },
                    {
                      "name": "TokenIdNotFound",
                      "fields": [],
                      "index": 1,
                      "docs": ["TokenId not found"]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 2,
                      "docs": ["The operator is not the owner of the token and has no permission"]
                    },
                    {
                      "name": "InvalidQuantity",
                      "fields": [],
                      "index": 3,
                      "docs": ["Quantity is invalid. need >= 1"]
                    },
                    {
                      "name": "NonTransferable",
                      "fields": [],
                      "index": 4,
                      "docs": ["Property of class don't support transfer"]
                    },
                    {
                      "name": "NonBurnable",
                      "fields": [],
                      "index": 5,
                      "docs": ["Property of class don't support burn"]
                    },
                    {
                      "name": "NonMintable",
                      "fields": [],
                      "index": 6,
                      "docs": ["Property of class don't support mint"]
                    },
                    {
                      "name": "CannotDestroyClass",
                      "fields": [],
                      "index": 7,
                      "docs": ["Can not destroy class", "Total issuance is not 0"]
                    },
                    {
                      "name": "Immutable",
                      "fields": [],
                      "index": 8,
                      "docs": ["Cannot perform mutable action"]
                    },
                    {
                      "name": "AttributesTooLarge",
                      "fields": [],
                      "index": 9,
                      "docs": ["Attributes too large"]
                    },
                    {
                      "name": "IncorrectTokenId",
                      "fields": [],
                      "index": 10,
                      "docs": ["The given token ID is not correct"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 543,
            "type": {
              "path": ["module_asset_registry", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadLocation",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "MultiLocationExisted",
                      "fields": [],
                      "index": 1,
                      "docs": ["MultiLocation existed"]
                    },
                    {
                      "name": "AssetIdNotExists",
                      "fields": [],
                      "index": 2,
                      "docs": ["AssetId not exists"]
                    },
                    {
                      "name": "AssetIdExisted",
                      "fields": [],
                      "index": 3,
                      "docs": ["AssetId exists"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 544,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 10, 6]
              },
              "docs": []
            }
          },
          {
            "id": 545,
            "type": {
              "path": ["ecosystem_renvm_bridge", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidRenVmPublicKey",
                      "fields": [],
                      "index": 0,
                      "docs": ["The RenVM split public key is invalid."]
                    },
                    {
                      "name": "InvalidMintSignature",
                      "fields": [],
                      "index": 1,
                      "docs": ["The mint signature is invalid."]
                    },
                    {
                      "name": "SignatureAlreadyUsed",
                      "fields": [],
                      "index": 2,
                      "docs": ["The mint signature has already been used."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 546,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 547,
            "type": {
              "path": ["ecosystem_starport", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientAssetSupplyCap",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Acala -> Compound Gateway",
                        "There are not enough supply on the Compound chain for the lock operation."
                      ]
                    },
                    {
                      "name": "NoticeAlreadyInvoked",
                      "fields": [],
                      "index": 1,
                      "docs": ["Notices from Compound", "The same notice cannot be invoked more than once."]
                    },
                    {
                      "name": "InvalidNoticeInvoker",
                      "fields": [],
                      "index": 2,
                      "docs": ["Only specific Admin account is able to send Notice to be invoked"]
                    },
                    {
                      "name": "InsufficientAssetToUnlock",
                      "fields": [],
                      "index": 3,
                      "docs": ["The Admin account does not have enough asset for the Unlock operation."]
                    },
                    {
                      "name": "InsufficientValidNoticeSignatures",
                      "fields": [],
                      "index": 4,
                      "docs": ["Not enough authorities have signed this notice for it to be effective."]
                    },
                    {
                      "name": "ExceededMaxNumberOfAuthorities",
                      "fields": [],
                      "index": 5,
                      "docs": ["Too many Authorities."]
                    },
                    {
                      "name": "AuthoritiesListCannotBeEmpty",
                      "fields": [],
                      "index": 6,
                      "docs": ["Authorities cannot be empty"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 548,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [6, 8]
              },
              "docs": []
            }
          },
          {
            "id": 549,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [6, 6, 8]
              },
              "docs": []
            }
          },
          {
            "id": 550,
            "type": {
              "path": ["ecosystem_compound_cash", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "YieldIsOlderThanCurrent",
                      "fields": [],
                      "index": 0,
                      "docs": ["The yield has a timestamp older than the current value, so it will never be effective"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 551,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 552
                }
              },
              "docs": []
            }
          },
          {
            "id": 552,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "InboundChannelDetails"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 93,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 553,
                      "typeName": "InboundState",
                      "docs": []
                    },
                    {
                      "name": "message_metadata",
                      "type": 554,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 553,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "InboundState"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Suspended",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 554,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 555
                }
              },
              "docs": []
            }
          },
          {
            "id": 555,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 556]
              },
              "docs": []
            }
          },
          {
            "id": 556,
            "type": {
              "path": ["polkadot_parachain", "primitives", "XcmpMessageFormat"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Signals",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 557,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 4]
              },
              "docs": []
            }
          },
          {
            "id": 558,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 559
                }
              },
              "docs": []
            }
          },
          {
            "id": 559,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "OutboundChannelDetails"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 93,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 560,
                      "typeName": "OutboundState",
                      "docs": []
                    },
                    {
                      "name": "signals_exist",
                      "type": 66,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "first_index",
                      "type": 43,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "last_index",
                      "type": 43,
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 560,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "OutboundState"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Suspended",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 561,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 43]
              },
              "docs": []
            }
          },
          {
            "id": 562,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "QueueConfigData"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 563,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 4, 10]
              },
              "docs": []
            }
          },
          {
            "id": 564,
            "type": {
              "path": ["cumulus_pallet_xcmp_queue", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "fields": [],
                      "index": 0,
                      "docs": ["Failed to send XCM message."]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "fields": [],
                      "index": 1,
                      "docs": ["Bad XCM origin."]
                    },
                    {
                      "name": "BadXcm",
                      "fields": [],
                      "index": 2,
                      "docs": ["Bad XCM data."]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "fields": [],
                      "index": 3,
                      "docs": ["Bad overweight index."]
                    },
                    {
                      "name": "WeightOverLimit",
                      "fields": [],
                      "index": 4,
                      "docs": ["Provided weight is possibly not enough to execute the message."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 565,
            "type": {
              "path": ["pallet_xcm", "pallet", "QueryStatus"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 169,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "maybe_notify",
                          "type": 566,
                          "typeName": "Option<(u8, u8)>",
                          "docs": []
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 169,
                          "typeName": "VersionedMultiLocation",
                          "docs": []
                        },
                        {
                          "name": "is_active",
                          "type": 66,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 568,
                          "typeName": "VersionedResponse",
                          "docs": []
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 566,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 567
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 567,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 567,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [2, 2]
              },
              "docs": []
            }
          },
          {
            "id": 568,
            "type": {
              "path": ["xcm", "VersionedResponse"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": null,
                          "type": 325,
                          "typeName": "v0::Response",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": null,
                          "type": 330,
                          "typeName": "v1::Response",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "name": null,
                          "type": 154,
                          "typeName": "v2::Response",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 569,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 169]
              },
              "docs": []
            }
          },
          {
            "id": 570,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [8, 8, 4]
              },
              "docs": []
            }
          },
          {
            "id": 571,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 572
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 573,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 572,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [169, 4]
              },
              "docs": []
            }
          },
          {
            "id": 573,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 572
                }
              },
              "docs": []
            }
          },
          {
            "id": 574,
            "type": {
              "path": ["pallet_xcm", "pallet", "VersionMigrationStage"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": "Option<Vec<u8>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 575,
            "type": {
              "path": ["pallet_xcm", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "fields": [],
                      "index": 2,
                      "docs": ["The message execution fails the filter."]
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [],
                      "index": 3,
                      "docs": ["The message's weight could not be determined."]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [],
                      "index": 4,
                      "docs": ["The destination `MultiLocation` provided cannot be inverted."]
                    },
                    {
                      "name": "Empty",
                      "fields": [],
                      "index": 5,
                      "docs": ["The assets to be sent are empty."]
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [],
                      "index": 6,
                      "docs": ["Could not re-anchor the assets to declare the fees for the destination chain."]
                    },
                    {
                      "name": "TooManyAssets",
                      "fields": [],
                      "index": 7,
                      "docs": ["Too many assets have been attempted for transfer."]
                    },
                    {
                      "name": "InvalidOrigin",
                      "fields": [],
                      "index": 8,
                      "docs": ["Origin is invalid for sending."]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 9,
                      "docs": ["The version of the `Versioned` value used is not able to be interpreted."]
                    },
                    {
                      "name": "BadLocation",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "fields": [],
                      "index": 11,
                      "docs": ["The referenced subscription could not be found."]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "fields": [],
                      "index": 12,
                      "docs": ["The location is invalid since it already has a subscription from us."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 576,
            "type": {
              "path": ["cumulus_pallet_xcm", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 577,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "ConfigData"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 578,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "PageIndexData"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": []
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter",
                      "docs": []
                    },
                    {
                      "name": "overweight_count",
                      "type": 8,
                      "typeName": "OverweightIndex",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 579,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 580
                }
              },
              "docs": []
            }
          },
          {
            "id": 580,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [4, 10]
              },
              "docs": []
            }
          },
          {
            "id": 581,
            "type": {
              "path": ["cumulus_pallet_dmp_queue", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": ["The message index given is unknown."]
                    },
                    {
                      "name": "OverLimit",
                      "fields": [],
                      "index": 1,
                      "docs": ["The amount of weight given is possibly not enough for executing the message."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 582,
            "type": {
              "path": ["orml_xtokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "fields": [],
                      "index": 0,
                      "docs": ["Asset has no reserve location."]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "fields": [],
                      "index": 1,
                      "docs": ["Not cross-chain transfer."]
                    },
                    {
                      "name": "InvalidDest",
                      "fields": [],
                      "index": 2,
                      "docs": ["Invalid transfer destination."]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "fields": [],
                      "index": 3,
                      "docs": ["Currency is not cross-chain transferable."]
                    },
                    {
                      "name": "UnweighableMessage",
                      "fields": [],
                      "index": 4,
                      "docs": ["The message's weight could not be determined."]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "fields": [],
                      "index": 5,
                      "docs": ["XCM execution failed."]
                    },
                    {
                      "name": "CannotReanchor",
                      "fields": [],
                      "index": 6,
                      "docs": ["Could not re-anchor the assets to declare the fees for the", "destination chain."]
                    },
                    {
                      "name": "InvalidAncestry",
                      "fields": [],
                      "index": 7,
                      "docs": ["Could not get ancestry of asset reserve location."]
                    },
                    {
                      "name": "InvalidAsset",
                      "fields": [],
                      "index": 8,
                      "docs": ["The MultiAsset is invalid."]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "fields": [],
                      "index": 9,
                      "docs": ["The destination `MultiLocation` provided cannot be inverted."]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 10,
                      "docs": ["The version of the `Versioned` value used is not able to be", "interpreted."]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "fields": [],
                      "index": 11,
                      "docs": ["We tried sending distinct asset and fee but they have different", "reserve chains."]
                    },
                    {
                      "name": "ZeroFee",
                      "fields": [],
                      "index": 12,
                      "docs": ["The fee is zero."]
                    },
                    {
                      "name": "ZeroAmount",
                      "fields": [],
                      "index": 13,
                      "docs": ["The transfering asset amount is zero."]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "fields": [],
                      "index": 14,
                      "docs": ["The number of assets to be sent is over the maximum."]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "fields": [],
                      "index": 15,
                      "docs": ["The specified index does not exist in a MultiAssets struct."]
                    },
                    {
                      "name": "FeeNotEnough",
                      "fields": [],
                      "index": 16,
                      "docs": ["Fee is not enough."]
                    },
                    {
                      "name": "NotSupportedMultiLocation",
                      "fields": [],
                      "index": 17,
                      "docs": ["Not supported MultiLocation"]
                    },
                    {
                      "name": "MinXcmFeeNotDefined",
                      "fields": [],
                      "index": 18,
                      "docs": ["MinXcmFee not registered for certain reserve location"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 583,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [83, 83]
              },
              "docs": []
            }
          },
          {
            "id": 584,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [83, 10]
              },
              "docs": []
            }
          },
          {
            "id": 585,
            "type": {
              "path": ["orml_unknown_tokens", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "fields": [],
                      "index": 0,
                      "docs": ["The balance is too low."]
                    },
                    {
                      "name": "BalanceOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": ["The operation will cause balance to overflow."]
                    },
                    {
                      "name": "UnhandledAsset",
                      "fields": [],
                      "index": 2,
                      "docs": ["Unhandled asset."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 586,
            "type": {
              "path": ["orml_xcm", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "fields": [],
                      "index": 0,
                      "docs": ["The message and destination combination was not recognized as being", "reachable."]
                    },
                    {
                      "name": "SendFailure",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The message and destination was recognized as being reachable but",
                        "the operation could not be completed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [],
                      "index": 2,
                      "docs": ["The version of the `Versioned` value used is not able to be", "interpreted."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 587,
            "type": {
              "path": ["module_evm", "module", "AccountInfo"],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "contract_info",
                      "type": 588,
                      "typeName": "Option<ContractInfo>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 588,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 589
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 589,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 589,
            "type": {
              "path": ["module_evm", "module", "ContractInfo"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "maintainer",
                      "type": 34,
                      "typeName": "EvmAddress",
                      "docs": []
                    },
                    {
                      "name": "published",
                      "type": 66,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 590,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [34, 9]
              },
              "docs": []
            }
          },
          {
            "id": 591,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 592,
            "type": {
              "path": ["module_evm", "module", "CodeInfo"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "ref_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 593,
            "type": {
              "path": ["module_evm", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddressNotMapped",
                      "fields": [],
                      "index": 0,
                      "docs": ["Address not mapped"]
                    },
                    {
                      "name": "ContractNotFound",
                      "fields": [],
                      "index": 1,
                      "docs": ["Contract not found"]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 2,
                      "docs": ["No permission"]
                    },
                    {
                      "name": "ContractDevelopmentNotEnabled",
                      "fields": [],
                      "index": 3,
                      "docs": ["Contract development is not enabled"]
                    },
                    {
                      "name": "ContractDevelopmentAlreadyEnabled",
                      "fields": [],
                      "index": 4,
                      "docs": ["Contract development is already enabled"]
                    },
                    {
                      "name": "ContractAlreadyPublished",
                      "fields": [],
                      "index": 5,
                      "docs": ["Contract already published"]
                    },
                    {
                      "name": "ContractExceedsMaxCodeSize",
                      "fields": [],
                      "index": 6,
                      "docs": ["Contract exceeds max code size"]
                    },
                    {
                      "name": "ContractAlreadyExisted",
                      "fields": [],
                      "index": 7,
                      "docs": ["Contract already existed"]
                    },
                    {
                      "name": "OutOfStorage",
                      "fields": [],
                      "index": 8,
                      "docs": ["Storage usage exceeds storage limit"]
                    },
                    {
                      "name": "ChargeFeeFailed",
                      "fields": [],
                      "index": 9,
                      "docs": ["Charge fee failed"]
                    },
                    {
                      "name": "CannotKillContract",
                      "fields": [],
                      "index": 10,
                      "docs": ["Contract cannot be killed due to reference count"]
                    },
                    {
                      "name": "ReserveStorageFailed",
                      "fields": [],
                      "index": 11,
                      "docs": ["Reserve storage failed"]
                    },
                    {
                      "name": "UnreserveStorageFailed",
                      "fields": [],
                      "index": 12,
                      "docs": ["Unreserve storage failed"]
                    },
                    {
                      "name": "ChargeStorageFailed",
                      "fields": [],
                      "index": 13,
                      "docs": ["Charge storage failed"]
                    },
                    {
                      "name": "InvalidDecimals",
                      "fields": [],
                      "index": 14,
                      "docs": ["Invalid decimals"]
                    },
                    {
                      "name": "StrictCallFailed",
                      "fields": [],
                      "index": 15,
                      "docs": ["Strict call failed"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 594,
            "type": {
              "path": ["module_evm_bridge", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExecutionFail",
                      "fields": [],
                      "index": 0,
                      "docs": ["Execution failed"]
                    },
                    {
                      "name": "ExecutionRevert",
                      "fields": [],
                      "index": 1,
                      "docs": ["Execution reverted"]
                    },
                    {
                      "name": "ExecutionFatal",
                      "fields": [],
                      "index": 2,
                      "docs": ["Execution fatal"]
                    },
                    {
                      "name": "ExecutionError",
                      "fields": [],
                      "index": 3,
                      "docs": ["Execution error"]
                    },
                    {
                      "name": "InvalidReturnValue",
                      "fields": [],
                      "index": 4,
                      "docs": ["Invalid return value"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 595,
            "type": {
              "path": ["module_evm_accounts", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccountIdHasMapped",
                      "fields": [],
                      "index": 0,
                      "docs": ["AccountId has mapped"]
                    },
                    {
                      "name": "EthAddressHasMapped",
                      "fields": [],
                      "index": 1,
                      "docs": ["Eth address has mapped"]
                    },
                    {
                      "name": "BadSignature",
                      "fields": [],
                      "index": 2,
                      "docs": ["Bad signature"]
                    },
                    {
                      "name": "InvalidSignature",
                      "fields": [],
                      "index": 3,
                      "docs": ["Invalid signature"]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": ["Account ref count is not zero"]
                    }
                  ]
                }
              },
              "docs": ["Error for evm accounts module."]
            }
          },
          {
            "id": 596,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 597
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 598,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 597,
            "type": {
              "path": ["pallet_authorship", "UncleEntryItem"],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Option<Author>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 598,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 597
                }
              },
              "docs": []
            }
          },
          {
            "id": 599,
            "type": {
              "path": ["pallet_authorship", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "fields": [],
                      "index": 0,
                      "docs": ["The uncle parent not in the chain."]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "fields": [],
                      "index": 1,
                      "docs": ["Uncles already set in the block."]
                    },
                    {
                      "name": "TooManyUncles",
                      "fields": [],
                      "index": 2,
                      "docs": ["Too many uncles."]
                    },
                    {
                      "name": "GenesisUncle",
                      "fields": [],
                      "index": 3,
                      "docs": ["The uncle is genesis."]
                    },
                    {
                      "name": "TooHighUncle",
                      "fields": [],
                      "index": 4,
                      "docs": ["The uncle is too high in chain."]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "fields": [],
                      "index": 5,
                      "docs": ["The uncle is already included."]
                    },
                    {
                      "name": "OldUncle",
                      "fields": [],
                      "index": 6,
                      "docs": ["The uncle isn't recent enough to be included."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 600,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_btree_set", "BoundedBTreeSet"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 601,
                      "typeName": "BTreeSet<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 601,
            "type": {
              "path": ["BTreeSet"],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 602,
            "type": {
              "path": ["module_collator_selection", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MaxCandidatesExceeded",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BelowCandidatesMin",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "StillLocked",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Permission",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "AlreadyCandidate",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "NotCandidate",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "NotNonCandidate",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "NothingToWithdraw",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "RequireSessionKey",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "AlreadyInvulnerable",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "InvalidProof",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "MaxInvulnerablesExceeded",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 603,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 604
                }
              },
              "docs": []
            }
          },
          {
            "id": 604,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [0, 359]
              },
              "docs": []
            }
          },
          {
            "id": 605,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [606, 10]
              },
              "docs": []
            }
          },
          {
            "id": 606,
            "type": {
              "path": ["sp_core", "crypto", "KeyTypeId"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 607,
            "type": {
              "path": ["pallet_session", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [],
                      "index": 0,
                      "docs": ["Invalid ownership proof."]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [],
                      "index": 1,
                      "docs": ["No associated validator ID for account."]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [],
                      "index": 2,
                      "docs": ["Registered duplicate key."]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [],
                      "index": 3,
                      "docs": ["No keys are associated with this account."]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": 4,
                      "docs": ["Key setting account is not live, so it's impossible to associate keys."]
                    }
                  ]
                }
              },
              "docs": ["Error for the session pallet."]
            }
          },
          {
            "id": 608,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 360
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 609,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 609,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 360
                }
              },
              "docs": []
            }
          },
          {
            "id": 610,
            "type": {
              "path": ["sp_consensus_slots", "Slot"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 611,
            "type": {
              "path": ["module_session_manager", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSession",
                      "fields": [],
                      "index": 0,
                      "docs": ["The session is invalid."]
                    },
                    {
                      "name": "InvalidDuration",
                      "fields": [],
                      "index": 1,
                      "docs": ["The duration is invalid."]
                    },
                    {
                      "name": "EstimateNextSessionFailed",
                      "fields": [],
                      "index": 2,
                      "docs": ["Failed to estimate next session."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 612,
            "type": {
              "path": ["nutsfinance_stable_asset", "StableAssetPoolInfo"],
              "params": [
                {
                  "name": "AssetId",
                  "type": 40
                },
                {
                  "name": "AtLeast64BitUnsigned",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pool_asset",
                      "type": 40,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 111,
                      "typeName": "Vec<AssetId>",
                      "docs": []
                    },
                    {
                      "name": "precisions",
                      "type": 112,
                      "typeName": "Vec<AtLeast64BitUnsigned>",
                      "docs": []
                    },
                    {
                      "name": "mint_fee",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    },
                    {
                      "name": "swap_fee",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    },
                    {
                      "name": "redeem_fee",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    },
                    {
                      "name": "total_supply",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "a",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    },
                    {
                      "name": "a_block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "future_a",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    },
                    {
                      "name": "future_a_block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "balances",
                      "type": 112,
                      "typeName": "Vec<Balance>",
                      "docs": []
                    },
                    {
                      "name": "fee_recipient",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "yield_recipient",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "precision",
                      "type": 6,
                      "typeName": "AtLeast64BitUnsigned",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 613,
            "type": {
              "path": ["nutsfinance_stable_asset", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InconsistentStorage",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "InvalidPoolAsset",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "ArgumentsMismatch",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "ArgumentsError",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "PoolNotFound",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Math",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "InvalidPoolValue",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "MintUnderMin",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "SwapUnderMin",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "RedeemUnderMin",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "RedeemOverMax",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 614,
            "type": {
              "path": ["orml_payments", "types", "PaymentDetail"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "asset",
                      "type": 40,
                      "typeName": "AssetIdOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 48,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "incentive_amount",
                      "type": 48,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 615,
                      "typeName": "PaymentState<T>",
                      "docs": []
                    },
                    {
                      "name": "resolver_account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fee_detail",
                      "type": 383,
                      "typeName": "Option<(T::AccountId, BalanceOf<T>)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 615,
            "type": {
              "path": ["orml_payments", "types", "PaymentState"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NeedsReview",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "RefundRequested",
                      "fields": [
                        {
                          "name": "cancel_block",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "PaymentRequested",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 616,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_btree_map", "BoundedBTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 429
                },
                {
                  "name": "V",
                  "type": 617
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 619,
                      "typeName": "BTreeMap<K, V>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 617,
            "type": {
              "path": ["orml_payments", "types", "ScheduledTask"],
              "params": [
                {
                  "name": "Time",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "task",
                      "type": 618,
                      "typeName": "Task",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "Time",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 618,
            "type": {
              "path": ["orml_payments", "types", "Task"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Cancel",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 619,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 429
                },
                {
                  "name": "V",
                  "type": 617
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 620,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 620,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 621
                }
              },
              "docs": []
            }
          },
          {
            "id": 621,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [429, 617]
              },
              "docs": []
            }
          },
          {
            "id": 622,
            "type": {
              "path": ["orml_payments", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidPayment",
                      "fields": [],
                      "index": 0,
                      "docs": ["The selected payment does not exist"]
                    },
                    {
                      "name": "PaymentAlreadyReleased",
                      "fields": [],
                      "index": 1,
                      "docs": ["The selected payment cannot be released"]
                    },
                    {
                      "name": "PaymentAlreadyInProcess",
                      "fields": [],
                      "index": 2,
                      "docs": ["The selected payment already exists and is in process"]
                    },
                    {
                      "name": "InvalidAction",
                      "fields": [],
                      "index": 3,
                      "docs": ["Action permitted only for whitelisted users"]
                    },
                    {
                      "name": "PaymentNeedsReview",
                      "fields": [],
                      "index": 4,
                      "docs": ["Payment is in review state and cannot be modified"]
                    },
                    {
                      "name": "MathError",
                      "fields": [],
                      "index": 5,
                      "docs": ["Unexpeted math error"]
                    },
                    {
                      "name": "RefundNotRequested",
                      "fields": [],
                      "index": 6,
                      "docs": ["Payment request has not been created"]
                    },
                    {
                      "name": "DisputePeriodNotPassed",
                      "fields": [],
                      "index": 7,
                      "docs": ["Dispute period has not passed"]
                    },
                    {
                      "name": "RefundQueueFull",
                      "fields": [],
                      "index": 8,
                      "docs": ["The automatic cancelation queue cannot accept"]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 623,
            "type": {
              "path": ["acala_primitives", "bonding", "ledger", "BondingLedger"],
              "params": [
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "MaxUnlockingChunks",
                  "type": null
                },
                {
                  "name": "MinBond",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "active",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "unlocking",
                      "type": 624,
                      "typeName": "BoundedVec<UnlockChunk<Moment>, MaxUnlockingChunks>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 624,
            "type": {
              "path": ["sp_runtime", "bounded", "bounded_vec", "BoundedVec"],
              "params": [
                {
                  "name": "T",
                  "type": 530
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 531,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 625,
            "type": {
              "path": ["module_earning", "module", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BelowMinBondThreshold",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "MaxUnlockChunksExceeded",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "NotBonded",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 626,
            "type": {
              "path": ["Option"],
              "params": [
                {
                  "name": "T",
                  "type": 627
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 627,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 627,
            "type": {
              "path": ["polkadot_primitives", "v2", "UpgradeRestriction"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 628,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "relay_state_snapshot", "MessagingStateSnapshot"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 9,
                      "typeName": "relay_chain::Hash",
                      "docs": []
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 28,
                      "typeName": "(u32, u32)",
                      "docs": []
                    },
                    {
                      "name": "ingress_channels",
                      "type": 629,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    },
                    {
                      "name": "egress_channels",
                      "type": 629,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 629,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 630
                }
              },
              "docs": []
            }
          },
          {
            "id": 630,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 631]
              },
              "docs": []
            }
          },
          {
            "id": 631,
            "type": {
              "path": ["polkadot_primitives", "v2", "AbridgedHrmpChannel"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "mqc_head",
                      "type": 140,
                      "typeName": "Option<Hash>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 632,
            "type": {
              "path": ["polkadot_primitives", "v2", "AbridgedHostConfiguration"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 633,
            "type": {
              "path": ["cumulus_primitives_parachain_inherent", "MessageQueueChain"],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 9,
                      "typeName": "RelayHash",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 634,
            "type": {
              "path": ["BTreeMap"],
              "params": [
                {
                  "name": "K",
                  "type": 93
                },
                {
                  "name": "V",
                  "type": 633
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 635,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 635,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 636
                }
              },
              "docs": []
            }
          },
          {
            "id": 636,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [93, 633]
              },
              "docs": []
            }
          },
          {
            "id": 637,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 638
                }
              },
              "docs": []
            }
          },
          {
            "id": 638,
            "type": {
              "path": ["polkadot_core_primitives", "OutboundHrmpMessage"],
              "params": [
                {
                  "name": "Id",
                  "type": 93
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 93,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 639,
            "type": {
              "path": ["cumulus_pallet_parachain_system", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "fields": [],
                      "index": 0,
                      "docs": ["Attempt to upgrade validation function while existing upgrade pending"]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "fields": [],
                      "index": 1,
                      "docs": ["Polkadot currently prohibits this parachain from upgrading its validation function"]
                    },
                    {
                      "name": "TooBig",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "fields": [],
                      "index": 3,
                      "docs": ["The inherent which supplies the validation data did not run this block"]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "fields": [],
                      "index": 4,
                      "docs": ["The inherent which supplies the host configuration did not run this block"]
                    },
                    {
                      "name": "NotScheduled",
                      "fields": [],
                      "index": 5,
                      "docs": ["No validation function upgrade is currently scheduled."]
                    },
                    {
                      "name": "NothingAuthorized",
                      "fields": [],
                      "index": 6,
                      "docs": ["No code upgrade has been authorized."]
                    },
                    {
                      "name": "Unauthorized",
                      "fields": [],
                      "index": 7,
                      "docs": ["The given code upgrade has not been authorized."]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 640,
            "type": {
              "path": ["pallet_sudo", "pallet", "Error"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [],
                      "index": 0,
                      "docs": ["Sender must be the Sudo account"]
                    }
                  ]
                }
              },
              "docs": ["Error for the Sudo pallet"]
            }
          },
          {
            "id": 641,
            "type": {
              "path": ["acala_primitives", "unchecked_extrinsic", "AcalaUncheckedExtrinsic"],
              "params": [
                {
                  "name": "Call",
                  "type": 224
                },
                {
                  "name": "Extra",
                  "type": 642
                },
                {
                  "name": "ConvertEthTx",
                  "type": null
                },
                {
                  "name": "StorageDepositPerByte",
                  "type": 653
                },
                {
                  "name": "TxFeePerGas",
                  "type": 654
                },
                {
                  "name": "CheckPayerTx",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 655,
                      "typeName": "UncheckedExtrinsic<Address, Call, AcalaMultiSignature, Extra>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 642,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [643, 644, 645, 646, 647, 649, 650, 651, 652]
              },
              "docs": []
            }
          },
          {
            "id": 643,
            "type": {
              "path": ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 644,
            "type": {
              "path": ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 645,
            "type": {
              "path": ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 646,
            "type": {
              "path": ["frame_system", "extensions", "check_genesis", "CheckGenesis"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 647,
            "type": {
              "path": ["frame_system", "extensions", "check_mortality", "CheckMortality"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 648,
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 648,
            "type": {
              "path": ["sp_runtime", "generic", "era", "Era"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 134,
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 135,
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 138,
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 139,
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 143,
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 144,
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 145,
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 146,
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 147,
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 148,
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 149,
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 153,
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 154,
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 155,
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 156,
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 157,
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 158,
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 159,
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 161,
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 162,
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 163,
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 164,
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 165,
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 166,
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 167,
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 177,
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 178,
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 179,
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 181,
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 183,
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 184,
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 185,
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 186,
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 187,
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 188,
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 189,
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 193,
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 194,
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 196,
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 197,
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 198,
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 199,
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 202,
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 203,
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 204,
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 205,
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 206,
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 207,
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 208,
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 209,
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 211,
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 212,
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 213,
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 214,
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 215,
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 216,
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 217,
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 218,
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 219,
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 220,
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 221,
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 222,
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 223,
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 224,
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 225,
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 226,
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 227,
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 228,
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 229,
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 230,
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 231,
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 232,
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 233,
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 234,
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 235,
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 236,
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 237,
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 238,
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 239,
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 240,
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 241,
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 242,
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 243,
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 244,
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 245,
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 246,
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 247,
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 248,
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 249,
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 250,
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 251,
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 252,
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 253,
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 254,
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 649,
            "type": {
              "path": ["runtime_common", "check_nonce", "CheckNonce"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 86,
                      "typeName": "T::Index",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 650,
            "type": {
              "path": ["frame_system", "extensions", "check_weight", "CheckWeight"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 651,
            "type": {
              "path": ["module_evm", "SetEvmOrigin"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 652,
            "type": {
              "path": ["module_transaction_payment", "ChargeTransactionPayment"],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 48,
                      "typeName": "PalletBalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 653,
            "type": {
              "path": ["mandala_runtime", "StorageDepositPerByte"],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 654,
            "type": {
              "path": ["mandala_runtime", "TxFeePerGas"],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 655,
            "type": {
              "path": ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"],
              "params": [
                {
                  "name": "Address",
                  "type": 230
                },
                {
                  "name": "Call",
                  "type": 224
                },
                {
                  "name": "Signature",
                  "type": 656
                },
                {
                  "name": "Extra",
                  "type": 642
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 656,
            "type": {
              "path": ["acala_primitives", "signature", "AcalaMultiSignature"],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 237,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 239,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 240,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": "[u8; 65]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Eip1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": "[u8; 65]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "AcalaEip712",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": "[u8; 65]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" The full account information for a particular account ID."]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [" Total extrinsics count for the current block."]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [" The current weight for the block."]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [" Total length (in bytes) for all extrinsics put together, for the current block."]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Map of block numbers to block hashes."]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [" Extrinsics data for the current block (maps an extrinsic's index to its data)."]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The current block number being processed. Set by `execute_block`."]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Hash of the previous block."]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [" Digest of the current block, also part of the block header."]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The number of events in the `Events<T>` list."]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 9,
                    "value": 200
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 201
                },
                "fallback": "0x00",
                "docs": [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 199
                },
                "fallback": "0x00",
                "docs": [" The execution phase of the block."]
              }
            ]
          },
          "calls": {
            "type": 202
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 207,
              "value": "0xe0d1a93e010000000088526a7400000090cd2405000000000170ea3fd44500000001002ca07d5100000001000000000000000090cd240500000000017046f2c068000000010088526a7400000001005cb2ec2200000090cd240500000000000000",
              "docs": [" Block & extrinsics weights: base values and limits."]
            },
            {
              "name": "BlockLength",
              "type": 211,
              "value": "0x000038000000500000005000",
              "docs": [" The maximum length of a block (in bytes)."]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x2c010000",
              "docs": [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
            },
            {
              "name": "DbWeight",
              "type": 213,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [" The weight of runtime database operations the runtime can invoke."]
            },
            {
              "name": "Version",
              "type": 214,
              "value": "0x1c6d616e64616c611c6d616e64616c61010000002e0800000000000034df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000dd718d5cc53262d401000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a8010000006ef953004ba30e5901000000955e168e0cfb340901000000e3df3f2aa8a5cc5702000000ea93e3f16f3d6962020000000100000000",
              "docs": [" Get the chain's current version."]
            },
            {
              "name": "SS58Prefix",
              "type": 43,
              "value": "0x2a00",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 218
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [" Current time for the current block."]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Did the timestamp get updated in this block?"]
              }
            ]
          },
          "calls": {
            "type": 219
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0x7017000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 1
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 220
                  }
                },
                "fallback": "0x00",
                "docs": [" Items to be executed, indexed by the block number that they should be executed on."]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 10,
                    "value": 28
                  }
                },
                "fallback": "0x00",
                "docs": [" Lookup from identity to the block number and index of the task."]
              }
            ]
          },
          "calls": {
            "type": 225
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x00743ba40b000000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 380
          },
          "index": 2
        },
        {
          "name": "TransactionPause",
          "storage": {
            "prefix": "TransactionPause",
            "items": [
              {
                "name": "PausedTransactions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 205,
                    "value": 31
                  }
                },
                "fallback": "0x00",
                "docs": [" The paused transaction map", "", " map (PalletNameBytes, FunctionNameBytes) => Option<()>"]
              },
              {
                "name": "PausedEvmPrecompiles",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 34,
                    "value": 31
                  }
                },
                "fallback": "0x00",
                "docs": [" The paused EVM precompile map", "", " map (PrecompileAddress) => Option<()>"]
              }
            ]
          },
          "calls": {
            "type": 227
          },
          "events": {
            "type": 33
          },
          "constants": [],
          "errors": {
            "type": 381
          },
          "index": 3
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "items": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 382
                  }
                },
                "fallback": "0x00",
                "docs": [" The request status of a given hash."]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 384
                  }
                },
                "fallback": "0x00",
                "docs": [" The preimages stored by this pallet."]
              }
            ]
          },
          "calls": {
            "type": 228
          },
          "events": {
            "type": 36
          },
          "constants": [],
          "errors": {
            "type": 385
          },
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" The total units issued in the system."]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 386
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 390
                  }
                },
                "fallback": "0x00",
                "docs": [" Named reserves on some account balances."]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 394
                },
                "fallback": "0x00",
                "docs": [" Storage version of the pallet.", "", " This is set to v2.0.0 for new networks."]
              }
            ]
          },
          "calls": {
            "type": 229
          },
          "events": {
            "type": 37
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" The minimum amount required to keep an account open."]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x07000000",
              "docs": [" The maximum number of named reserves that can exist on an account."]
            }
          ],
          "errors": {
            "type": 395
          },
          "index": 10
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" The total issuance of a token type."]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 396,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 396,
                    "value": 400
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 396,
                    "value": 401
                  }
                },
                "fallback": "0x00",
                "docs": [" Named reserves on some account balances."]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 39
          },
          "constants": [
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x07000000",
              "docs": [" The maximum number of named reserves that can exist on an account."]
            }
          ],
          "errors": {
            "type": 404
          },
          "index": 11
        },
        {
          "name": "Currencies",
          "storage": null,
          "calls": {
            "type": 231
          },
          "events": {
            "type": 45
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "type": 40,
              "value": "0x0000",
              "docs": [" The native currency id"]
            },
            {
              "name": "Erc20HoldingAccount",
              "type": 34,
              "value": "0x000000000000000000ff00000000000000000000",
              "docs": [" Used as temporary account for ERC20 token `withdraw` and `deposit`."]
            }
          ],
          "errors": {
            "type": 405
          },
          "index": 12
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "VestingSchedules",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 406
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Vesting schedules of an account.",
                  "",
                  " VestingSchedules: map AccountId => Vec<VestingSchedule>"
                ]
              }
            ]
          },
          "calls": {
            "type": 232
          },
          "events": {
            "type": 46
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [" The minimum amount transferred to call `vested_transfer`."]
            }
          ],
          "errors": {
            "type": 407
          },
          "index": 13
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 50
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": [" The next fee multiplier.", "", " NextFeeMultiplier: Multiplier"]
              },
              {
                "name": "AlternativeFeeSwapPath",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 408
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The alternative fee swap path of accounts.",
                  "",
                  " AlternativeFeeSwapPath: map AccountId => Option<Vec<CurrencyId>>"
                ]
              },
              {
                "name": "GlobalFeeSwapPath",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 408
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The global fee swap path.",
                  " The path includes `DefaultFeeTokens` trading path, and foreign asset trading path.",
                  "",
                  " GlobalFeeSwapPath: map CurrencyId => Option<Vec<CurrencyId>>"
                ]
              },
              {
                "name": "PoolSize",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The size of fee pool in native token. During `initialize_pool` this amount of native token",
                  " will be transferred from `TreasuryAccount` to sub account of `PalletId`.",
                  "",
                  " PoolSize: map CurrencyId => Balance"
                ]
              },
              {
                "name": "TokenExchangeRate",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 50
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The exchange rate between the given currency and native token.",
                  " This value is updated when upon swap from dex.",
                  "",
                  " TokenExchangeRate: map CurrencyId => Option<Ratio>"
                ]
              },
              {
                "name": "SwapBalanceThreshold",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The balance threshold to trigger swap from dex, normally the value is gt ED of native asset.",
                  "",
                  " SwapBalanceThreshold: map CurrencyId => Balance"
                ]
              }
            ]
          },
          "calls": {
            "type": 234
          },
          "events": {
            "type": 49
          },
          "constants": [
            {
              "name": "NativeCurrencyId",
              "type": 40,
              "value": "0x0000",
              "docs": [" Native currency id, the actual received currency type as fee for", " treasury. Should be ACA"]
            },
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0x00e1f505000000000000000000000000",
              "docs": [" The fee to be paid for making a transaction; the per-byte portion."]
            },
            {
              "name": "OperationalFeeMultiplier",
              "type": 8,
              "value": "0x00407a10f35a0000",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "TipPerWeightStep",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The step amount of tips required to effect transaction priority."]
            },
            {
              "name": "MaxTipsOfPriority",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": [
                " The maximum value of tips that affect the priority.",
                " Set the maximum value of tips to prevent affecting the unsigned extrinsic."
              ]
            },
            {
              "name": "AlternativeFeeSwapDeposit",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" Deposit for setting an Alternative fee swap"]
            },
            {
              "name": "MaxSwapSlippageCompareToOracle",
              "type": 50,
              "value": "0x00008a5d784563010000000000000000",
              "docs": [" When swap with DEX, the acceptable max slippage for the price from oracle."]
            },
            {
              "name": "TradingPathLimit",
              "type": 4,
              "value": "0x04000000",
              "docs": [" The limit for length of trading path"]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f66656573",
              "docs": [" PalletId used to derivate sub account."]
            },
            {
              "name": "TreasuryAccount",
              "type": 0,
              "value": "0x6d6f646c6163612f747273790000000000000000000000000000000000000000",
              "docs": [" Treasury account used to transfer balance to sub account of `PalletId`."]
            },
            {
              "name": "CustomFeeSurplus",
              "type": 195,
              "value": "0x32",
              "docs": [" Custom fee surplus if not payed with native asset."]
            },
            {
              "name": "AlternativeFeeSurplus",
              "type": 195,
              "value": "0x19",
              "docs": [" Alternative fee surplus if not payed with native asset."]
            },
            {
              "name": "DefaultFeeTokens",
              "type": 111,
              "value": "0x100001000200030014",
              "docs": [" Default fee tokens used in tx fee pool."]
            }
          ],
          "errors": {
            "type": 410
          },
          "index": 14
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Number of proposals that have been made."]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 411
                  }
                },
                "fallback": "0x00",
                "docs": [" Proposals that have been made."]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 412
                },
                "fallback": "0x00",
                "docs": [" Proposal indices that have been approved but not yet awarded."]
              }
            ]
          },
          "calls": {
            "type": 244
          },
          "events": {
            "type": 51
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 414,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" Minimum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 296,
              "value": "0x01005039278c0400000000000000000000",
              "docs": [" Maximum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x201c0000",
              "docs": [" Period between successive spends."]
            },
            {
              "name": "Burn",
              "type": 414,
              "value": "0x00000000",
              "docs": [" Percentage of spare funds (if any) that are burnt per spend period."]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f74727379",
              "docs": [" The treasury's pallet id, used for deriving its sovereign account ID."]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": {
            "type": 415
          },
          "index": 20
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "items": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Number of bounty proposals that have been made."]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 416
                  }
                },
                "fallback": "0x00",
                "docs": [" Bounties that have been made."]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 418
                  }
                },
                "fallback": "0x00",
                "docs": [" The description of each bounty."]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "plain": 412
                },
                "fallback": "0x00",
                "docs": [" Bounty indices that have been approved but not yet funded."]
              }
            ]
          },
          "calls": {
            "type": 245
          },
          "events": {
            "type": 52
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The amount held on deposit for placing a bounty proposal."]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": "0x201c0000",
              "docs": [" The delay period for which a bounty beneficiary need to wait before claim the payout."]
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [" Bounty duration in blocks."]
            },
            {
              "name": "CuratorDepositMultiplier",
              "type": 414,
              "value": "0x20a10700",
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "type": 296,
              "value": "0x0100407a10f35a00000000000000000000",
              "docs": [" Maximum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "CuratorDepositMin",
              "type": 296,
              "value": "0x010010a5d4e80000000000000000000000",
              "docs": [" Minimum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": "0x005039278c0400000000000000000000",
              "docs": [" Minimum value for a bounty."]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The amount held on deposit per byte within the tip report reason or bounty description."]
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "errors": {
            "type": 419
          },
          "index": 21
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "items": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 9,
                    "value": 420
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 246
          },
          "events": {
            "type": 53
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The amount held on deposit per byte within the tip report reason or bounty description."]
            },
            {
              "name": "TipCountdown",
              "type": 4,
              "value": "0x201c0000",
              "docs": [" The period for which a tip remains open after is has achieved threshold tippers."]
            },
            {
              "name": "TipFindersFee",
              "type": 195,
              "value": "0x0a",
              "docs": [" The percent of the final tip which goes to the original reporter of the tip."]
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The amount held on deposit for placing a tip report."]
            }
          ],
          "errors": {
            "type": 421
          },
          "index": 22
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 247
          },
          "events": {
            "type": 54
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [" The limit on the number of batched calls."]
            }
          ],
          "errors": {
            "type": 422
          },
          "index": 30
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 423,
                    "value": 424
                  }
                },
                "fallback": "0x00",
                "docs": [" The set of open multisig operations."]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 1,
                    "value": 425
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 249
          },
          "events": {
            "type": 55
          },
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": "0x00ca9a3b000000000000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "type": 43,
              "value": "0x6400",
              "docs": [" The maximum amount of signatories allowed in the multisig."]
            }
          ],
          "errors": {
            "type": 426
          },
          "index": 31
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 427
                  }
                },
                "fallback": "0x00",
                "docs": [" The set of recoverable accounts and their recovery configuration."]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 429,
                    "value": 430
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "type": 252
          },
          "events": {
            "type": 57
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "type": 4,
              "value": "0x09000000",
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration.",
                "",
                " NOTE: The threshold programmed in this Pallet uses u16, so it does",
                " not really make sense to have a limit here greater than u16::MAX.",
                " But also, that is a lot more than you should probably set this value",
                " to anyway..."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "errors": {
            "type": 431
          },
          "index": 32
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 432
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 436
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [" The announcements made by the proxy (key)."]
              }
            ]
          },
          "calls": {
            "type": 253
          },
          "events": {
            "type": 58
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x0028f9d8d10100000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x0001b2c4000000000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": [" The maximum amount of proxies allowed for a single account."]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": [" The maximum amount of time-delayed announcements that are allowed to be pending."]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x0028f9d8d10100000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x00026489010000000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 440
          },
          "index": 33
        },
        {
          "name": "IdleScheduler",
          "storage": {
            "prefix": "IdleScheduler",
            "items": [
              {
                "name": "Tasks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 61
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The schedule tasks waiting to dispatch. After task is dispatched, it's removed.",
                  "",
                  " Tasks: map Nonce => Task"
                ]
              },
              {
                "name": "NextTaskId",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The task id used to index tasks."]
              },
              {
                "name": "PreviousRelayBlockNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" A temporary variable used to check if should skip dispatch schedule task or not."]
              }
            ]
          },
          "calls": {
            "type": 255
          },
          "events": {
            "type": 60
          },
          "constants": [
            {
              "name": "MinimumWeightRemainInBlock",
              "type": 8,
              "value": "0x00e40b5402000000",
              "docs": [" The minimum weight that should remain before idle tasks are dispatched."]
            },
            {
              "name": "DisableBlockThreshold",
              "type": 4,
              "value": "0x06000000",
              "docs": [
                " Number of Relay Chain blocks skipped to disable `on_idle` dispatching scheduled tasks,",
                " this shuts down idle-scheduler when block production is slower than this number of",
                " relaychain blocks."
              ]
            }
          ],
          "errors": null,
          "index": 34
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 4,
                    "value": 441
                  }
                },
                "fallback": "0x00",
                "docs": [" The lookup from index to account."]
              }
            ]
          },
          "calls": {
            "type": 256
          },
          "events": {
            "type": 64
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The deposit needed for reserving an index."]
            }
          ],
          "errors": {
            "type": 442
          },
          "index": 40
        },
        {
          "name": "GeneralCouncil",
          "storage": {
            "prefix": "GeneralCouncil",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 443
                },
                "fallback": "0x00",
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 224
                  }
                },
                "fallback": "0x00",
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 444
                  }
                },
                "fallback": "0x00",
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The prime member that helps determine the default vote behavior in case of absentations."]
              }
            ]
          },
          "calls": {
            "type": 257
          },
          "events": {
            "type": 65
          },
          "constants": [],
          "errors": {
            "type": 445
          },
          "index": 50
        },
        {
          "name": "GeneralCouncilMembership",
          "storage": {
            "prefix": "GeneralCouncilMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 446
                },
                "fallback": "0x00",
                "docs": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": {
            "type": 258
          },
          "events": {
            "type": 67
          },
          "constants": [],
          "errors": {
            "type": 447
          },
          "index": 51
        },
        {
          "name": "FinancialCouncil",
          "storage": {
            "prefix": "FinancialCouncil",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 443
                },
                "fallback": "0x00",
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 224
                  }
                },
                "fallback": "0x00",
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 444
                  }
                },
                "fallback": "0x00",
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The prime member that helps determine the default vote behavior in case of absentations."]
              }
            ]
          },
          "calls": {
            "type": 259
          },
          "events": {
            "type": 68
          },
          "constants": [],
          "errors": {
            "type": 448
          },
          "index": 52
        },
        {
          "name": "FinancialCouncilMembership",
          "storage": {
            "prefix": "FinancialCouncilMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 446
                },
                "fallback": "0x00",
                "docs": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": {
            "type": 260
          },
          "events": {
            "type": 69
          },
          "constants": [],
          "errors": {
            "type": 449
          },
          "index": 53
        },
        {
          "name": "HomaCouncil",
          "storage": {
            "prefix": "HomaCouncil",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 443
                },
                "fallback": "0x00",
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 224
                  }
                },
                "fallback": "0x00",
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 444
                  }
                },
                "fallback": "0x00",
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The prime member that helps determine the default vote behavior in case of absentations."]
              }
            ]
          },
          "calls": {
            "type": 261
          },
          "events": {
            "type": 70
          },
          "constants": [],
          "errors": {
            "type": 450
          },
          "index": 54
        },
        {
          "name": "HomaCouncilMembership",
          "storage": {
            "prefix": "HomaCouncilMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 446
                },
                "fallback": "0x00",
                "docs": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": {
            "type": 262
          },
          "events": {
            "type": 71
          },
          "constants": [],
          "errors": {
            "type": 451
          },
          "index": 55
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 443
                },
                "fallback": "0x00",
                "docs": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 224
                  }
                },
                "fallback": "0x00",
                "docs": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 444
                  }
                },
                "fallback": "0x00",
                "docs": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The prime member that helps determine the default vote behavior in case of absentations."]
              }
            ]
          },
          "calls": {
            "type": 263
          },
          "events": {
            "type": 72
          },
          "constants": [],
          "errors": {
            "type": 452
          },
          "index": 56
        },
        {
          "name": "TechnicalCommitteeMembership",
          "storage": {
            "prefix": "TechnicalCommitteeMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 446
                },
                "fallback": "0x00",
                "docs": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": {
            "type": 264
          },
          "events": {
            "type": 73
          },
          "constants": [],
          "errors": {
            "type": 453
          },
          "index": 57
        },
        {
          "name": "Authority",
          "storage": {
            "prefix": "Authority",
            "items": [
              {
                "name": "NextTaskIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "SavedCalls",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 454
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 265
          },
          "events": {
            "type": 74
          },
          "constants": [],
          "errors": {
            "type": 455
          },
          "index": 70
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 456
                },
                "fallback": "0x00",
                "docs": [" The current elected members.", "", " Invariant: Always sorted based on account id."]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "plain": 456
                },
                "fallback": "0x00",
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 97
                },
                "fallback": "0x00",
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The total number of vote rounds that have happened, excluding the upcoming one."]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 458
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 268
          },
          "events": {
            "type": 96
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 44,
              "value": "0x6163612f70687265",
              "docs": [" Identifier for the elections-phragmen pallet's lock"]
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" How much should be locked up in order to submit one's candidacy."]
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": "0x00c817a8040000000000000000000000",
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The amount of bond that need to be locked for each vote (32 bytes)."]
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": "0x0d000000",
              "docs": [" Number of members to elect."]
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": "0x07000000",
              "docs": [" Number of runners_up to keep."]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0xe0c40000",
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            },
            {
              "name": "MaxCandidates",
              "type": 4,
              "value": "0xe8030000",
              "docs": [
                " The maximum number of candidates in a phragmen election.",
                "",
                " Warning: The election happens onchain, and this value will determine",
                " the size of the election. When this limit is reached no more",
                " candidates are accepted in the election."
              ]
            },
            {
              "name": "MaxVoters",
              "type": 4,
              "value": "0x10270000",
              "docs": [
                " The maximum number of voters to allow in a phragmen election.",
                "",
                " Warning: This impacts the size of the election which is run onchain.",
                " When the limit is reached the new voters are ignored."
              ]
            }
          ],
          "errors": {
            "type": 459
          },
          "index": 71
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The number of (public) proposals that have been made so far."]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 460
                },
                "fallback": "0x00",
                "docs": [" The public proposals. Unsorted. The second item is the proposal's hash."]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 462
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 463
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The next free referendum index, aka the number of referenda started so far."]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 464
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 467
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 472
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 473
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 66
                  }
                },
                "fallback": "0x00",
                "docs": [" Record of all proposals that have been subject to emergency cancellation."]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 474
                },
                "fallback": "0x00",
                "docs": [" Storage version of the pallet.", "", " New networks start with last version."]
              }
            ]
          },
          "calls": {
            "type": 270
          },
          "events": {
            "type": 99
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0x58020000",
              "docs": [" How often (in blocks) new public referenda are launched."]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0x2c010000",
              "docs": [" How often (in blocks) to check for new votes."]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The minimum amount to be used as a deposit for a public referendum proposal."]
            },
            {
              "name": "InstantAllowed",
              "type": 66,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x2c010000",
              "docs": [" Minimum voting period allowed for a fast-track referendum."]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0x05000000",
              "docs": [" Period in blocks where an external proposal may not be re-submitted after being vetoed."]
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0x00e1f505000000000000000000000000",
              "docs": [" The amount of balance that must be deposited per byte of preimage stored."]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": "0x64000000",
              "docs": [" The maximum number of public proposals that can exist at any time."]
            }
          ],
          "errors": {
            "type": 475
          },
          "index": 72
        },
        {
          "name": "AcalaOracle",
          "storage": {
            "prefix": "AcalaOracle",
            "items": [
              {
                "name": "RawValues",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 396,
                    "value": 476
                  }
                },
                "fallback": "0x00",
                "docs": [" Raw values for each oracle operators"]
              },
              {
                "name": "Values",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 476
                  }
                },
                "fallback": "0x00",
                "docs": [" Up to date combined value from Raw Values"]
              },
              {
                "name": "HasDispatched",
                "modifier": "Default",
                "type": {
                  "plain": 477
                },
                "fallback": "0x00",
                "docs": [" If an oracle operator has fed a value in this block"]
              }
            ]
          },
          "calls": {
            "type": 273
          },
          "events": {
            "type": 104
          },
          "constants": [
            {
              "name": "RootOperatorAccountId",
              "type": 0,
              "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
              "docs": [" The root operator account id, record all sudo feeds on this account."]
            },
            {
              "name": "MaxHasDispatchedSize",
              "type": 4,
              "value": "0x28000000",
              "docs": [" Maximum size of HasDispatched"]
            }
          ],
          "errors": {
            "type": 479
          },
          "index": 80
        },
        {
          "name": "OperatorMembershipAcala",
          "storage": {
            "prefix": "OperatorMembershipAcala",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 480
                },
                "fallback": "0x00",
                "docs": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": {
            "type": 274
          },
          "events": {
            "type": 107
          },
          "constants": [],
          "errors": {
            "type": 481
          },
          "index": 82
        },
        {
          "name": "Auction",
          "storage": {
            "prefix": "Auction",
            "items": [
              {
                "name": "Auctions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 482
                  }
                },
                "fallback": "0x00",
                "docs": [" Stores on-going and future auctions. Closed auction are removed."]
              },
              {
                "name": "AuctionsIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Track the next auction ID."]
              },
              {
                "name": "AuctionEndTime",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 28,
                    "value": 31
                  }
                },
                "fallback": "0x00",
                "docs": [" Index auctions by end time."]
              }
            ]
          },
          "calls": {
            "type": 275
          },
          "events": {
            "type": 108
          },
          "constants": [],
          "errors": {
            "type": 483
          },
          "index": 100
        },
        {
          "name": "Rewards",
          "storage": {
            "prefix": "Rewards",
            "items": [
              {
                "name": "PoolInfos",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 131,
                    "value": 484
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [" Record reward pool info.", "", " map PoolId => PoolInfo"]
              },
              {
                "name": "SharesAndWithdrawnRewards",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 489,
                    "value": 490
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Record share amount, reward currency and withdrawn reward amount for",
                  " specific `AccountId` under `PoolId`.",
                  "",
                  " double_map (PoolId, AccountId) => (Share, BTreeMap<CurrencyId, Balance>)"
                ]
              }
            ]
          },
          "calls": {
            "type": 276
          },
          "events": null,
          "constants": [],
          "errors": {
            "type": 492
          },
          "index": 101
        },
        {
          "name": "OrmlNFT",
          "storage": {
            "prefix": "OrmlNFT",
            "items": [
              {
                "name": "NextClassId",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Next available class ID."]
              },
              {
                "name": "NextTokenId",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 8
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [" Next available token ID."]
              },
              {
                "name": "Classes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 493
                  }
                },
                "fallback": "0x00",
                "docs": [" Store class info.", "", " Returns `None` if class info not set or removed."]
              },
              {
                "name": "Tokens",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 312,
                    "value": 496
                  }
                },
                "fallback": "0x00",
                "docs": [" Store token info.", "", " Returns `None` if token info not set or removed."]
              },
              {
                "name": "TokensByOwner",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat", "Blake2_128Concat"],
                    "key": 498,
                    "value": 31
                  }
                },
                "fallback": "0x",
                "docs": [" Token existence check by owner and class ID."]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": {
            "type": 499
          },
          "index": 102
        },
        {
          "name": "Prices",
          "storage": {
            "prefix": "Prices",
            "items": [
              {
                "name": "LockedPrice",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 50
                  }
                },
                "fallback": "0x00",
                "docs": [" Mapping from currency id to it's locked price", "", " map CurrencyId => Option<Price>"]
              }
            ]
          },
          "calls": {
            "type": 277
          },
          "events": {
            "type": 109
          },
          "constants": [
            {
              "name": "GetStableCurrencyId",
              "type": 40,
              "value": "0x0001",
              "docs": [" The stable currency id, it should be AUSD in Acala."]
            },
            {
              "name": "StableCurrencyFixedPrice",
              "type": 50,
              "value": "0x000064a7b3b6e00d0000000000000000",
              "docs": [" The fixed prices of stable currency, it should be 1 USD in Acala."]
            },
            {
              "name": "GetStakingCurrencyId",
              "type": 40,
              "value": "0x0002",
              "docs": [" The staking currency id, it should be DOT in Acala."]
            },
            {
              "name": "GetLiquidCurrencyId",
              "type": 40,
              "value": "0x0003",
              "docs": [" The liquid currency id, it should be LDOT in Acala."]
            },
            {
              "name": "RewardRatePerRelaychainBlock",
              "type": 50,
              "value": "0x000659cd050000000000000000000000",
              "docs": [
                " The staking reward rate per relaychain block for StakingCurrency.",
                " In fact, the staking reward is not settled according to the block on relaychain."
              ]
            }
          ],
          "errors": {
            "type": 500
          },
          "index": 110
        },
        {
          "name": "Dex",
          "storage": {
            "prefix": "Dex",
            "items": [
              {
                "name": "LiquidityPool",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 113,
                    "value": 486
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Liquidity pool for TradingPair.",
                  "",
                  " LiquidityPool: map TradingPair => (Balance, Balance)"
                ]
              },
              {
                "name": "TradingPairStatuses",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 113,
                    "value": 501
                  }
                },
                "fallback": "0x00",
                "docs": [" Status for TradingPair.", "", " TradingPairStatuses: map TradingPair => TradingPairStatus"]
              },
              {
                "name": "ProvisioningPool",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 503,
                    "value": 486
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Provision of TradingPair by AccountId.",
                  "",
                  " ProvisioningPool: double_map TradingPair, AccountId => (Balance,",
                  " Balance)"
                ]
              },
              {
                "name": "InitialShareExchangeRates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 113,
                    "value": 504
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Initial exchange rate, used to calculate the dex share amount for founders of provisioning",
                  "",
                  " InitialShareExchangeRates: map TradingPair => (ExchangeRate, ExchangeRate)"
                ]
              }
            ]
          },
          "calls": {
            "type": 278
          },
          "events": {
            "type": 110
          },
          "constants": [
            {
              "name": "GetExchangeFee",
              "type": 28,
              "value": "0x01000000e8030000",
              "docs": [
                " Trading fee rate",
                " The first item of the tuple is the numerator of the fee rate, second",
                " item is the denominator, fee_rate = numerator / denominator,",
                " use (u32, u32) over `Rate` type to minimize internal division",
                " operation."
              ]
            },
            {
              "name": "TradingPathLimit",
              "type": 4,
              "value": "0x04000000",
              "docs": [" The limit for length of trading path"]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f6465786d",
              "docs": [" The DEX's module id, keep all assets in DEX."]
            },
            {
              "name": "ExtendedProvisioningBlocks",
              "type": 4,
              "value": "0x40380000",
              "docs": [" The extended provisioning blocks since the `not_before` of provisioning."]
            }
          ],
          "errors": {
            "type": 505
          },
          "index": 111
        },
        {
          "name": "DexOracle",
          "storage": {
            "prefix": "DexOracle",
            "items": [
              {
                "name": "Cumulatives",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 113,
                    "value": 506
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Price cumulatives for TradingPair.",
                  "",
                  " Cumulatives: map TradingPair => (Cumulative0, Cumulative1, LastUpdateTimestamp)"
                ]
              },
              {
                "name": "AveragePrices",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 113,
                    "value": 509
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Average prices for TradingPair.",
                  "",
                  " AveragePrices: map TradingPair => (AveragePrice0, AveragePrice1, LastCumulative0,",
                  " LastCumulative1, LastUpdatePriceTimestamp, InteralToUpdatePrice)"
                ]
              }
            ]
          },
          "calls": {
            "type": 279
          },
          "events": null,
          "constants": [],
          "errors": {
            "type": 510
          },
          "index": 112
        },
        {
          "name": "AggregatedDex",
          "storage": {
            "prefix": "AggregatedDex",
            "items": [
              {
                "name": "AggregatedSwapPaths",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 283,
                    "value": 511
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The specific swap paths for  AggregatedSwap do aggreated_swap to swap TokenA to TokenB",
                  "",
                  " AggregatedSwapPaths: Map: (token_a: CurrencyId, token_b: CurrencyId) => paths: Vec<SwapPath>"
                ]
              }
            ]
          },
          "calls": {
            "type": 280
          },
          "events": null,
          "constants": [
            {
              "name": "DexSwapJointList",
              "type": 512,
              "value": "0x0c040002040001040003",
              "docs": [" The alternative swap path joint list for DEX swap"]
            },
            {
              "name": "SwapPathLimit",
              "type": 4,
              "value": "0x03000000",
              "docs": [" The limit for length of swap path"]
            }
          ],
          "errors": {
            "type": 513
          },
          "index": 113
        },
        {
          "name": "AuctionManager",
          "storage": {
            "prefix": "AuctionManager",
            "items": [
              {
                "name": "CollateralAuctions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 514
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from auction id to collateral auction info",
                  "",
                  " CollateralAuctions: map AuctionId => Option<CollateralAuctionItem>"
                ]
              },
              {
                "name": "TotalCollateralInAuction",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Record of the total collateral amount of all active collateral auctions",
                  " under specific collateral type CollateralType -> TotalAmount",
                  "",
                  " TotalCollateralInAuction: map CurrencyId => Balance"
                ]
              },
              {
                "name": "TotalTargetInAuction",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Record of total target sales of all active collateral auctions",
                  "",
                  " TotalTargetInAuction: Balance"
                ]
              }
            ]
          },
          "calls": {
            "type": 285
          },
          "events": {
            "type": 114
          },
          "constants": [
            {
              "name": "MinimumIncrementSize",
              "type": 50,
              "value": "0x000082dfe40d47000000000000000000",
              "docs": [" The minimum increment size of each bid compared to the previous one"]
            },
            {
              "name": "AuctionTimeToClose",
              "type": 4,
              "value": "0x4b000000",
              "docs": [" The extended time for the auction to end after each successful bid"]
            },
            {
              "name": "AuctionDurationSoftCap",
              "type": 4,
              "value": "0x58020000",
              "docs": [
                " When the total duration of the auction exceeds this soft cap, push",
                " the auction to end more faster"
              ]
            },
            {
              "name": "GetStableCurrencyId",
              "type": 40,
              "value": "0x0001",
              "docs": [" The stable currency id"]
            },
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0x30e8ab75a40d0000",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple modules send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": 515
          },
          "index": 120
        },
        {
          "name": "Loans",
          "storage": {
            "prefix": "Loans",
            "items": [
              {
                "name": "Positions",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 516,
                    "value": 517
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The collateralized debit positions, map from",
                  " Owner -> CollateralType -> Position",
                  "",
                  " Positions: double_map CurrencyId, AccountId => Position"
                ]
              },
              {
                "name": "TotalPositions",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 517
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The total collateralized debit positions, map from",
                  " CollateralType -> Position",
                  "",
                  " TotalPositions: CurrencyId => Position"
                ]
              }
            ]
          },
          "calls": {
            "type": 286
          },
          "events": {
            "type": 115
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f6c6f616e",
              "docs": [" The loan's module id, keep all collaterals of CDPs."]
            }
          ],
          "errors": {
            "type": 518
          },
          "index": 121
        },
        {
          "name": "Honzon",
          "storage": {
            "prefix": "Honzon",
            "items": [
              {
                "name": "Authorization",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 519,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The authorization relationship map from",
                  " Authorizer -> (CollateralType, Authorizee) -> Authorized",
                  "",
                  " Authorization: double_map AccountId, (CurrencyId, T::AccountId) => Option<Balance>"
                ]
              }
            ]
          },
          "calls": {
            "type": 287
          },
          "events": {
            "type": 117
          },
          "constants": [
            {
              "name": "DepositPerAuthorization",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" Reserved amount per authorization."]
            }
          ],
          "errors": {
            "type": 520
          },
          "index": 122
        },
        {
          "name": "CdpTreasury",
          "storage": {
            "prefix": "CdpTreasury",
            "items": [
              {
                "name": "ExpectedCollateralAuctionSize",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The expected amount size for per lot collateral auction of specific",
                  " collateral type.",
                  "",
                  " ExpectedCollateralAuctionSize: map CurrencyId => Balance"
                ]
              },
              {
                "name": "DebitPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Current total debit value of system. It's not same as debit in CDP",
                  " engine, it is the bad debt of the system.",
                  "",
                  " DebitPool: Balance"
                ]
              }
            ]
          },
          "calls": {
            "type": 288
          },
          "events": {
            "type": 118
          },
          "constants": [
            {
              "name": "GetStableCurrencyId",
              "type": 40,
              "value": "0x0001",
              "docs": [" Stablecoin currency id"]
            },
            {
              "name": "MaxAuctionsCount",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The cap of lots number when create collateral auction on a",
                " liquidation or to create debit/surplus auction on block end.",
                " If set to 0, does not work."
              ]
            },
            {
              "name": "TreasuryAccount",
              "type": 0,
              "value": "0x6d6f646c6163612f687a74720000000000000000000000000000000000000000",
              "docs": []
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f63647074",
              "docs": [" The CDP treasury's module id, keep surplus and collateral assets", " from liquidation."]
            }
          ],
          "errors": {
            "type": 521
          },
          "index": 123
        },
        {
          "name": "CdpEngine",
          "storage": {
            "prefix": "CdpEngine",
            "items": [
              {
                "name": "DebitExchangeRate",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 50
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from collateral type to its exchange rate of debit units and",
                  " debit value",
                  "",
                  " DebitExchangeRate: CurrencyId => Option<ExchangeRate>"
                ]
              },
              {
                "name": "CollateralParams",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 522
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping from valid collateral type to its risk management params",
                  "",
                  " CollateralParams: CurrencyId => Option<RiskManagementParams>"
                ]
              },
              {
                "name": "LastAccumulationSecs",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [" Timestamp in seconds of the last interest accumulation", "", " LastAccumulationSecs: u64"]
              },
              {
                "name": "LiquidationContracts",
                "modifier": "Default",
                "type": {
                  "plain": 523
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 290
          },
          "events": {
            "type": 119
          },
          "constants": [
            {
              "name": "DefaultLiquidationRatio",
              "type": 50,
              "value": "0x0000ee042cfc430f0000000000000000",
              "docs": [" The default liquidation ratio for all collateral types of CDP"]
            },
            {
              "name": "DefaultDebitExchangeRate",
              "type": 50,
              "value": "0x00008a5d784563010000000000000000",
              "docs": [" The default debit exchange rate for all collateral types"]
            },
            {
              "name": "DefaultLiquidationPenalty",
              "type": 50,
              "value": "0x0000c52ebca2b1000000000000000000",
              "docs": [" The default liquidation penalty rate when liquidate unsafe CDP"]
            },
            {
              "name": "MinimumDebitValue",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The minimum debit value to avoid debit dust"]
            },
            {
              "name": "GetStableCurrencyId",
              "type": 40,
              "value": "0x0001",
              "docs": [" Stablecoin currency id"]
            },
            {
              "name": "MaxSwapSlippageCompareToOracle",
              "type": 50,
              "value": "0x00008a5d784563010000000000000000",
              "docs": [" When swap with DEX, the acceptable max slippage for the price from oracle."]
            },
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0x18ecab75a40d0000",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple modules send unsigned transactions."
              ]
            },
            {
              "name": "MaxLiquidationContractSlippage",
              "type": 50,
              "value": "0x00004f8c34e814020000000000000000",
              "docs": [
                " When settle collateral with smart contracts, the acceptable max slippage for the price",
                " from oracle."
              ]
            },
            {
              "name": "MaxLiquidationContracts",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f63647065",
              "docs": []
            }
          ],
          "errors": {
            "type": 525
          },
          "index": 124
        },
        {
          "name": "EmergencyShutdown",
          "storage": {
            "prefix": "EmergencyShutdown",
            "items": [
              {
                "name": "IsShutdown",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Emergency shutdown flag", "", " IsShutdown: bool"]
              },
              {
                "name": "CanRefund",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Open final redemption flag", "", " CanRefund: bool"]
              }
            ]
          },
          "calls": {
            "type": 293
          },
          "events": {
            "type": 121
          },
          "constants": [],
          "errors": {
            "type": 526
          },
          "index": 125
        },
        {
          "name": "NomineesElection",
          "storage": {
            "prefix": "NomineesElection",
            "items": [
              {
                "name": "Nominations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 527
                  }
                },
                "fallback": "0x00",
                "docs": [" The nominations for nominators.", "", " Nominations: map AccountId => Vec<NomineeId>"]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [" The nomination bonding ledger.", "", " Ledger: map AccountId => BondingLedger"]
              },
              {
                "name": "Votes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" The total voting value for nominees.", "", " Votes: map NomineeId => Balance"]
              },
              {
                "name": "Nominees",
                "modifier": "Default",
                "type": {
                  "plain": 527
                },
                "fallback": "0x00",
                "docs": [" The elected nominees.", "", " Nominees: Vec<NomineeId>"]
              },
              {
                "name": "CurrentEra",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Current era index.", "", " CurrentEra: EraIndex"]
              }
            ]
          },
          "calls": {
            "type": 294
          },
          "events": {
            "type": 124
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 44,
              "value": "0x6163612f6e6f6d65",
              "docs": []
            },
            {
              "name": "MinBond",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": []
            },
            {
              "name": "BondingDuration",
              "type": 4,
              "value": "0x1c000000",
              "docs": []
            },
            {
              "name": "NominateesCount",
              "type": 4,
              "value": "0x07000000",
              "docs": []
            },
            {
              "name": "MaxUnbondingChunks",
              "type": 4,
              "value": "0x07000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 532
          },
          "index": 131
        },
        {
          "name": "Homa",
          "storage": {
            "prefix": "Homa",
            "items": [
              {
                "name": "RelayChainCurrentEra",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The current era of relaychain", "", " RelayChainCurrentEra : EraIndex"]
              },
              {
                "name": "StakingLedgers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 43,
                    "value": 533
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The staking ledger of Homa subaccounts.",
                  "",
                  " StakingLedgers map: u16 => Option<StakingLedger>"
                ]
              },
              {
                "name": "TotalStakingBonded",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount of staking currency bonded in the homa protocol",
                  "",
                  " TotalStakingBonded value: Balance"
                ]
              },
              {
                "name": "ToBondPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total staking currency to bond on relaychain when new era,",
                  " and that is available to be match fast redeem request.",
                  " ToBondPool value: StakingCurrencyAmount"
                ]
              },
              {
                "name": "TotalVoidLiquid",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount of void liquid currency. It's will not be issued,",
                  " used to avoid newly issued LDOT to obtain the incoming staking income from relaychain.",
                  " And it is guaranteed that the current exchange rate between liquid currency and staking",
                  " currency will not change. It will be reset to 0 at the beginning of the `rebalance` when new",
                  " era starts.",
                  "",
                  " TotalVoidLiquid value: LiquidCurrencyAmount"
                ]
              },
              {
                "name": "UnclaimedRedemption",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" The total unclaimed redemption.", "", " UnclaimedRedemption value: StakingCurrencyAmount"]
              },
              {
                "name": "RedeemRequests",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 534
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Requests to redeem staked currencies.",
                  "",
                  " RedeemRequests: Map: AccountId => Option<(liquid_amount: Balance, allow_fast_match: bool)>"
                ]
              },
              {
                "name": "Unbondings",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 535,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The records of unbonding by AccountId.",
                  "",
                  " Unbondings: double_map AccountId, ExpireEraIndex => UnbondingStakingCurrencyAmount"
                ]
              },
              {
                "name": "EstimatedRewardRatePerEra",
                "modifier": "Default",
                "type": {
                  "plain": 50
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The estimated staking reward rate per era on relaychain.",
                  "",
                  " EstimatedRewardRatePerEra: value: Rate"
                ]
              },
              {
                "name": "SoftBondedCapPerSubAccount",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The maximum amount of bonded staking currency for a single sub on relaychain to obtain the",
                  " best staking rewards.",
                  "",
                  " SoftBondedCapPerSubAccount: value: Balance"
                ]
              },
              {
                "name": "CommissionRate",
                "modifier": "Default",
                "type": {
                  "plain": 50
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The rate of Homa drawn from the staking reward as commission.",
                  " The draw will be transfer to TreasuryAccount of Homa in liquid currency.",
                  "",
                  " CommissionRate: value: Rate"
                ]
              },
              {
                "name": "FastMatchFeeRate",
                "modifier": "Default",
                "type": {
                  "plain": 50
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The fixed fee rate for redeem request is fast matched.",
                  "",
                  " FastMatchFeeRate: value: Rate"
                ]
              },
              {
                "name": "LastEraBumpedBlock",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The relaychain block number of last era bumped.",
                  "",
                  " LastEraBumpedBlock: value: T::BlockNumber"
                ]
              },
              {
                "name": "BumpEraFrequency",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The internal of relaychain block number of relaychain to bump local current era.",
                  "",
                  " LastEraBumpedRelayChainBlock: value: T::BlockNumber"
                ]
              }
            ]
          },
          "calls": {
            "type": 295
          },
          "events": {
            "type": 125
          },
          "constants": [
            {
              "name": "StakingCurrencyId",
              "type": 40,
              "value": "0x0002",
              "docs": [" The currency id of the Staking asset"]
            },
            {
              "name": "LiquidCurrencyId",
              "type": 40,
              "value": "0x0003",
              "docs": [" The currency id of the Liquid asset"]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f686f6d61",
              "docs": [" The homa's module id."]
            },
            {
              "name": "DefaultExchangeRate",
              "type": 50,
              "value": "0x00008a5d784563010000000000000000",
              "docs": [" The default exchange rate for liquid currency to staking currency."]
            },
            {
              "name": "TreasuryAccount",
              "type": 0,
              "value": "0x6d6f646c6163612f686d74720000000000000000000000000000000000000000",
              "docs": [" Vault reward of Homa protocol"]
            },
            {
              "name": "ActiveSubAccountsIndexList",
              "type": 536,
              "value": "0x040000",
              "docs": [
                " The index list of active Homa subaccounts.",
                " `active` means these subaccounts can continue do bond/unbond operations by Homa."
              ]
            },
            {
              "name": "BondingDuration",
              "type": 4,
              "value": "0x1c000000",
              "docs": [" Number of eras for unbonding is expired on relaychain."]
            },
            {
              "name": "MintThreshold",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" The staking amount of threshold to mint."]
            },
            {
              "name": "RedeemThreshold",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" The liquid amount of threshold to redeem."]
            }
          ],
          "errors": {
            "type": 537
          },
          "index": 136
        },
        {
          "name": "XcmInterface",
          "storage": {
            "prefix": "XcmInterface",
            "items": [
              {
                "name": "XcmDestWeightAndFee",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 129,
                    "value": 538
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The dest weight limit and fee for execution XCM msg sended by XcmInterface. Must be",
                  " sufficient, otherwise the execution of XCM msg on relaychain will fail.",
                  "",
                  " XcmDestWeightAndFee: map: XcmInterfaceOperation => (Weight, Balance)"
                ]
              }
            ]
          },
          "calls": {
            "type": 300
          },
          "events": {
            "type": 128
          },
          "constants": [
            {
              "name": "StakingCurrencyId",
              "type": 40,
              "value": "0x0002",
              "docs": [" The currency id of the Staking asset"]
            },
            {
              "name": "ParachainAccount",
              "type": 0,
              "value": "0x70617261d0070000000000000000000000000000000000000000000000000000",
              "docs": [" The account of parachain on the relaychain."]
            },
            {
              "name": "RelayChainUnbondingSlashingSpans",
              "type": 4,
              "value": "0x05000000",
              "docs": [" Unbonding slashing spans for unbonding on the relaychain."]
            }
          ],
          "errors": {
            "type": 539
          },
          "index": 137
        },
        {
          "name": "Incentives",
          "storage": {
            "prefix": "Incentives",
            "items": [
              {
                "name": "IncentiveRewardAmounts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 540,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Mapping from pool to its fixed incentive amounts of multi currencies per period.",
                  "",
                  " IncentiveRewardAmounts: double_map Pool, RewardCurrencyId => RewardAmountPerPeriod"
                ]
              },
              {
                "name": "DexSavingRewardRates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 131,
                    "value": 50
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " NOTE: already deprecated, need remove it after next runtime upgrade",
                  " Mapping from pool to its fixed reward rate per period.",
                  "",
                  " DexSavingRewardRates: map Pool => SavingRatePerPeriod"
                ]
              },
              {
                "name": "ClaimRewardDeductionRates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 131,
                    "value": 50
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Mapping from pool to its claim reward deduction rate.",
                  "",
                  " ClaimRewardDeductionRates: map Pool => DeductionRate"
                ]
              },
              {
                "name": "PendingMultiRewards",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Twox64Concat"],
                    "key": 489,
                    "value": 491
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The pending rewards amount, actual available rewards amount may be deducted",
                  "",
                  " PendingMultiRewards: double_map PoolId, AccountId => BTreeMap<CurrencyId, Balance>"
                ]
              }
            ]
          },
          "calls": {
            "type": 303
          },
          "events": {
            "type": 130
          },
          "constants": [
            {
              "name": "AccumulatePeriod",
              "type": 4,
              "value": "0x05000000",
              "docs": [" The period to accumulate rewards"]
            },
            {
              "name": "NativeCurrencyId",
              "type": 40,
              "value": "0x0000",
              "docs": [" The native currency for earning staking"]
            },
            {
              "name": "StableCurrencyId",
              "type": 40,
              "value": "0x0001",
              "docs": [" The reward type for dex saving."]
            },
            {
              "name": "RewardsSource",
              "type": 0,
              "value": "0x6d6f646c6163612f75726c730000000000000000000000000000000000000000",
              "docs": [" The source account for native token rewards."]
            },
            {
              "name": "EarnShareBooster",
              "type": 414,
              "value": "0xe0930400",
              "docs": [" Additional share amount from earning"]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f696e6374",
              "docs": [" The module id, keep DexShare LP."]
            }
          ],
          "errors": {
            "type": 541
          },
          "index": 140
        },
        {
          "name": "NFT",
          "storage": null,
          "calls": {
            "type": 308
          },
          "events": {
            "type": 132
          },
          "constants": [
            {
              "name": "CreateClassDeposit",
              "type": 6,
              "value": "0x0040e59c301200000000000000000000",
              "docs": [" The minimum balance to create class"]
            },
            {
              "name": "CreateTokenDeposit",
              "type": 6,
              "value": "0x00204aa9d10100000000000000000000",
              "docs": [" The minimum balance to create token"]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [" Deposit required for per byte."]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f614e4654",
              "docs": [" The NFT's module id"]
            },
            {
              "name": "MaxAttributesBytes",
              "type": 4,
              "value": "0x00080000",
              "docs": [" Maximum number of bytes in attributes"]
            }
          ],
          "errors": {
            "type": 542
          },
          "index": 141
        },
        {
          "name": "AssetRegistry",
          "storage": {
            "prefix": "AssetRegistry",
            "items": [
              {
                "name": "NextForeignAssetId",
                "modifier": "Default",
                "type": {
                  "plain": 43
                },
                "fallback": "0x0000",
                "docs": [" Next available Foreign AssetId ID.", "", " NextForeignAssetId: ForeignAssetId"]
              },
              {
                "name": "NextStableAssetId",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Next available Stable AssetId ID.", "", " NextStableAssetId: StableAssetPoolId"]
              },
              {
                "name": "ForeignAssetLocations",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 43,
                    "value": 83
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The storages for MultiLocations.",
                  "",
                  " ForeignAssetLocations: map ForeignAssetId => Option<MultiLocation>"
                ]
              },
              {
                "name": "LocationToCurrencyIds",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 83,
                    "value": 40
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The storages for CurrencyIds.",
                  "",
                  " LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>"
                ]
              },
              {
                "name": "Erc20IdToAddress",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 34
                  }
                },
                "fallback": "0x00",
                "docs": [" The storages for EvmAddress.", "", " Erc20IdToAddress: map Erc20Id => Option<EvmAddress>"]
              },
              {
                "name": "AssetMetadatas",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 135,
                    "value": 134
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The storages for AssetMetadatas.",
                  "",
                  " AssetMetadatas: map AssetIds => Option<AssetMetadata>"
                ]
              }
            ]
          },
          "calls": {
            "type": 313
          },
          "events": {
            "type": 133
          },
          "constants": [
            {
              "name": "StakingCurrencyId",
              "type": 40,
              "value": "0x0002",
              "docs": [" The Currency ID for the staking currency"]
            }
          ],
          "errors": {
            "type": 543
          },
          "index": 142
        },
        {
          "name": "RenVmBridge",
          "storage": {
            "prefix": "RenVmBridge",
            "items": [
              {
                "name": "RenVmPublicKey",
                "modifier": "Optional",
                "type": {
                  "plain": 35
                },
                "fallback": "0x00",
                "docs": [" The RenVM split public key"]
              },
              {
                "name": "Signatures",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 240,
                    "value": 31
                  }
                },
                "fallback": "0x00",
                "docs": [" Signature blacklist. This is required to prevent double claim."]
              },
              {
                "name": "BurnEvents",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 544
                  }
                },
                "fallback": "0x00",
                "docs": [" Record burn event details"]
              },
              {
                "name": "NextBurnEventId",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Next burn event ID"]
              }
            ]
          },
          "calls": {
            "type": 314
          },
          "events": {
            "type": 136
          },
          "constants": [
            {
              "name": "CurrencyIdentifier",
              "type": 1,
              "value": "0xf6b5b360905f856404bd4cf39021b82209908faa44159e68ea207ab8a5e13197",
              "docs": [" The RenVM Currency identifier"]
            },
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0x48e4ab75a40d0000",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple modules send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": 545
          },
          "index": 150
        },
        {
          "name": "Starport",
          "storage": {
            "prefix": "Starport",
            "items": [
              {
                "name": "SupplyCaps",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 40,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" Stores the amount of supplies that are still available to be uploaded for each asset type."]
              },
              {
                "name": "InvokedNoticeHashes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 31
                  }
                },
                "fallback": "0x00",
                "docs": [" Stores the Hash of Notices that have already been invoked. Prevents", " double-invocation."]
              },
              {
                "name": "GatewayAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 546
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the current authorities on the Compound chain. Used to verify the signatures on a",
                  " given Notice."
                ]
              }
            ]
          },
          "calls": {
            "type": 315
          },
          "events": {
            "type": 137
          },
          "constants": [
            {
              "name": "CashCurrencyId",
              "type": 40,
              "value": "0x0015",
              "docs": [" The ID for the CASH asset"]
            },
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6163612f73747074",
              "docs": [" The ID for this pallet"]
            },
            {
              "name": "MaxGatewayAuthorities",
              "type": 4,
              "value": "0x08000000",
              "docs": [" The max number authorities that are stored"]
            },
            {
              "name": "PercentThresholdForAuthoritySignature",
              "type": 203,
              "value": "0x0065cd1d",
              "docs": [" The percentage threshold of authorities signatures required for Notices to take effect."]
            }
          ],
          "errors": {
            "type": 547
          },
          "index": 151
        },
        {
          "name": "CompoundCash",
          "storage": {
            "prefix": "CompoundCash",
            "items": [
              {
                "name": "PastYield",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 6,
                    "value": 548
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [" Stores a history of yields that have already been consumed."]
              },
              {
                "name": "FutureYield",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 6,
                    "value": 548
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [" Stores a list of future-yields."]
              },
              {
                "name": "CurrentYield",
                "modifier": "Default",
                "type": {
                  "plain": 549
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [" Stores the current yield used for CASH interest calculation."]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 138
          },
          "constants": [],
          "errors": {
            "type": 550
          },
          "index": 152
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "items": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "type": {
                  "plain": 93
                },
                "fallback": "0x64000000",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 161
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "items": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 551
                },
                "fallback": "0x00",
                "docs": [" Status of the inbound XCMP channels."]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 557,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [" Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "type": {
                  "plain": 558
                },
                "fallback": "0x00",
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Twox64Concat"],
                    "key": 561,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [" The messages outbound in a given XCMP channel."]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 93,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [" Any signal messages waiting to be sent."]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "type": {
                  "plain": 562
                },
                "fallback": "0x020000000500000001000000a086010000000000020000000000000000c817a804000000",
                "docs": [" The configuration which controls the dynamics of the outbound queue."]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 8,
                    "value": 563
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
              }
            ]
          },
          "calls": {
            "type": 318
          },
          "events": {
            "type": 139
          },
          "constants": [],
          "errors": {
            "type": 564
          },
          "index": 170
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "items": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [" The latest available query index."]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 8,
                    "value": 565
                  }
                },
                "fallback": "0x00",
                "docs": [" The ongoing queries."]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 569,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [" The Latest versions that we know various locations support."]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 569,
                    "value": 8
                  }
                },
                "fallback": "0x00",
                "docs": [" All locations that we have requested version notifications from."]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 569,
                    "value": 570
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "type": {
                  "plain": 571
                },
                "fallback": "0x00",
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "type": {
                  "plain": 574
                },
                "fallback": "0x00",
                "docs": [" The current migration's stage, if any."]
              }
            ]
          },
          "calls": {
            "type": 319
          },
          "events": {
            "type": 142
          },
          "constants": [],
          "errors": {
            "type": 575
          },
          "index": 171
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": null,
          "events": {
            "type": 170
          },
          "constants": [],
          "errors": {
            "type": 576
          },
          "index": 172
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "items": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "type": {
                  "plain": 577
                },
                "fallback": "0x00e40b5402000000",
                "docs": [" The configuration."]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "type": {
                  "plain": 578
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" The page index."]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 4,
                    "value": 579
                  }
                },
                "fallback": "0x00",
                "docs": [" The queue pages."]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 8,
                    "value": 580
                  }
                },
                "fallback": "0x00",
                "docs": [" The overweight messages."]
              }
            ]
          },
          "calls": {
            "type": 344
          },
          "events": {
            "type": 171
          },
          "constants": [],
          "errors": {
            "type": 581
          },
          "index": 173
        },
        {
          "name": "XTokens",
          "storage": null,
          "calls": {
            "type": 345
          },
          "events": {
            "type": 172
          },
          "constants": [
            {
              "name": "SelfLocation",
              "type": 83,
              "value": "0x010100411f",
              "docs": [" Self chain location."]
            },
            {
              "name": "BaseXcmWeight",
              "type": 8,
              "value": "0x00e1f50500000000",
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "errors": {
            "type": 582
          },
          "index": 174
        },
        {
          "name": "UnknownTokens",
          "storage": {
            "prefix": "UnknownTokens",
            "items": [
              {
                "name": "ConcreteFungibleBalances",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 583,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Concrete fungible balances under a given location and a concrete",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              },
              {
                "name": "AbstractFungibleBalances",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 584,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Abstract fungible balances under a given location and a abstract",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 173
          },
          "constants": [],
          "errors": {
            "type": 585
          },
          "index": 175
        },
        {
          "name": "OrmlXcm",
          "storage": null,
          "calls": {
            "type": 347
          },
          "events": {
            "type": 174
          },
          "constants": [],
          "errors": {
            "type": 586
          },
          "index": 176
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "ChainId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [" The EVM Chain ID.", "", " ChainId: u64"]
              },
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 34,
                    "value": 587
                  }
                },
                "fallback": "0x00",
                "docs": [" The EVM accounts info.", "", " Accounts: map EvmAddress => Option<AccountInfo<T>>"]
              },
              {
                "name": "ContractStorageSizes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 34,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The storage usage for contracts. Including code size, extra bytes and total AccountStorages",
                  " size.",
                  "",
                  " Accounts: map EvmAddress => u32"
                ]
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat", "Blake2_128Concat"],
                    "key": 590,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The storages for EVM contracts.",
                  "",
                  " AccountStorages: double_map EvmAddress, H256 => H256"
                ]
              },
              {
                "name": "Codes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 591
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The code for EVM contracts.",
                  " Key is Keccak256 hash of code.",
                  "",
                  " Codes: H256 => Vec<u8>"
                ]
              },
              {
                "name": "CodeInfos",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Identity"],
                    "key": 9,
                    "value": 592
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The code info for EVM contracts.",
                  " Key is Keccak256 hash of code.",
                  "",
                  " CodeInfos: H256 => Option<CodeInfo>"
                ]
              },
              {
                "name": "NetworkContractIndex",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [" Next available system contract address.", "", " NetworkContractIndex: u64"]
              },
              {
                "name": "ExtrinsicOrigin",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" Extrinsics origin for the current transaction.", "", " ExtrinsicOrigin: Option<AccountId>"]
              }
            ]
          },
          "calls": {
            "type": 348
          },
          "events": {
            "type": 175
          },
          "constants": [
            {
              "name": "NewContractExtraBytes",
              "type": 4,
              "value": "0x10270000",
              "docs": [" Charge extra bytes for creating a contract, would be reserved until", " the contract deleted."]
            },
            {
              "name": "StorageDepositPerByte",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [" Storage required for per byte."]
            },
            {
              "name": "TxFeePerGas",
              "type": 6,
              "value": "0x0000ed902e0000000000000000000000",
              "docs": [" Tx fee required for per gas.", " Provide to the client"]
            },
            {
              "name": "NetworkContractSource",
              "type": 34,
              "value": "0x0000000000000000000000000000000000000000",
              "docs": [" The EVM address for creating system contract."]
            },
            {
              "name": "DeveloperDeposit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" Deposit for the developer."]
            },
            {
              "name": "PublicationFee",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [" The fee for publishing the contract."]
            },
            {
              "name": "TreasuryAccount",
              "type": 0,
              "value": "0x6d6f646c6163612f747273790000000000000000000000000000000000000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 593
          },
          "index": 180
        },
        {
          "name": "EVMBridge",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [],
          "errors": {
            "type": 594
          },
          "index": 181
        },
        {
          "name": "EvmAccounts",
          "storage": {
            "prefix": "EvmAccounts",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 34,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The Substrate Account for EvmAddresses",
                  "",
                  " Accounts: map EvmAddress => Option<AccountId>"
                ]
              },
              {
                "name": "EvmAddresses",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 34
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The EvmAddress for Substrate Accounts",
                  "",
                  " EvmAddresses: map AccountId => Option<EvmAddress>"
                ]
              }
            ]
          },
          "calls": {
            "type": 352
          },
          "events": {
            "type": 187
          },
          "constants": [
            {
              "name": "ChainId",
              "type": 8,
              "value": "0x5302000000000000",
              "docs": [" Chain ID of EVM."]
            }
          ],
          "errors": {
            "type": 595
          },
          "index": 182
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": 596
                },
                "fallback": "0x00",
                "docs": [" Uncles"]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" Author of current block."]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Whether uncles were already set in this block."]
              }
            ]
          },
          "calls": {
            "type": 353
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": 599
          },
          "index": 190
        },
        {
          "name": "CollatorSelection",
          "storage": {
            "prefix": "CollatorSelection",
            "items": [
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "plain": 480
                },
                "fallback": "0x00",
                "docs": [" The invulnerable, fixed collators.", "", " Invulnerables: Vec<AccountId>"]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 600
                },
                "fallback": "0x00",
                "docs": [" The (community, limited) collation candidates.", "", " Candidates: BTreeSet<AccountId>"]
              },
              {
                "name": "DesiredCandidates",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Desired number of candidates.",
                  "",
                  " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct.",
                  " DesiredCandidates: u32"
                ]
              },
              {
                "name": "CandidacyBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [" Fixed deposit bond for each candidate.", "", " CandidacyBond: Balance"]
              },
              {
                "name": "SessionPoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [" Session points for each candidate.", "", " SessionPoints: map AccountId => u32"]
              },
              {
                "name": "NonCandidates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " Mapping from the kicked candidate or the left candidate to session index.",
                  "",
                  " NonCandidates: map AccountId => SessionIndex"
                ]
              }
            ]
          },
          "calls": {
            "type": 357
          },
          "events": {
            "type": 188
          },
          "constants": [
            {
              "name": "PotId",
              "type": 409,
              "value": "0x6163612f63706f74",
              "docs": [" Account Identifier from which the internal Pot is generated."]
            },
            {
              "name": "MinCandidates",
              "type": 4,
              "value": "0x05000000",
              "docs": [" Minimum number of candidates."]
            },
            {
              "name": "MaxCandidates",
              "type": 4,
              "value": "0xc8000000",
              "docs": [
                " Maximum number of candidates that we should have. This is used for benchmarking and is",
                " not enforced.",
                "",
                " This does not take into account the invulnerables."
              ]
            },
            {
              "name": "MaxInvulnerables",
              "type": 4,
              "value": "0x32000000",
              "docs": [" Maximum number of invulnerables."]
            },
            {
              "name": "KickPenaltySessionLength",
              "type": 4,
              "value": "0x08000000",
              "docs": [
                " The Kicked candidate cannot register candidate or withdraw bond until",
                " `KickPenaltySessionLength` ends."
              ]
            },
            {
              "name": "CollatorKickThreshold",
              "type": 414,
              "value": "0x20a10700",
              "docs": [" Will be kicked if block is not produced in threshold."]
            },
            {
              "name": "MinRewardDistributeAmount",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [" Minimum reward to be distributed to the collators."]
            }
          ],
          "errors": {
            "type": 602
          },
          "index": 191
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": [" The current set of validators."]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" Current index of the session."]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 603
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 413
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 359
                  }
                },
                "fallback": "0x00",
                "docs": [" The next session keys for a validator."]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 605,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [" The owner of a key. The key is the `KeyTypeId` + the encoded key."]
              }
            ]
          },
          "calls": {
            "type": 358
          },
          "events": {
            "type": 189
          },
          "constants": [],
          "errors": {
            "type": 607
          },
          "index": 192
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 608
                },
                "fallback": "0x00",
                "docs": [" The current authority set."]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 610
                },
                "fallback": "0x0000000000000000",
                "docs": [" The current slot of this block.", "", " This will be set in `on_initialize`."]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 193
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 608
                },
                "fallback": "0x00",
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 194
        },
        {
          "name": "SessionManager",
          "storage": {
            "prefix": "SessionManager",
            "items": [
              {
                "name": "SessionDuration",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The current session duration.", "", " SessionDuration: T::BlockNumber"]
              },
              {
                "name": "DurationOffset",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The current session duration offset.", "", " DurationOffset: T::BlockNumber"]
              },
              {
                "name": "SessionDurationChanges",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 4,
                    "value": 28
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Mapping from block number to new session index and duration.",
                  "",
                  " SessionDurationChanges: map BlockNumber => (SessionIndex, SessionDuration)"
                ]
              }
            ]
          },
          "calls": {
            "type": 362
          },
          "events": {
            "type": 190
          },
          "constants": [],
          "errors": {
            "type": 611
          },
          "index": 195
        },
        {
          "name": "StableAsset",
          "storage": {
            "prefix": "StableAsset",
            "items": [
              {
                "name": "PoolCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Pools",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat"],
                    "key": 4,
                    "value": 612
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 363
          },
          "events": {
            "type": 191
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 409,
              "value": "0x6e7574732f737461",
              "docs": []
            },
            {
              "name": "FeePrecision",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": []
            },
            {
              "name": "SwapExactOverAmount",
              "type": 6,
              "value": "0x64000000000000000000000000000000",
              "docs": []
            },
            {
              "name": "APrecision",
              "type": 6,
              "value": "0x64000000000000000000000000000000",
              "docs": []
            },
            {
              "name": "PoolAssetLimit",
              "type": 4,
              "value": "0x05000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 613
          },
          "index": 200
        },
        {
          "name": "Payments",
          "storage": {
            "prefix": "Payments",
            "items": [
              {
                "name": "Payment",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Blake2_128Concat", "Blake2_128Concat"],
                    "key": 429,
                    "value": 614
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Payments created by a user, this method of storageDoubleMap is chosen",
                  " since there is no usecase for listing payments by provider/currency. The",
                  " payment will only be referenced by the creator in any transaction of",
                  " interest. The storage map keys are the creator and the recipient, this",
                  " also ensures that for any (sender,recipient) combo, only a single",
                  " payment is active. The history of payment is not stored."
                ]
              },
              {
                "name": "ScheduledTasks",
                "modifier": "Default",
                "type": {
                  "plain": 616
                },
                "fallback": "0x00",
                "docs": [" Store the list of tasks to be executed in the on_idle function"]
              }
            ]
          },
          "calls": {
            "type": 364
          },
          "events": {
            "type": 192
          },
          "constants": [
            {
              "name": "IncentivePercentage",
              "type": 195,
              "value": "0x05",
              "docs": [" Incentive percentage - amount witheld from sender"]
            },
            {
              "name": "MaxRemarkLength",
              "type": 4,
              "value": "0x0a000000",
              "docs": [" Maximum permitted size of `Remark`"]
            },
            {
              "name": "CancelBufferBlockLength",
              "type": 4,
              "value": "0x2c010000",
              "docs": [" Buffer period - number of blocks to wait before user can claim", " canceled payment"]
            },
            {
              "name": "MaxScheduledTaskListLength",
              "type": 4,
              "value": "0x05000000",
              "docs": [" Buffer period - number of blocks to wait before user can claim", " canceled payment"]
            }
          ],
          "errors": {
            "type": 622
          },
          "index": 201
        },
        {
          "name": "Earning",
          "storage": {
            "prefix": "Earning",
            "items": [
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": ["Twox64Concat"],
                    "key": 0,
                    "value": 623
                  }
                },
                "fallback": "0x00",
                "docs": [" The earning bonding ledger.", "", " Ledger: map AccountId => Option<BondingLedger>"]
              }
            ]
          },
          "calls": {
            "type": 365
          },
          "events": {
            "type": 196
          },
          "constants": [
            {
              "name": "MinBond",
              "type": 6,
              "value": "0x64000000000000000000000000000000",
              "docs": []
            },
            {
              "name": "UnbondingPeriod",
              "type": 4,
              "value": "0x03000000",
              "docs": []
            },
            {
              "name": "InstantUnstakeFee",
              "type": 414,
              "value": "0xa0860100",
              "docs": []
            },
            {
              "name": "MaxUnbondingChunks",
              "type": 4,
              "value": "0x03000000",
              "docs": []
            },
            {
              "name": "LockIdentifier",
              "type": 44,
              "value": "0x6163612f6561726e",
              "docs": []
            }
          ],
          "errors": {
            "type": 625
          },
          "index": 210
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "items": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "type": {
                  "plain": 66
                },
                "fallback": "0x00",
                "docs": [" Were the validation data set to notify the relay chain?"]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [" The relay chain block number associated with the last parachain block."]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "type": {
                  "plain": 626
                },
                "fallback": "0x00",
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "type": {
                  "plain": 370
                },
                "fallback": "0x00",
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "type": {
                  "plain": 628
                },
                "fallback": "0x00",
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "type": {
                  "plain": 632
                },
                "fallback": "0x00",
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "type": {
                  "plain": 633
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "type": {
                  "plain": 634
                },
                "fallback": "0x00",
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "type": {
                  "plain": 637
                },
                "fallback": "0x00",
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 206
                },
                "fallback": "0x00",
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "type": {
                  "plain": 206
                },
                "fallback": "0x00",
                "docs": [" Upward messages that are still pending and not yet send to the relay chain."]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "type": {
                  "plain": 8
                },
                "fallback": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [" The next authorized upgrade, if there is one."]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "type": {
                  "plain": 10
                },
                "fallback": "0x00",
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "type": 366
          },
          "events": {
            "type": 197
          },
          "constants": [],
          "errors": {
            "type": 639
          },
          "index": 160
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [" The `AccountId` of the sudo key."]
              }
            ]
          },
          "calls": {
            "type": 379
          },
          "events": {
            "type": 198
          },
          "constants": [],
          "errors": {
            "type": 640
          },
          "index": 255
        }
      ],
      "extrinsic": {
        "type": 641,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": 643,
            "additionalSigned": 31
          },
          {
            "identifier": "CheckSpecVersion",
            "type": 644,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 645,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 646,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 647,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 649,
            "additionalSigned": 31
          },
          {
            "identifier": "CheckWeight",
            "type": 650,
            "additionalSigned": 31
          },
          {
            "identifier": "SetEvmOrigin",
            "type": 651,
            "additionalSigned": 31
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 652,
            "additionalSigned": 31
          }
        ]
      },
      "type": 63
    }
  }
}
